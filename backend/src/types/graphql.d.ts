export const typeDefs = [
  'type Query {\n  accountById(_id: MongoID!): Account\n  accountByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsAccountInput): [Account!]!\n  accountOne(\n    # Filter by fields\n    filter: FilterFindOneAccountInput\n    skip: Int\n    sort: SortFindOneAccountInput\n  ): Account\n  accountMany(\n    # Filter by fields\n    filter: FilterFindManyAccountInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyAccountInput\n  ): [Account!]!\n  accountCount(\n    # Filter by fields\n    filter: FilterCountAccountInput\n  ): Int\n  accountConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyAccountInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionAccountEnum = _ID_DESC\n  ): AccountConnection\n  accountPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyAccountInput\n    sort: SortFindManyAccountInput\n  ): AccountPagination\n  adjustmentById(_id: MongoID!): Adjustment\n  adjustmentByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsAdjustmentInput): [Adjustment!]!\n  adjustmentOne(\n    # Filter by fields\n    filter: FilterFindOneAdjustmentInput\n    skip: Int\n    sort: SortFindOneAdjustmentInput\n  ): Adjustment\n  adjustmentMany(\n    # Filter by fields\n    filter: FilterFindManyAdjustmentInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyAdjustmentInput\n  ): [Adjustment!]!\n  adjustmentCount(\n    # Filter by fields\n    filter: FilterCountAdjustmentInput\n  ): Int\n  adjustmentConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyAdjustmentInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionAdjustmentEnum = _ID_DESC\n  ): AdjustmentConnection\n  adjustmentPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyAdjustmentInput\n    sort: SortFindManyAdjustmentInput\n  ): AdjustmentPagination\n  AdjustmentWarehouseResolver: Adjustment\n  adjustmentProductAdjustmentsResolver: Adjustment\n  attributeById(_id: MongoID!): Attribute\n  attributeByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsAttributeInput): [Attribute!]!\n  attributeOne(\n    # Filter by fields\n    filter: FilterFindOneAttributeInput\n    skip: Int\n    sort: SortFindOneAttributeInput\n  ): Attribute\n  attributeMany(\n    # Filter by fields\n    filter: FilterFindManyAttributeInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyAttributeInput\n  ): [Attribute!]!\n  attributeCount(\n    # Filter by fields\n    filter: FilterCountAttributeInput\n  ): Int\n  attributeConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyAttributeInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionAttributeEnum = _ID_DESC\n  ): AttributeConnection\n  attributePagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyAttributeInput\n    sort: SortFindManyAttributeInput\n  ): AttributePagination\n  attributeValuesResolver: Attribute\n  brandById(_id: MongoID!): Brand\n  brandByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsBrandInput): [Brand!]!\n  brandOne(\n    # Filter by fields\n    filter: FilterFindOneBrandInput\n    skip: Int\n    sort: SortFindOneBrandInput\n  ): Brand\n  brandMany(\n    # Filter by fields\n    filter: FilterFindManyBrandInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyBrandInput\n  ): [Brand!]!\n  brandCount(\n    # Filter by fields\n    filter: FilterCountBrandInput\n  ): Int\n  brandConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyBrandInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionBrandEnum = _ID_DESC\n  ): BrandConnection\n  brandPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyBrandInput\n    sort: SortFindManyBrandInput\n  ): BrandPagination\n  categoryById(_id: MongoID!): Category\n  categoryByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCategoryInput): [Category!]!\n  categoryOne(\n    # Filter by fields\n    filter: FilterFindOneCategoryInput\n    skip: Int\n    sort: SortFindOneCategoryInput\n  ): Category\n  categoryMany(\n    # Filter by fields\n    filter: FilterFindManyCategoryInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyCategoryInput\n  ): [Category!]!\n  categoryCount(\n    # Filter by fields\n    filter: FilterCountCategoryInput\n  ): Int\n  categoryConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyCategoryInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionCategoryEnum = _ID_DESC\n  ): CategoryConnection\n  categoryPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyCategoryInput\n    sort: SortFindManyCategoryInput\n  ): CategoryPagination\n  couponById(_id: MongoID!): Coupon\n  couponByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCouponInput): [Coupon!]!\n  couponOne(\n    # Filter by fields\n    filter: FilterFindOneCouponInput\n    skip: Int\n    sort: SortFindOneCouponInput\n  ): Coupon\n  couponMany(\n    # Filter by fields\n    filter: FilterFindManyCouponInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyCouponInput\n  ): [Coupon!]!\n  couponCount(\n    # Filter by fields\n    filter: FilterCountCouponInput\n  ): Int\n  couponConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyCouponInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionCouponEnum = _ID_DESC\n  ): CouponConnection\n  couponPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyCouponInput\n    sort: SortFindManyCouponInput\n  ): CouponPagination\n  couponUserResolver: Coupon\n  customerById(_id: MongoID!): Customer\n  customerByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCustomerInput): [Customer!]!\n  customerOne(\n    # Filter by fields\n    filter: FilterFindOneCustomerInput\n    skip: Int\n    sort: SortFindOneCustomerInput\n  ): Customer\n  customerMany(\n    # Filter by fields\n    filter: FilterFindManyCustomerInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyCustomerInput\n  ): [Customer!]!\n  customerCount(\n    # Filter by fields\n    filter: FilterCountCustomerInput\n  ): Int\n  customerConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyCustomerInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionCustomerEnum = _ID_DESC\n  ): CustomerConnection\n  customerPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyCustomerInput\n    sort: SortFindManyCustomerInput\n  ): CustomerPagination\n  customerGroupResolver: Customer\n  customerUserResolver: Customer\n  customerGroupById(_id: MongoID!): Customer_Group\n  customerGroupByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCustomer_GroupInput): [Customer_Group!]!\n  customerGroupOne(\n    # Filter by fields\n    filter: FilterFindOneCustomer_GroupInput\n    skip: Int\n    sort: SortFindOneCustomer_GroupInput\n  ): Customer_Group\n  customerGroupMany(\n    # Filter by fields\n    filter: FilterFindManyCustomer_GroupInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyCustomer_GroupInput\n  ): [Customer_Group!]!\n  customerGroupCount(\n    # Filter by fields\n    filter: FilterCountCustomer_GroupInput\n  ): Int\n  customerGroupConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyCustomer_GroupInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionCustomer_GroupEnum = _ID_DESC\n  ): Customer_GroupConnection\n  customerGroupPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyCustomer_GroupInput\n    sort: SortFindManyCustomer_GroupInput\n  ): Customer_GroupPagination\n  departmentById(_id: MongoID!): Department\n  departmentByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsDepartmentInput): [Department!]!\n  departmentOne(\n    # Filter by fields\n    filter: FilterFindOneDepartmentInput\n    skip: Int\n    sort: SortFindOneDepartmentInput\n  ): Department\n  departmentMany(\n    # Filter by fields\n    filter: FilterFindManyDepartmentInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyDepartmentInput\n  ): [Department!]!\n  departmentCount(\n    # Filter by fields\n    filter: FilterCountDepartmentInput\n  ): Int\n  departmentConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyDepartmentInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionDepartmentEnum = _ID_DESC\n  ): DepartmentConnection\n  departmentPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyDepartmentInput\n    sort: SortFindManyDepartmentInput\n  ): DepartmentPagination\n  EmployeeById(_id: MongoID!): Employee\n  EmployeeByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsEmployeeInput): [Employee!]!\n  EmployeeOne(\n    # Filter by fields\n    filter: FilterFindOneEmployeeInput\n    skip: Int\n    sort: SortFindOneEmployeeInput\n  ): Employee\n  EmployeeMany(\n    # Filter by fields\n    filter: FilterFindManyEmployeeInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyEmployeeInput\n  ): [Employee!]!\n  EmployeeCount(\n    # Filter by fields\n    filter: FilterCountEmployeeInput\n  ): Int\n  EmployeeConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyEmployeeInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionEmployeeEnum = _ID_DESC\n  ): EmployeeConnection\n  EmployeePagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyEmployeeInput\n    sort: SortFindManyEmployeeInput\n  ): EmployeePagination\n  EmployeeRoleResolver: Employee\n  EmployeePersonnelResolver: Employee\n  EmployeePayrollResolver: Employee\n  productAdjustmentById(_id: MongoID!): Product_Adjustment\n  productAdjustmentByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_AdjustmentInput): [Product_Adjustment!]!\n  productAdjustmentOne(\n    # Filter by fields\n    filter: FilterFindOneProduct_AdjustmentInput\n    skip: Int\n    sort: SortFindOneProduct_AdjustmentInput\n  ): Product_Adjustment\n  productAdjustmentMany(\n    # Filter by fields\n    filter: FilterFindManyProduct_AdjustmentInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProduct_AdjustmentInput\n  ): [Product_Adjustment!]!\n  productAdjustmentCount(\n    # Filter by fields\n    filter: FilterCountProduct_AdjustmentInput\n  ): Int\n  productAdjustmentConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProduct_AdjustmentInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProduct_AdjustmentEnum = _ID_DESC\n  ): Product_AdjustmentConnection\n  productAdjustmentPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProduct_AdjustmentInput\n    sort: SortFindManyProduct_AdjustmentInput\n  ): Product_AdjustmentPagination\n  ProductAdjustmentProductResolver: Product_Adjustment\n  ProductAdjustmentVariantIDResolver: Product_Adjustment\n  productPurchaseById(_id: MongoID!): Product_Purchase\n  productPurchaseByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_PurchaseInput): [Product_Purchase!]!\n  productPurchaseOne(\n    # Filter by fields\n    filter: FilterFindOneProduct_PurchaseInput\n    skip: Int\n    sort: SortFindOneProduct_PurchaseInput\n  ): Product_Purchase\n  productPurchaseMany(\n    # Filter by fields\n    filter: FilterFindManyProduct_PurchaseInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProduct_PurchaseInput\n  ): [Product_Purchase!]!\n  productPurchaseCount(\n    # Filter by fields\n    filter: FilterCountProduct_PurchaseInput\n  ): Int\n  productPurchaseConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProduct_PurchaseInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProduct_PurchaseEnum = _ID_DESC\n  ): Product_PurchaseConnection\n  productPurchasePagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProduct_PurchaseInput\n    sort: SortFindManyProduct_PurchaseInput\n  ): Product_PurchasePagination\n  productPurchasePurchaseResolver: Product_Purchase\n  productPurchaseUnitResolver: Product_Purchase\n  productPurchaseVariantResolver: Product_Purchase\n  productQuotationById(_id: MongoID!): Product_Quotation\n  productQuotationByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_QuotationInput): [Product_Quotation!]!\n  productQuotationOne(\n    # Filter by fields\n    filter: FilterFindOneProduct_QuotationInput\n    skip: Int\n    sort: SortFindOneProduct_QuotationInput\n  ): Product_Quotation\n  productQuotationMany(\n    # Filter by fields\n    filter: FilterFindManyProduct_QuotationInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProduct_QuotationInput\n  ): [Product_Quotation!]!\n  productQuotationCount(\n    # Filter by fields\n    filter: FilterCountProduct_QuotationInput\n  ): Int\n  productQuotationConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProduct_QuotationInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProduct_QuotationEnum = _ID_DESC\n  ): Product_QuotationConnection\n  productQuotationPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProduct_QuotationInput\n    sort: SortFindManyProduct_QuotationInput\n  ): Product_QuotationPagination\n  productQuotationResolver: Product_Quotation\n  productQuotationUnitResolver: Product_Quotation\n  productQuotationVariantResolver: Product_Quotation\n  productReturnById(_id: MongoID!): Product_Return\n  productReturnByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_ReturnInput): [Product_Return!]!\n  productReturnOne(\n    # Filter by fields\n    filter: FilterFindOneProduct_ReturnInput\n    skip: Int\n    sort: SortFindOneProduct_ReturnInput\n  ): Product_Return\n  productReturnMany(\n    # Filter by fields\n    filter: FilterFindManyProduct_ReturnInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProduct_ReturnInput\n  ): [Product_Return!]!\n  productReturnCount(\n    # Filter by fields\n    filter: FilterCountProduct_ReturnInput\n  ): Int\n  productReturnConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProduct_ReturnInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProduct_ReturnEnum = _ID_DESC\n  ): Product_ReturnConnection\n  productReturnPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProduct_ReturnInput\n    sort: SortFindManyProduct_ReturnInput\n  ): Product_ReturnPagination\n  productReturnResolver: Product_Return\n  productReturnUnitResolver: Product_Return\n  productReturnVariantResolver: Product_Return\n  productSaleById(_id: MongoID!): Product_Sale\n  productSaleByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_SaleInput): [Product_Sale!]!\n  productSaleOne(\n    # Filter by fields\n    filter: FilterFindOneProduct_SaleInput\n    skip: Int\n    sort: SortFindOneProduct_SaleInput\n  ): Product_Sale\n  productSaleMany(\n    # Filter by fields\n    filter: FilterFindManyProduct_SaleInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProduct_SaleInput\n  ): [Product_Sale!]!\n  productSaleCount(\n    # Filter by fields\n    filter: FilterCountProduct_SaleInput\n  ): Int\n  productSaleConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProduct_SaleInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProduct_SaleEnum = _ID_DESC\n  ): Product_SaleConnection\n  productSalePagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProduct_SaleInput\n    sort: SortFindManyProduct_SaleInput\n  ): Product_SalePagination\n  productSaleResolver: Product_Sale\n  productSaleUnitResolver: Product_Sale\n  productSaleVariantResolver: Product_Sale\n  productSupplierById(_id: MongoID!): Product_Supplier\n  productSupplierByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_SupplierInput): [Product_Supplier!]!\n  productSupplierOne(\n    # Filter by fields\n    filter: FilterFindOneProduct_SupplierInput\n    skip: Int\n    sort: SortFindOneProduct_SupplierInput\n  ): Product_Supplier\n  productSupplierMany(\n    # Filter by fields\n    filter: FilterFindManyProduct_SupplierInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProduct_SupplierInput\n  ): [Product_Supplier!]!\n  productSupplierCount(\n    # Filter by fields\n    filter: FilterCountProduct_SupplierInput\n  ): Int\n  productSupplierConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProduct_SupplierInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProduct_SupplierEnum = _ID_DESC\n  ): Product_SupplierConnection\n  productSupplierPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProduct_SupplierInput\n    sort: SortFindManyProduct_SupplierInput\n  ): Product_SupplierPagination\n  productSupplierProductVariantResolver: Product_Supplier\n  productSupplierSupplierResolver: Product_Supplier\n  ProductTransferById(_id: MongoID!): Product_Transfer\n  ProductTransferByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_TransferInput): [Product_Transfer!]!\n  ProductTransferOne(\n    # Filter by fields\n    filter: FilterFindOneProduct_TransferInput\n    skip: Int\n    sort: SortFindOneProduct_TransferInput\n  ): Product_Transfer\n  ProductTransferMany(\n    # Filter by fields\n    filter: FilterFindManyProduct_TransferInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProduct_TransferInput\n  ): [Product_Transfer!]!\n  ProductTransferCount(\n    # Filter by fields\n    filter: FilterCountProduct_TransferInput\n  ): Int\n  ProductTransferConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProduct_TransferInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProduct_TransferEnum = _ID_DESC\n  ): Product_TransferConnection\n  ProductTransferPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProduct_TransferInput\n    sort: SortFindManyProduct_TransferInput\n  ): Product_TransferPagination\n  ProductTransferPurchaseResolver: Product_Transfer\n  ProductTransferUnitResolver: Product_Transfer\n  ProductTransferVariantResolver: Product_Transfer\n  productVariantById(_id: MongoID!): Product_Variant\n  productVariantByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_VariantInput): [Product_Variant!]!\n  productVariantOne(\n    # Filter by fields\n    filter: FilterFindOneProduct_VariantInput\n    skip: Int\n    sort: SortFindOneProduct_VariantInput\n  ): Product_Variant\n  productVariantMany(\n    # Filter by fields\n    filter: FilterFindManyProduct_VariantInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProduct_VariantInput\n  ): [Product_Variant!]!\n  productVariantCount(\n    # Filter by fields\n    filter: FilterCountProduct_VariantInput\n  ): Int\n  productVariantConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProduct_VariantInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProduct_VariantEnum = _ID_DESC\n  ): Product_VariantConnection\n  productVariantPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProduct_VariantInput\n    sort: SortFindManyProduct_VariantInput\n  ): Product_VariantPagination\n  ProductVariantProductResolver: Product_Variant\n  ProductVariantVariantIDResolver: Product_Variant\n  ProductVariantUnitResolver: Product_Variant\n  ProductVariantCategoryResolver: Product_Variant\n  ProductVariantSuppliersResolver: Product_Variant\n  ProductVariantPurchaseUnitResolver: Product_Variant\n  ProductVariantSaleUnitResolver: Product_Variant\n  productWarehouseById(_id: MongoID!): Product_Warehouse\n  productWarehouseByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_WarehouseInput): [Product_Warehouse!]!\n  productWarehouseOne(\n    # Filter by fields\n    filter: FilterFindOneProduct_WarehouseInput\n    skip: Int\n    sort: SortFindOneProduct_WarehouseInput\n  ): Product_Warehouse\n  productWarehouseMany(\n    # Filter by fields\n    filter: FilterFindManyProduct_WarehouseInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProduct_WarehouseInput\n  ): [Product_Warehouse!]!\n  productWarehouseCount(\n    # Filter by fields\n    filter: FilterCountProduct_WarehouseInput\n  ): Int\n  productWarehouseConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProduct_WarehouseInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProduct_WarehouseEnum = _ID_DESC\n  ): Product_WarehouseConnection\n  productWarehousePagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProduct_WarehouseInput\n    sort: SortFindManyProduct_WarehouseInput\n  ): Product_WarehousePagination\n  productWarehouseProductResolver: Product_Warehouse\n  productWarehouseVariantIDResolver: Product_Warehouse\n  productById(_id: MongoID!): Product\n  productByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProductInput): [Product!]!\n  productOne(\n    # Filter by fields\n    filter: FilterFindOneProductInput\n    skip: Int\n    sort: SortFindOneProductInput\n  ): Product\n  productMany(\n    # Filter by fields\n    filter: FilterFindManyProductInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyProductInput\n  ): [Product!]!\n  productCount(\n    # Filter by fields\n    filter: FilterCountProductInput\n  ): Int\n  productConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyProductInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionProductEnum = _ID_DESC\n  ): ProductConnection\n  productPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyProductInput\n    sort: SortFindManyProductInput\n  ): ProductPagination\n  purchaseById(_id: MongoID!): Purchase\n  purchaseByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsPurchaseInput): [Purchase!]!\n  purchaseOne(\n    # Filter by fields\n    filter: FilterFindOnePurchaseInput\n    skip: Int\n    sort: SortFindOnePurchaseInput\n  ): Purchase\n  purchaseMany(\n    # Filter by fields\n    filter: FilterFindManyPurchaseInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyPurchaseInput\n  ): [Purchase!]!\n  purchaseCount(\n    # Filter by fields\n    filter: FilterCountPurchaseInput\n  ): Int\n  purchaseConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyPurchaseInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionPurchaseEnum = _ID_DESC\n  ): PurchaseConnection\n  purchasePagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyPurchaseInput\n    sort: SortFindManyPurchaseInput\n  ): PurchasePagination\n  purchaseWarehouseResolver: Purchase\n  purchaseSupplierResolver: Purchase\n  purchaseUserResolver: Purchase\n  purchaseProductPurchasesResolver: Purchase\n  purchaseProductPurchaseReturnsResolver: Purchase\n  quotationById(_id: MongoID!): Quotation\n  quotationByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsQuotationInput): [Quotation!]!\n  quotationOne(\n    # Filter by fields\n    filter: FilterFindOneQuotationInput\n    skip: Int\n    sort: SortFindOneQuotationInput\n  ): Quotation\n  quotationMany(\n    # Filter by fields\n    filter: FilterFindManyQuotationInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyQuotationInput\n  ): [Quotation!]!\n  quotationCount(\n    # Filter by fields\n    filter: FilterCountQuotationInput\n  ): Int\n  quotationConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyQuotationInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionQuotationEnum = _ID_DESC\n  ): QuotationConnection\n  quotationPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyQuotationInput\n    sort: SortFindManyQuotationInput\n  ): QuotationPagination\n  quotationWarehouseResolver: Quotation\n  quotationSupplierResolver: Quotation\n  quotationUserResolver: Quotation\n  quotationCustomerResolver: Quotation\n  quotationBillerResolver: Quotation\n  quotationProductQuotationsResolver: Quotation\n  returnById(_id: MongoID!): Return\n  returnByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsReturnInput): [Return!]!\n  returnOne(\n    # Filter by fields\n    filter: FilterFindOneReturnInput\n    skip: Int\n    sort: SortFindOneReturnInput\n  ): Return\n  returnMany(\n    # Filter by fields\n    filter: FilterFindManyReturnInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyReturnInput\n  ): [Return!]!\n  returnCount(\n    # Filter by fields\n    filter: FilterCountReturnInput\n  ): Int\n  returnConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyReturnInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionReturnEnum = _ID_DESC\n  ): ReturnConnection\n  returnPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyReturnInput\n    sort: SortFindManyReturnInput\n  ): ReturnPagination\n  returnWarehouseResolver: Return\n  returnAccountResolver: Return\n  returnUserResolver: Return\n  returnCustomerResolver: Return\n  returnBillerResolver: Return\n  returnProductReturnsResolver: Return\n  roleById(_id: MongoID!): Role\n  roleByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsRoleInput): [Role!]!\n  roleOne(\n    # Filter by fields\n    filter: FilterFindOneRoleInput\n    skip: Int\n    sort: SortFindOneRoleInput\n  ): Role\n  roleMany(\n    # Filter by fields\n    filter: FilterFindManyRoleInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyRoleInput\n  ): [Role!]!\n  roleCount(\n    # Filter by fields\n    filter: FilterCountRoleInput\n  ): Int\n  roleConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyRoleInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionRoleEnum = _ID_DESC\n  ): RoleConnection\n  rolePagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyRoleInput\n    sort: SortFindManyRoleInput\n  ): RolePagination\n  supplierById(_id: MongoID!): Supplier\n  supplierByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsSupplierInput): [Supplier!]!\n  supplierOne(\n    # Filter by fields\n    filter: FilterFindOneSupplierInput\n    skip: Int\n    sort: SortFindOneSupplierInput\n  ): Supplier\n  supplierMany(\n    # Filter by fields\n    filter: FilterFindManySupplierInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManySupplierInput\n  ): [Supplier!]!\n  supplierCount(\n    # Filter by fields\n    filter: FilterCountSupplierInput\n  ): Int\n  supplierConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManySupplierInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionSupplierEnum = _ID_DESC\n  ): SupplierConnection\n  supplierPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManySupplierInput\n    sort: SortFindManySupplierInput\n  ): SupplierPagination\n  taxById(_id: MongoID!): Tax\n  taxByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsTaxInput): [Tax!]!\n  taxOne(\n    # Filter by fields\n    filter: FilterFindOneTaxInput\n    skip: Int\n    sort: SortFindOneTaxInput\n  ): Tax\n  taxMany(\n    # Filter by fields\n    filter: FilterFindManyTaxInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyTaxInput\n  ): [Tax!]!\n  taxCount(\n    # Filter by fields\n    filter: FilterCountTaxInput\n  ): Int\n  taxConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyTaxInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionTaxEnum = _ID_DESC\n  ): TaxConnection\n  taxPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyTaxInput\n    sort: SortFindManyTaxInput\n  ): TaxPagination\n  transferById(_id: MongoID!): Transfer\n  transferByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsTransferInput): [Transfer!]!\n  transferOne(\n    # Filter by fields\n    filter: FilterFindOneTransferInput\n    skip: Int\n    sort: SortFindOneTransferInput\n  ): Transfer\n  transferMany(\n    # Filter by fields\n    filter: FilterFindManyTransferInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyTransferInput\n  ): [Transfer!]!\n  transferCount(\n    # Filter by fields\n    filter: FilterCountTransferInput\n  ): Int\n  transferConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyTransferInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionTransferEnum = _ID_DESC\n  ): TransferConnection\n  transferPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyTransferInput\n    sort: SortFindManyTransferInput\n  ): TransferPagination\n  transferToWarehouseResolver: Transfer\n  transferFromWarehouseResolver: Transfer\n  transferUserResolver: Transfer\n  transferProductTransfersResolver: Transfer\n  unitById(_id: MongoID!): Unit\n  unitByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsUnitInput): [Unit!]!\n  unitOne(\n    # Filter by fields\n    filter: FilterFindOneUnitInput\n    skip: Int\n    sort: SortFindOneUnitInput\n  ): Unit\n  unitMany(\n    # Filter by fields\n    filter: FilterFindManyUnitInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyUnitInput\n  ): [Unit!]!\n  unitCount(\n    # Filter by fields\n    filter: FilterCountUnitInput\n  ): Int\n  unitConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyUnitInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionUnitEnum = _ID_DESC\n  ): UnitConnection\n  unitPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyUnitInput\n    sort: SortFindManyUnitInput\n  ): UnitPagination\n  userById(_id: MongoID!): User\n  userByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsUserInput): [User!]!\n  userOne(\n    # Filter by fields\n    filter: FilterFindOneUserInput\n    skip: Int\n    sort: SortFindOneUserInput\n  ): User\n  userMany(\n    # Filter by fields\n    filter: FilterFindManyUserInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyUserInput\n  ): [User!]!\n  userCount(\n    # Filter by fields\n    filter: FilterCountUserInput\n  ): Int\n  userConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyUserInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionUserEnum = _ID_DESC\n  ): UserConnection\n  userPagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyUserInput\n    sort: SortFindManyUserInput\n  ): UserPagination\n  userRoleResolver: User\n  userWarehousesResolver: User\n  userPersonnelResolver: User\n  valueById(_id: MongoID!): Value\n  valueByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsValueInput): [Value!]!\n  valueOne(\n    # Filter by fields\n    filter: FilterFindOneValueInput\n    skip: Int\n    sort: SortFindOneValueInput\n  ): Value\n  valueMany(\n    # Filter by fields\n    filter: FilterFindManyValueInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyValueInput\n  ): [Value!]!\n  valueCount(\n    # Filter by fields\n    filter: FilterCountValueInput\n  ): Int\n  valueConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyValueInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionValueEnum = _ID_DESC\n  ): ValueConnection\n  valuePagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyValueInput\n    sort: SortFindManyValueInput\n  ): ValuePagination\n  valueAttributeResolver: Value\n  warehouseById(_id: MongoID!): Warehouse\n  warehouseByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsWarehouseInput): [Warehouse!]!\n  warehouseOne(\n    # Filter by fields\n    filter: FilterFindOneWarehouseInput\n    skip: Int\n    sort: SortFindOneWarehouseInput\n  ): Warehouse\n  warehouseMany(\n    # Filter by fields\n    filter: FilterFindManyWarehouseInput\n    skip: Int\n    limit: Int = 100\n    sort: SortFindManyWarehouseInput\n  ): [Warehouse!]!\n  warehouseCount(\n    # Filter by fields\n    filter: FilterCountWarehouseInput\n  ): Int\n  warehouseConnection(\n    # Forward pagination argument for returning at most first edges\n    first: Int\n\n    # Forward pagination argument for returning at most first edges\n    after: String\n\n    # Backward pagination argument for returning at most last edges\n    last: Int\n\n    # Backward pagination argument for returning at most last edges\n    before: String\n\n    # Filter by fields\n    filter: FilterFindManyWarehouseInput\n\n    # Sort argument for data ordering\n    sort: SortConnectionWarehouseEnum = _ID_DESC\n  ): WarehouseConnection\n  warehousePagination(\n    # Page number for displaying\n    page: Int\n\n    #\n    perPage: Int = 20\n\n    # Filter by fields\n    filter: FilterFindManyWarehouseInput\n    sort: SortFindManyWarehouseInput\n  ): WarehousePagination\n}\n\ntype Account {\n  account_no: String!\n  name: String!\n  initial_balance: Float!\n  total_Balance: Float!\n  note: String\n  is_default: Boolean!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\n# The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.\nscalar MongoID\n\nscalar Date\n\nenum SortFindByIdsAccountInput {\n  _ID_ASC\n  _ID_DESC\n  ACCOUNT_NO_ASC\n  ACCOUNT_NO_DESC\n  NAME_ASC\n  NAME_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneAccountOperatorsInput\n  OR: [FilterFindOneAccountInput!]\n  AND: [FilterFindOneAccountInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneAccountOperatorsInput {\n  account_no: FilterFindOneAccountAccount_noOperatorsInput\n  name: FilterFindOneAccountNameOperatorsInput\n  note: FilterFindOneAccountNoteOperatorsInput\n  _id: FilterFindOneAccount_idOperatorsInput\n  createdAt: FilterFindOneAccountCreatedAtOperatorsInput\n}\n\ninput FilterFindOneAccountAccount_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\n# The string representation of JavaScript regexp. You may provide it with flags "/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\nscalar RegExpAsString @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf")\n\ninput FilterFindOneAccountNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneAccountNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneAccount_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneAccountCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneAccountInput {\n  _ID_ASC\n  _ID_DESC\n  ACCOUNT_NO_ASC\n  ACCOUNT_NO_DESC\n  NAME_ASC\n  NAME_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyAccountOperatorsInput\n  OR: [FilterFindManyAccountInput!]\n  AND: [FilterFindManyAccountInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyAccountOperatorsInput {\n  account_no: FilterFindManyAccountAccount_noOperatorsInput\n  name: FilterFindManyAccountNameOperatorsInput\n  note: FilterFindManyAccountNoteOperatorsInput\n  _id: FilterFindManyAccount_idOperatorsInput\n  createdAt: FilterFindManyAccountCreatedAtOperatorsInput\n}\n\ninput FilterFindManyAccountAccount_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyAccountNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyAccountNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyAccount_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyAccountCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyAccountInput {\n  _ID_ASC\n  _ID_DESC\n  ACCOUNT_NO_ASC\n  ACCOUNT_NO_DESC\n  NAME_ASC\n  NAME_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountAccountOperatorsInput\n  OR: [FilterCountAccountInput!]\n  AND: [FilterCountAccountInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountAccountOperatorsInput {\n  account_no: FilterCountAccountAccount_noOperatorsInput\n  name: FilterCountAccountNameOperatorsInput\n  note: FilterCountAccountNoteOperatorsInput\n  _id: FilterCountAccount_idOperatorsInput\n  createdAt: FilterCountAccountCreatedAtOperatorsInput\n}\n\ninput FilterCountAccountAccount_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountAccountNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountAccountNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountAccount_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountAccountCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype AccountConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [AccountEdge!]!\n}\n\n# Information about pagination in a connection.\ntype PageInfo {\n  # When paginating forwards, are there more items?\n  hasNextPage: Boolean!\n\n  # When paginating backwards, are there more items?\n  hasPreviousPage: Boolean!\n\n  # When paginating backwards, the cursor to continue.\n  startCursor: String\n\n  # When paginating forwards, the cursor to continue.\n  endCursor: String\n}\n\n# An edge in a connection.\ntype AccountEdge {\n  # The item at the end of the edge\n  node: Account!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionAccountEnum {\n  _ID_DESC\n  _ID_ASC\n  ACCOUNT_NO_DESC\n  ACCOUNT_NO_ASC\n  NAME_DESC\n  NAME_ASC\n  NOTE_DESC\n  NOTE_ASC\n}\n\n# List of items with pagination.\ntype AccountPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Account!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype PaginationInfo {\n  currentPage: Int!\n  perPage: Int!\n  pageCount: Int\n  itemCount: Int\n  hasNextPage: Boolean\n  hasPreviousPage: Boolean\n}\n\ntype Adjustment {\n  reference_no: String!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  warehouse: Warehouse\n  product_adjustments(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_AdjustmentInput): [Product_Adjustment!]!\n  document: String\n  note: String\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Warehouse {\n  name: String!\n  email: String!\n  address: String!\n  phone: Float!\n  product_variants: [MongoID]\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n  product_variantss(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_VariantInput): [Product_Variant!]!\n}\n\ntype Product_Variant {\n  variant: Variant\n  product: Product\n  unit: Unit\n  category: Category\n  tax: Tax\n  purchase_unit: MongoID!\n  sale_unit: Unit\n  productSuppliers(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_SupplierInput): [Product_Supplier!]!\n  product_type: EnumProduct_VariantProduct_type!\n  barcode_symbology: String!\n  item_code: String!\n  qty: Float!\n  position: Float!\n  additional_price: Float!\n  alert_qty: Float\n  promotion: Boolean!\n  promotion_price: Float!\n  price: Float!\n  cost: Float!\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean!\n  product_list: String\n  qty_list: String\n  price_list: String\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n  pruchase_unit: Unit\n}\n\ntype Variant {\n  name: String!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Product {\n  name: String!\n  code: String!\n  brand: Brand\n  product_variants(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_VariantInput): [Product_Variant!]!\n  file: String\n  product_details: String\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Brand {\n  name: String!\n  image: String\n  products(limit: Int = 100, sort: SortFindByIdsProductInput): [Product!]!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsProductInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\nenum SortFindByIdsProduct_VariantInput {\n  _ID_ASC\n  _ID_DESC\n  VARIANT_ASC\n  VARIANT_DESC\n  ITEM_CODE_ASC\n  ITEM_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype Unit {\n  unit_name: String!\n  unit_code: String!\n  base_unit: String!\n  operator: String!\n  operation_value: Float!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Category {\n  name: String!\n  image: String\n  variants(limit: Int = 100, sort: SortFindByIdsVariantInput): [Variant!]!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsVariantInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype Tax {\n  name: String!\n  rate: Float!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Product_Supplier {\n  productVariant: Product_Variant\n  supplier: Supplier\n  qty: Float!\n  price: Float!\n  itemCode: String!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Supplier {\n  name: String!\n  image: String\n  company_name: String!\n  vat_number: Float\n  email: String!\n  phone_number: Float!\n  address: String!\n  city: String!\n  state: String!\n  postal_code: String!\n  country: String!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsProduct_SupplierInput {\n  _ID_ASC\n  _ID_DESC\n  ITEMCODE_ASC\n  ITEMCODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\nenum EnumProduct_VariantProduct_type {\n  Standard\n  Combo\n  Digital\n}\n\nenum EnumProduct_VariantTax_method {\n  Exclusive\n  Inclusive\n}\n\ntype Product_Adjustment {\n  adjustment: Adjustment\n  product_variant: Product_Variant\n  qty: Float!\n  action: String!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsProduct_AdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  ADJUSTMENT_ASC\n  ADJUSTMENT_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\nenum SortFindByIdsAdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneAdjustmentOperatorsInput\n  OR: [FilterFindOneAdjustmentInput!]\n  AND: [FilterFindOneAdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneAdjustmentOperatorsInput {\n  reference_no: FilterFindOneAdjustmentReference_noOperatorsInput\n  document: FilterFindOneAdjustmentDocumentOperatorsInput\n  note: FilterFindOneAdjustmentNoteOperatorsInput\n  _id: FilterFindOneAdjustment_idOperatorsInput\n  createdAt: FilterFindOneAdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterFindOneAdjustmentReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneAdjustmentDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneAdjustmentNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneAdjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneAdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneAdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyAdjustmentOperatorsInput\n  OR: [FilterFindManyAdjustmentInput!]\n  AND: [FilterFindManyAdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyAdjustmentOperatorsInput {\n  reference_no: FilterFindManyAdjustmentReference_noOperatorsInput\n  document: FilterFindManyAdjustmentDocumentOperatorsInput\n  note: FilterFindManyAdjustmentNoteOperatorsInput\n  _id: FilterFindManyAdjustment_idOperatorsInput\n  createdAt: FilterFindManyAdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterFindManyAdjustmentReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyAdjustmentDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyAdjustmentNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyAdjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyAdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyAdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountAdjustmentOperatorsInput\n  OR: [FilterCountAdjustmentInput!]\n  AND: [FilterCountAdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountAdjustmentOperatorsInput {\n  reference_no: FilterCountAdjustmentReference_noOperatorsInput\n  document: FilterCountAdjustmentDocumentOperatorsInput\n  note: FilterCountAdjustmentNoteOperatorsInput\n  _id: FilterCountAdjustment_idOperatorsInput\n  createdAt: FilterCountAdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterCountAdjustmentReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountAdjustmentDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountAdjustmentNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountAdjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountAdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype AdjustmentConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [AdjustmentEdge!]!\n}\n\n# An edge in a connection.\ntype AdjustmentEdge {\n  # The item at the end of the edge\n  node: Adjustment!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionAdjustmentEnum {\n  _ID_DESC\n  _ID_ASC\n  REFERENCE_NO_DESC\n  REFERENCE_NO_ASC\n  DOCUMENT_DESC\n  DOCUMENT_ASC\n  NOTE_DESC\n  NOTE_ASC\n}\n\n# List of items with pagination.\ntype AdjustmentPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Adjustment!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Attribute {\n  name: String!\n  values(limit: Int = 100, sort: SortFindByIdsValueInput): [Value!]!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Value {\n  name: String!\n  attribute: Attribute\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsValueInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\nenum SortFindByIdsAttributeInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneAttributeOperatorsInput\n  OR: [FilterFindOneAttributeInput!]\n  AND: [FilterFindOneAttributeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneAttributeOperatorsInput {\n  name: FilterFindOneAttributeNameOperatorsInput\n  _id: FilterFindOneAttribute_idOperatorsInput\n  createdAt: FilterFindOneAttributeCreatedAtOperatorsInput\n}\n\ninput FilterFindOneAttributeNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneAttribute_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneAttributeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneAttributeInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyAttributeOperatorsInput\n  OR: [FilterFindManyAttributeInput!]\n  AND: [FilterFindManyAttributeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyAttributeOperatorsInput {\n  name: FilterFindManyAttributeNameOperatorsInput\n  _id: FilterFindManyAttribute_idOperatorsInput\n  createdAt: FilterFindManyAttributeCreatedAtOperatorsInput\n}\n\ninput FilterFindManyAttributeNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyAttribute_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyAttributeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyAttributeInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountAttributeOperatorsInput\n  OR: [FilterCountAttributeInput!]\n  AND: [FilterCountAttributeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountAttributeOperatorsInput {\n  name: FilterCountAttributeNameOperatorsInput\n  _id: FilterCountAttribute_idOperatorsInput\n  createdAt: FilterCountAttributeCreatedAtOperatorsInput\n}\n\ninput FilterCountAttributeNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountAttribute_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountAttributeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype AttributeConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [AttributeEdge!]!\n}\n\n# An edge in a connection.\ntype AttributeEdge {\n  # The item at the end of the edge\n  node: Attribute!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionAttributeEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n}\n\n# List of items with pagination.\ntype AttributePagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Attribute!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsBrandInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneBrandOperatorsInput\n  OR: [FilterFindOneBrandInput!]\n  AND: [FilterFindOneBrandInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneBrandOperatorsInput {\n  name: FilterFindOneBrandNameOperatorsInput\n  image: FilterFindOneBrandImageOperatorsInput\n  _id: FilterFindOneBrand_idOperatorsInput\n  createdAt: FilterFindOneBrandCreatedAtOperatorsInput\n}\n\ninput FilterFindOneBrandNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneBrandImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneBrand_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneBrandCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneBrandInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyBrandOperatorsInput\n  OR: [FilterFindManyBrandInput!]\n  AND: [FilterFindManyBrandInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyBrandOperatorsInput {\n  name: FilterFindManyBrandNameOperatorsInput\n  image: FilterFindManyBrandImageOperatorsInput\n  _id: FilterFindManyBrand_idOperatorsInput\n  createdAt: FilterFindManyBrandCreatedAtOperatorsInput\n}\n\ninput FilterFindManyBrandNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyBrandImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyBrand_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyBrandCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyBrandInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountBrandOperatorsInput\n  OR: [FilterCountBrandInput!]\n  AND: [FilterCountBrandInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountBrandOperatorsInput {\n  name: FilterCountBrandNameOperatorsInput\n  image: FilterCountBrandImageOperatorsInput\n  _id: FilterCountBrand_idOperatorsInput\n  createdAt: FilterCountBrandCreatedAtOperatorsInput\n}\n\ninput FilterCountBrandNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountBrandImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountBrand_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountBrandCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype BrandConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [BrandEdge!]!\n}\n\n# An edge in a connection.\ntype BrandEdge {\n  # The item at the end of the edge\n  node: Brand!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionBrandEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n  IMAGE_DESC\n  IMAGE_ASC\n}\n\n# List of items with pagination.\ntype BrandPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Brand!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsCategoryInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneCategoryOperatorsInput\n  OR: [FilterFindOneCategoryInput!]\n  AND: [FilterFindOneCategoryInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneCategoryOperatorsInput {\n  name: FilterFindOneCategoryNameOperatorsInput\n  image: FilterFindOneCategoryImageOperatorsInput\n  _id: FilterFindOneCategory_idOperatorsInput\n  createdAt: FilterFindOneCategoryCreatedAtOperatorsInput\n}\n\ninput FilterFindOneCategoryNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneCategoryImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneCategory_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneCategoryCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneCategoryInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyCategoryOperatorsInput\n  OR: [FilterFindManyCategoryInput!]\n  AND: [FilterFindManyCategoryInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyCategoryOperatorsInput {\n  name: FilterFindManyCategoryNameOperatorsInput\n  image: FilterFindManyCategoryImageOperatorsInput\n  _id: FilterFindManyCategory_idOperatorsInput\n  createdAt: FilterFindManyCategoryCreatedAtOperatorsInput\n}\n\ninput FilterFindManyCategoryNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyCategoryImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyCategory_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyCategoryCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyCategoryInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountCategoryOperatorsInput\n  OR: [FilterCountCategoryInput!]\n  AND: [FilterCountCategoryInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountCategoryOperatorsInput {\n  name: FilterCountCategoryNameOperatorsInput\n  image: FilterCountCategoryImageOperatorsInput\n  _id: FilterCountCategory_idOperatorsInput\n  createdAt: FilterCountCategoryCreatedAtOperatorsInput\n}\n\ninput FilterCountCategoryNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountCategoryImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountCategory_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountCategoryCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype CategoryConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [CategoryEdge!]!\n}\n\n# An edge in a connection.\ntype CategoryEdge {\n  # The item at the end of the edge\n  node: Category!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionCategoryEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n  IMAGE_DESC\n  IMAGE_ASC\n}\n\n# List of items with pagination.\ntype CategoryPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Category!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Coupon {\n  code: String!\n  coupon_type: String!\n  amount: Float!\n  min_amount: Float!\n  user: User\n  qty: Float!\n  used: Boolean!\n  expired_date: Date!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype User {\n  name: String!\n  password: String!\n  role: Role\n  personnel: MongoID!\n  personnelModel: EnumUserPersonnelModel!\n  warehouses(limit: Int = 100, sort: SortFindByIdsWarehouseInput): [Warehouse!]!\n  is_active: Boolean!\n  is_deleted: Boolean\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n  Personnel: User\n}\n\ntype Role {\n  name: String!\n  description: String!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum EnumUserPersonnelModel {\n  Employee\n  Customer\n  Supplier\n}\n\nenum SortFindByIdsWarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  PHONE_ASC\n  PHONE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\nenum SortFindByIdsCouponInput {\n  _ID_ASC\n  _ID_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneCouponOperatorsInput\n  OR: [FilterFindOneCouponInput!]\n  AND: [FilterFindOneCouponInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneCouponOperatorsInput {\n  code: FilterFindOneCouponCodeOperatorsInput\n  _id: FilterFindOneCoupon_idOperatorsInput\n  createdAt: FilterFindOneCouponCreatedAtOperatorsInput\n}\n\ninput FilterFindOneCouponCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneCoupon_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneCouponCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneCouponInput {\n  _ID_ASC\n  _ID_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyCouponOperatorsInput\n  OR: [FilterFindManyCouponInput!]\n  AND: [FilterFindManyCouponInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyCouponOperatorsInput {\n  code: FilterFindManyCouponCodeOperatorsInput\n  _id: FilterFindManyCoupon_idOperatorsInput\n  createdAt: FilterFindManyCouponCreatedAtOperatorsInput\n}\n\ninput FilterFindManyCouponCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyCoupon_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyCouponCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyCouponInput {\n  _ID_ASC\n  _ID_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountCouponOperatorsInput\n  OR: [FilterCountCouponInput!]\n  AND: [FilterCountCouponInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountCouponOperatorsInput {\n  code: FilterCountCouponCodeOperatorsInput\n  _id: FilterCountCoupon_idOperatorsInput\n  createdAt: FilterCountCouponCreatedAtOperatorsInput\n}\n\ninput FilterCountCouponCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountCoupon_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountCouponCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype CouponConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [CouponEdge!]!\n}\n\n# An edge in a connection.\ntype CouponEdge {\n  # The item at the end of the edge\n  node: Coupon!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionCouponEnum {\n  _ID_DESC\n  _ID_ASC\n  CODE_DESC\n  CODE_ASC\n}\n\n# List of items with pagination.\ntype CouponPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Coupon!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Customer {\n  customer_group: Customer_Group\n  company_name: String!\n  name: String!\n  image: String!\n  email: String!\n  phone_number: Float!\n  gender: String!\n  user: User\n  address: String!\n  city: String!\n  country: String!\n  tax_no: String\n  deposit: Float!\n  expense: Float!\n  is_active: Boolean!\n  is_deleted: Boolean\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Customer_Group {\n  name: String!\n  percentage: Float!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsCustomerInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  TAX_NO_ASC\n  TAX_NO_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneCustomerOperatorsInput\n  OR: [FilterFindOneCustomerInput!]\n  AND: [FilterFindOneCustomerInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneCustomerOperatorsInput {\n  email: FilterFindOneCustomerEmailOperatorsInput\n  phone_number: FilterFindOneCustomerPhone_numberOperatorsInput\n  tax_no: FilterFindOneCustomerTax_noOperatorsInput\n  _id: FilterFindOneCustomer_idOperatorsInput\n  createdAt: FilterFindOneCustomerCreatedAtOperatorsInput\n}\n\ninput FilterFindOneCustomerEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneCustomerPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindOneCustomerTax_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneCustomer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneCustomerCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneCustomerInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  TAX_NO_ASC\n  TAX_NO_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyCustomerOperatorsInput\n  OR: [FilterFindManyCustomerInput!]\n  AND: [FilterFindManyCustomerInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyCustomerOperatorsInput {\n  email: FilterFindManyCustomerEmailOperatorsInput\n  phone_number: FilterFindManyCustomerPhone_numberOperatorsInput\n  tax_no: FilterFindManyCustomerTax_noOperatorsInput\n  _id: FilterFindManyCustomer_idOperatorsInput\n  createdAt: FilterFindManyCustomerCreatedAtOperatorsInput\n}\n\ninput FilterFindManyCustomerEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyCustomerPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindManyCustomerTax_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyCustomer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyCustomerCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyCustomerInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  TAX_NO_ASC\n  TAX_NO_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountCustomerOperatorsInput\n  OR: [FilterCountCustomerInput!]\n  AND: [FilterCountCustomerInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountCustomerOperatorsInput {\n  email: FilterCountCustomerEmailOperatorsInput\n  phone_number: FilterCountCustomerPhone_numberOperatorsInput\n  tax_no: FilterCountCustomerTax_noOperatorsInput\n  _id: FilterCountCustomer_idOperatorsInput\n  createdAt: FilterCountCustomerCreatedAtOperatorsInput\n}\n\ninput FilterCountCustomerEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountCustomerPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterCountCustomerTax_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountCustomer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountCustomerCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype CustomerConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [CustomerEdge!]!\n}\n\n# An edge in a connection.\ntype CustomerEdge {\n  # The item at the end of the edge\n  node: Customer!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionCustomerEnum {\n  _ID_DESC\n  _ID_ASC\n  EMAIL_DESC\n  EMAIL_ASC\n  PHONE_NUMBER_DESC\n  PHONE_NUMBER_ASC\n  TAX_NO_DESC\n  TAX_NO_ASC\n}\n\n# List of items with pagination.\ntype CustomerPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Customer!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsCustomer_GroupInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneCustomer_GroupOperatorsInput\n  OR: [FilterFindOneCustomer_GroupInput!]\n  AND: [FilterFindOneCustomer_GroupInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneCustomer_GroupOperatorsInput {\n  name: FilterFindOneCustomer_GroupNameOperatorsInput\n  _id: FilterFindOneCustomer_Group_idOperatorsInput\n  createdAt: FilterFindOneCustomer_GroupCreatedAtOperatorsInput\n}\n\ninput FilterFindOneCustomer_GroupNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneCustomer_Group_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneCustomer_GroupCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneCustomer_GroupInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyCustomer_GroupOperatorsInput\n  OR: [FilterFindManyCustomer_GroupInput!]\n  AND: [FilterFindManyCustomer_GroupInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyCustomer_GroupOperatorsInput {\n  name: FilterFindManyCustomer_GroupNameOperatorsInput\n  _id: FilterFindManyCustomer_Group_idOperatorsInput\n  createdAt: FilterFindManyCustomer_GroupCreatedAtOperatorsInput\n}\n\ninput FilterFindManyCustomer_GroupNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyCustomer_Group_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyCustomer_GroupCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyCustomer_GroupInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountCustomer_GroupOperatorsInput\n  OR: [FilterCountCustomer_GroupInput!]\n  AND: [FilterCountCustomer_GroupInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountCustomer_GroupOperatorsInput {\n  name: FilterCountCustomer_GroupNameOperatorsInput\n  _id: FilterCountCustomer_Group_idOperatorsInput\n  createdAt: FilterCountCustomer_GroupCreatedAtOperatorsInput\n}\n\ninput FilterCountCustomer_GroupNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountCustomer_Group_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountCustomer_GroupCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Customer_GroupConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Customer_GroupEdge!]!\n}\n\n# An edge in a connection.\ntype Customer_GroupEdge {\n  # The item at the end of the edge\n  node: Customer_Group!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionCustomer_GroupEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n}\n\n# List of items with pagination.\ntype Customer_GroupPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Customer_Group!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Department {\n  name: String!\n  is_active: Boolean!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsDepartmentInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneDepartmentInput {\n  name: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneDepartmentOperatorsInput\n  OR: [FilterFindOneDepartmentInput!]\n  AND: [FilterFindOneDepartmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneDepartmentOperatorsInput {\n  name: FilterFindOneDepartmentNameOperatorsInput\n  _id: FilterFindOneDepartment_idOperatorsInput\n  createdAt: FilterFindOneDepartmentCreatedAtOperatorsInput\n}\n\ninput FilterFindOneDepartmentNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneDepartment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneDepartmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneDepartmentInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyDepartmentInput {\n  name: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyDepartmentOperatorsInput\n  OR: [FilterFindManyDepartmentInput!]\n  AND: [FilterFindManyDepartmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyDepartmentOperatorsInput {\n  name: FilterFindManyDepartmentNameOperatorsInput\n  _id: FilterFindManyDepartment_idOperatorsInput\n  createdAt: FilterFindManyDepartmentCreatedAtOperatorsInput\n}\n\ninput FilterFindManyDepartmentNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyDepartment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyDepartmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyDepartmentInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountDepartmentInput {\n  name: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountDepartmentOperatorsInput\n  OR: [FilterCountDepartmentInput!]\n  AND: [FilterCountDepartmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountDepartmentOperatorsInput {\n  name: FilterCountDepartmentNameOperatorsInput\n  _id: FilterCountDepartment_idOperatorsInput\n  createdAt: FilterCountDepartmentCreatedAtOperatorsInput\n}\n\ninput FilterCountDepartmentNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountDepartment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountDepartmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype DepartmentConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [DepartmentEdge!]!\n}\n\n# An edge in a connection.\ntype DepartmentEdge {\n  # The item at the end of the edge\n  node: Department!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionDepartmentEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n}\n\n# List of items with pagination.\ntype DepartmentPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Department!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Employee {\n  name: String!\n  image: String!\n  email: String!\n  phone_number: Float!\n  gender: String!\n  user: User\n  department: Department\n  payrolls(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsPayrollInput): [Payroll!]!\n  address: String!\n  city: String!\n  country: String!\n  is_active: Boolean!\n  is_deleted: Boolean\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Payroll {\n  reference_no: String!\n  amount: Float!\n  user: MongoID!\n  employee: MongoID!\n  account: MongoID!\n  paying_method: String!\n  note: String\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsPayrollInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\nenum SortFindByIdsEmployeeInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneEmployeeOperatorsInput\n  OR: [FilterFindOneEmployeeInput!]\n  AND: [FilterFindOneEmployeeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneEmployeeOperatorsInput {\n  email: FilterFindOneEmployeeEmailOperatorsInput\n  phone_number: FilterFindOneEmployeePhone_numberOperatorsInput\n  _id: FilterFindOneEmployee_idOperatorsInput\n  createdAt: FilterFindOneEmployeeCreatedAtOperatorsInput\n}\n\ninput FilterFindOneEmployeeEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneEmployeePhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindOneEmployee_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneEmployeeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneEmployeeInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyEmployeeOperatorsInput\n  OR: [FilterFindManyEmployeeInput!]\n  AND: [FilterFindManyEmployeeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyEmployeeOperatorsInput {\n  email: FilterFindManyEmployeeEmailOperatorsInput\n  phone_number: FilterFindManyEmployeePhone_numberOperatorsInput\n  _id: FilterFindManyEmployee_idOperatorsInput\n  createdAt: FilterFindManyEmployeeCreatedAtOperatorsInput\n}\n\ninput FilterFindManyEmployeeEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyEmployeePhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindManyEmployee_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyEmployeeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyEmployeeInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountEmployeeOperatorsInput\n  OR: [FilterCountEmployeeInput!]\n  AND: [FilterCountEmployeeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountEmployeeOperatorsInput {\n  email: FilterCountEmployeeEmailOperatorsInput\n  phone_number: FilterCountEmployeePhone_numberOperatorsInput\n  _id: FilterCountEmployee_idOperatorsInput\n  createdAt: FilterCountEmployeeCreatedAtOperatorsInput\n}\n\ninput FilterCountEmployeeEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountEmployeePhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterCountEmployee_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountEmployeeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype EmployeeConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [EmployeeEdge!]!\n}\n\n# An edge in a connection.\ntype EmployeeEdge {\n  # The item at the end of the edge\n  node: Employee!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionEmployeeEnum {\n  _ID_DESC\n  _ID_ASC\n  EMAIL_DESC\n  EMAIL_ASC\n  PHONE_NUMBER_DESC\n  PHONE_NUMBER_ASC\n}\n\n# List of items with pagination.\ntype EmployeePagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Employee!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\n#\ninput FilterFindOneProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProduct_AdjustmentOperatorsInput\n  OR: [FilterFindOneProduct_AdjustmentInput!]\n  AND: [FilterFindOneProduct_AdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProduct_AdjustmentOperatorsInput {\n  adjustment: FilterFindOneProduct_AdjustmentAdjustmentOperatorsInput\n  _id: FilterFindOneProduct_Adjustment_idOperatorsInput\n  createdAt: FilterFindOneProduct_AdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProduct_AdjustmentAdjustmentOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_Adjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_AdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProduct_AdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  ADJUSTMENT_ASC\n  ADJUSTMENT_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProduct_AdjustmentOperatorsInput\n  OR: [FilterFindManyProduct_AdjustmentInput!]\n  AND: [FilterFindManyProduct_AdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProduct_AdjustmentOperatorsInput {\n  adjustment: FilterFindManyProduct_AdjustmentAdjustmentOperatorsInput\n  _id: FilterFindManyProduct_Adjustment_idOperatorsInput\n  createdAt: FilterFindManyProduct_AdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProduct_AdjustmentAdjustmentOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_Adjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_AdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProduct_AdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  ADJUSTMENT_ASC\n  ADJUSTMENT_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProduct_AdjustmentOperatorsInput\n  OR: [FilterCountProduct_AdjustmentInput!]\n  AND: [FilterCountProduct_AdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProduct_AdjustmentOperatorsInput {\n  adjustment: FilterCountProduct_AdjustmentAdjustmentOperatorsInput\n  _id: FilterCountProduct_Adjustment_idOperatorsInput\n  createdAt: FilterCountProduct_AdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterCountProduct_AdjustmentAdjustmentOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_Adjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_AdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Product_AdjustmentConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Product_AdjustmentEdge!]!\n}\n\n# An edge in a connection.\ntype Product_AdjustmentEdge {\n  # The item at the end of the edge\n  node: Product_Adjustment!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProduct_AdjustmentEnum {\n  _ID_DESC\n  _ID_ASC\n  ADJUSTMENT_DESC\n  ADJUSTMENT_ASC\n}\n\n# List of items with pagination.\ntype Product_AdjustmentPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product_Adjustment!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Product_Purchase {\n  purchase: Purchase\n  product_variant: Product_Variant\n  unit: Unit\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_cost: Float!\n  total: Float!\n  status: EnumProduct_PurchaseStatus!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Purchase {\n  reference_no: String!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_cost: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  order_discount: Float!\n  shipping_cost: Float!\n  grandtotal: Float!\n  paid_amount: Float!\n  user: User\n  warehouse: Warehouse\n  supplier: Supplier\n  product_purchases(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_PurchaseInput): [Product_Purchase!]!\n  product_purchase_returns(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_Purchase_ReturnInput): [Product_Purchase_Return!]!\n  status: EnumPurchaseStatus!\n  payment_status: EnumPurchasePayment_status!\n  document: String\n  note: String\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsProduct_PurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype Product_Purchase_Return {\n  return: MongoID!\n  product_variant: MongoID!\n  unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_cost: Float!\n  total: Float!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsProduct_Purchase_ReturnInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\nenum EnumPurchaseStatus {\n  Recieved\n  Partial\n  Pending\n  Ordered\n}\n\nenum EnumPurchasePayment_status {\n  Pending\n  Due\n  Partial\n  Paid\n}\n\nenum EnumProduct_PurchaseStatus {\n  Recieved\n  Partial\n  Pending\n  Ordered\n}\n\n#\ninput FilterFindOneProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProduct_PurchaseOperatorsInput\n  OR: [FilterFindOneProduct_PurchaseInput!]\n  AND: [FilterFindOneProduct_PurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProduct_PurchaseOperatorsInput {\n  _id: FilterFindOneProduct_Purchase_idOperatorsInput\n  createdAt: FilterFindOneProduct_PurchaseCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProduct_Purchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_PurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProduct_PurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProduct_PurchaseOperatorsInput\n  OR: [FilterFindManyProduct_PurchaseInput!]\n  AND: [FilterFindManyProduct_PurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProduct_PurchaseOperatorsInput {\n  _id: FilterFindManyProduct_Purchase_idOperatorsInput\n  createdAt: FilterFindManyProduct_PurchaseCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProduct_Purchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_PurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProduct_PurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProduct_PurchaseOperatorsInput\n  OR: [FilterCountProduct_PurchaseInput!]\n  AND: [FilterCountProduct_PurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProduct_PurchaseOperatorsInput {\n  _id: FilterCountProduct_Purchase_idOperatorsInput\n  createdAt: FilterCountProduct_PurchaseCreatedAtOperatorsInput\n}\n\ninput FilterCountProduct_Purchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_PurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Product_PurchaseConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Product_PurchaseEdge!]!\n}\n\n# An edge in a connection.\ntype Product_PurchaseEdge {\n  # The item at the end of the edge\n  node: Product_Purchase!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProduct_PurchaseEnum {\n  _ID_DESC\n  _ID_ASC\n}\n\n# List of items with pagination.\ntype Product_PurchasePagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product_Purchase!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Product_Quotation {\n  quotation: Quotation\n  product_variant: Product_Variant\n  unit: Unit\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_price: Float!\n  total: Float!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Quotation {\n  reference_no: String!\n  user: User\n  biller: Employee\n  warehouse: Warehouse\n  supplier: Supplier\n  customer: Customer\n  product_quotations: [MongoID]!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_price: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  order_discount: Float!\n  shipping_cost: Float!\n  grandtotal: Float!\n  paid_amount: Float!\n  status: EnumQuotationStatus!\n  document: String\n  note: String\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n  product_qoutations(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_QuotationInput): [Product_Quotation!]!\n}\n\nenum EnumQuotationStatus {\n  Sent\n  Pending\n}\n\nenum SortFindByIdsProduct_QuotationInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProduct_QuotationOperatorsInput\n  OR: [FilterFindOneProduct_QuotationInput!]\n  AND: [FilterFindOneProduct_QuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProduct_QuotationOperatorsInput {\n  _id: FilterFindOneProduct_Quotation_idOperatorsInput\n  createdAt: FilterFindOneProduct_QuotationCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProduct_Quotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_QuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProduct_QuotationInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProduct_QuotationOperatorsInput\n  OR: [FilterFindManyProduct_QuotationInput!]\n  AND: [FilterFindManyProduct_QuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProduct_QuotationOperatorsInput {\n  _id: FilterFindManyProduct_Quotation_idOperatorsInput\n  createdAt: FilterFindManyProduct_QuotationCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProduct_Quotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_QuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProduct_QuotationInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProduct_QuotationOperatorsInput\n  OR: [FilterCountProduct_QuotationInput!]\n  AND: [FilterCountProduct_QuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProduct_QuotationOperatorsInput {\n  _id: FilterCountProduct_Quotation_idOperatorsInput\n  createdAt: FilterCountProduct_QuotationCreatedAtOperatorsInput\n}\n\ninput FilterCountProduct_Quotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_QuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Product_QuotationConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Product_QuotationEdge!]!\n}\n\n# An edge in a connection.\ntype Product_QuotationEdge {\n  # The item at the end of the edge\n  node: Product_Quotation!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProduct_QuotationEnum {\n  _ID_DESC\n  _ID_ASC\n}\n\n# List of items with pagination.\ntype Product_QuotationPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product_Quotation!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Product_Return {\n  return: Return\n  product_variant: Product_Variant\n  unit: Unit\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_price: Float!\n  total: Float!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Return {\n  reference_no: String!\n  user: User\n  biller: Employee\n  warehouse: Warehouse\n  account: Account\n  customer: Customer\n  product_returns(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_ReturnInput): [Product_Return!]!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_price: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  grandtotal: Float!\n  document: String\n  return_note: String\n  staff_note: String\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsProduct_ReturnInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProduct_ReturnOperatorsInput\n  OR: [FilterFindOneProduct_ReturnInput!]\n  AND: [FilterFindOneProduct_ReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProduct_ReturnOperatorsInput {\n  _id: FilterFindOneProduct_Return_idOperatorsInput\n  createdAt: FilterFindOneProduct_ReturnCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProduct_Return_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_ReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProduct_ReturnInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProduct_ReturnOperatorsInput\n  OR: [FilterFindManyProduct_ReturnInput!]\n  AND: [FilterFindManyProduct_ReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProduct_ReturnOperatorsInput {\n  _id: FilterFindManyProduct_Return_idOperatorsInput\n  createdAt: FilterFindManyProduct_ReturnCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProduct_Return_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_ReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProduct_ReturnInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProduct_ReturnOperatorsInput\n  OR: [FilterCountProduct_ReturnInput!]\n  AND: [FilterCountProduct_ReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProduct_ReturnOperatorsInput {\n  _id: FilterCountProduct_Return_idOperatorsInput\n  createdAt: FilterCountProduct_ReturnCreatedAtOperatorsInput\n}\n\ninput FilterCountProduct_Return_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_ReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Product_ReturnConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Product_ReturnEdge!]!\n}\n\n# An edge in a connection.\ntype Product_ReturnEdge {\n  # The item at the end of the edge\n  node: Product_Return!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProduct_ReturnEnum {\n  _ID_DESC\n  _ID_ASC\n}\n\n# List of items with pagination.\ntype Product_ReturnPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product_Return!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Product_Sale {\n  sale: Sale\n  product_variant: Product_Variant\n  unit: Unit\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_price: Float!\n  total: Float!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype Sale {\n  reference_no: String!\n  user: MongoID!\n  biller: MongoID!\n  warehouse: MongoID!\n  coupon: MongoID!\n  customer: MongoID!\n  product_sales: [MongoID]!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_price: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  order_discount: Float!\n  shipping_cost: Float!\n  coupon_discount: Float!\n  grandtotal: Float!\n  paid_amount: Float!\n  sale_status: EnumSaleSale_status!\n  payment_status: EnumSalePayment_status!\n  document: String\n  sale_note: String\n  staff_note: String\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum EnumSaleSale_status {\n  Completed\n  Pending\n}\n\nenum EnumSalePayment_status {\n  Due\n  Pending\n  Partial\n  Paid\n}\n\nenum SortFindByIdsProduct_SaleInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProduct_SaleOperatorsInput\n  OR: [FilterFindOneProduct_SaleInput!]\n  AND: [FilterFindOneProduct_SaleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProduct_SaleOperatorsInput {\n  _id: FilterFindOneProduct_Sale_idOperatorsInput\n  createdAt: FilterFindOneProduct_SaleCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProduct_Sale_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_SaleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProduct_SaleInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProduct_SaleOperatorsInput\n  OR: [FilterFindManyProduct_SaleInput!]\n  AND: [FilterFindManyProduct_SaleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProduct_SaleOperatorsInput {\n  _id: FilterFindManyProduct_Sale_idOperatorsInput\n  createdAt: FilterFindManyProduct_SaleCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProduct_Sale_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_SaleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProduct_SaleInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProduct_SaleOperatorsInput\n  OR: [FilterCountProduct_SaleInput!]\n  AND: [FilterCountProduct_SaleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProduct_SaleOperatorsInput {\n  _id: FilterCountProduct_Sale_idOperatorsInput\n  createdAt: FilterCountProduct_SaleCreatedAtOperatorsInput\n}\n\ninput FilterCountProduct_Sale_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_SaleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Product_SaleConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Product_SaleEdge!]!\n}\n\n# An edge in a connection.\ntype Product_SaleEdge {\n  # The item at the end of the edge\n  node: Product_Sale!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProduct_SaleEnum {\n  _ID_DESC\n  _ID_ASC\n}\n\n# List of items with pagination.\ntype Product_SalePagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product_Sale!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\n#\ninput FilterFindOneProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProduct_SupplierOperatorsInput\n  OR: [FilterFindOneProduct_SupplierInput!]\n  AND: [FilterFindOneProduct_SupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProduct_SupplierOperatorsInput {\n  itemCode: FilterFindOneProduct_SupplierItemCodeOperatorsInput\n  _id: FilterFindOneProduct_Supplier_idOperatorsInput\n  createdAt: FilterFindOneProduct_SupplierCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProduct_SupplierItemCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_Supplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_SupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProduct_SupplierInput {\n  _ID_ASC\n  _ID_DESC\n  ITEMCODE_ASC\n  ITEMCODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProduct_SupplierOperatorsInput\n  OR: [FilterFindManyProduct_SupplierInput!]\n  AND: [FilterFindManyProduct_SupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProduct_SupplierOperatorsInput {\n  itemCode: FilterFindManyProduct_SupplierItemCodeOperatorsInput\n  _id: FilterFindManyProduct_Supplier_idOperatorsInput\n  createdAt: FilterFindManyProduct_SupplierCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProduct_SupplierItemCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_Supplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_SupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProduct_SupplierInput {\n  _ID_ASC\n  _ID_DESC\n  ITEMCODE_ASC\n  ITEMCODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProduct_SupplierOperatorsInput\n  OR: [FilterCountProduct_SupplierInput!]\n  AND: [FilterCountProduct_SupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProduct_SupplierOperatorsInput {\n  itemCode: FilterCountProduct_SupplierItemCodeOperatorsInput\n  _id: FilterCountProduct_Supplier_idOperatorsInput\n  createdAt: FilterCountProduct_SupplierCreatedAtOperatorsInput\n}\n\ninput FilterCountProduct_SupplierItemCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountProduct_Supplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_SupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Product_SupplierConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Product_SupplierEdge!]!\n}\n\n# An edge in a connection.\ntype Product_SupplierEdge {\n  # The item at the end of the edge\n  node: Product_Supplier!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProduct_SupplierEnum {\n  _ID_DESC\n  _ID_ASC\n  ITEMCODE_DESC\n  ITEMCODE_ASC\n}\n\n# List of items with pagination.\ntype Product_SupplierPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product_Supplier!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Product_Transfer {\n  transfer: MongoID!\n  product_variant: Product_Variant\n  purchase_unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  net_unit_cost: Float!\n  total: Float!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n  purchase: Transfer\n  unit: Unit\n}\n\ntype Transfer {\n  reference_no: String!\n  item: Float!\n  total_qty: Float!\n  total_tax: Float!\n  total_cost: Float!\n  shipping_cost: Float!\n  grand_total: Float!\n  paid_amount: Float!\n  user: User\n  from_warehouse: Warehouse\n  to_warehouse: Warehouse\n  product_transfers(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsProduct_TransferInput): [Product_Transfer!]!\n  status: EnumTransferStatus!\n  document: String\n  note: String\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsProduct_TransferInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\nenum EnumTransferStatus {\n  Completed\n  Pending\n  Sent\n}\n\n#\ninput FilterFindOneProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProduct_TransferOperatorsInput\n  OR: [FilterFindOneProduct_TransferInput!]\n  AND: [FilterFindOneProduct_TransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProduct_TransferOperatorsInput {\n  _id: FilterFindOneProduct_Transfer_idOperatorsInput\n  createdAt: FilterFindOneProduct_TransferCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProduct_Transfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_TransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProduct_TransferInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProduct_TransferOperatorsInput\n  OR: [FilterFindManyProduct_TransferInput!]\n  AND: [FilterFindManyProduct_TransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProduct_TransferOperatorsInput {\n  _id: FilterFindManyProduct_Transfer_idOperatorsInput\n  createdAt: FilterFindManyProduct_TransferCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProduct_Transfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_TransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProduct_TransferInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProduct_TransferOperatorsInput\n  OR: [FilterCountProduct_TransferInput!]\n  AND: [FilterCountProduct_TransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProduct_TransferOperatorsInput {\n  _id: FilterCountProduct_Transfer_idOperatorsInput\n  createdAt: FilterCountProduct_TransferCreatedAtOperatorsInput\n}\n\ninput FilterCountProduct_Transfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_TransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Product_TransferConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Product_TransferEdge!]!\n}\n\n# An edge in a connection.\ntype Product_TransferEdge {\n  # The item at the end of the edge\n  node: Product_Transfer!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProduct_TransferEnum {\n  _ID_DESC\n  _ID_ASC\n}\n\n# List of items with pagination.\ntype Product_TransferPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product_Transfer!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\n#\ninput FilterFindOneProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProduct_VariantOperatorsInput\n  OR: [FilterFindOneProduct_VariantInput!]\n  AND: [FilterFindOneProduct_VariantInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProduct_VariantOperatorsInput {\n  variant: FilterFindOneProduct_VariantVariantOperatorsInput\n  item_code: FilterFindOneProduct_VariantItem_codeOperatorsInput\n  _id: FilterFindOneProduct_Variant_idOperatorsInput\n  createdAt: FilterFindOneProduct_VariantCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProduct_VariantVariantOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_VariantItem_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_Variant_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_VariantCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProduct_VariantInput {\n  _ID_ASC\n  _ID_DESC\n  VARIANT_ASC\n  VARIANT_DESC\n  ITEM_CODE_ASC\n  ITEM_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProduct_VariantOperatorsInput\n  OR: [FilterFindManyProduct_VariantInput!]\n  AND: [FilterFindManyProduct_VariantInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProduct_VariantOperatorsInput {\n  variant: FilterFindManyProduct_VariantVariantOperatorsInput\n  item_code: FilterFindManyProduct_VariantItem_codeOperatorsInput\n  _id: FilterFindManyProduct_Variant_idOperatorsInput\n  createdAt: FilterFindManyProduct_VariantCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProduct_VariantVariantOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_VariantItem_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_Variant_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_VariantCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProduct_VariantInput {\n  _ID_ASC\n  _ID_DESC\n  VARIANT_ASC\n  VARIANT_DESC\n  ITEM_CODE_ASC\n  ITEM_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProduct_VariantOperatorsInput\n  OR: [FilterCountProduct_VariantInput!]\n  AND: [FilterCountProduct_VariantInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProduct_VariantOperatorsInput {\n  variant: FilterCountProduct_VariantVariantOperatorsInput\n  item_code: FilterCountProduct_VariantItem_codeOperatorsInput\n  _id: FilterCountProduct_Variant_idOperatorsInput\n  createdAt: FilterCountProduct_VariantCreatedAtOperatorsInput\n}\n\ninput FilterCountProduct_VariantVariantOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_VariantItem_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountProduct_Variant_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_VariantCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Product_VariantConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Product_VariantEdge!]!\n}\n\n# An edge in a connection.\ntype Product_VariantEdge {\n  # The item at the end of the edge\n  node: Product_Variant!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProduct_VariantEnum {\n  _ID_DESC\n  _ID_ASC\n  VARIANT_DESC\n  VARIANT_ASC\n  ITEM_CODE_DESC\n  ITEM_CODE_ASC\n}\n\n# List of items with pagination.\ntype Product_VariantPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product_Variant!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Product_Warehouse {\n  product_variant: Product_Variant\n  warehouse: Warehouse\n  qty: Float!\n  _id: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\nenum SortFindByIdsProduct_WarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProduct_WarehouseOperatorsInput\n  OR: [FilterFindOneProduct_WarehouseInput!]\n  AND: [FilterFindOneProduct_WarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProduct_WarehouseOperatorsInput {\n  _id: FilterFindOneProduct_Warehouse_idOperatorsInput\n  createdAt: FilterFindOneProduct_WarehouseCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProduct_Warehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_WarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProduct_WarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProduct_WarehouseOperatorsInput\n  OR: [FilterFindManyProduct_WarehouseInput!]\n  AND: [FilterFindManyProduct_WarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProduct_WarehouseOperatorsInput {\n  _id: FilterFindManyProduct_Warehouse_idOperatorsInput\n  createdAt: FilterFindManyProduct_WarehouseCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProduct_Warehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_WarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProduct_WarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProduct_WarehouseOperatorsInput\n  OR: [FilterCountProduct_WarehouseInput!]\n  AND: [FilterCountProduct_WarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProduct_WarehouseOperatorsInput {\n  _id: FilterCountProduct_Warehouse_idOperatorsInput\n  createdAt: FilterCountProduct_WarehouseCreatedAtOperatorsInput\n}\n\ninput FilterCountProduct_Warehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProduct_WarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype Product_WarehouseConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [Product_WarehouseEdge!]!\n}\n\n# An edge in a connection.\ntype Product_WarehouseEdge {\n  # The item at the end of the edge\n  node: Product_Warehouse!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProduct_WarehouseEnum {\n  _ID_DESC\n  _ID_ASC\n}\n\n# List of items with pagination.\ntype Product_WarehousePagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product_Warehouse!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\n#\ninput FilterFindOneProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneProductOperatorsInput\n  OR: [FilterFindOneProductInput!]\n  AND: [FilterFindOneProductInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneProductOperatorsInput {\n  name: FilterFindOneProductNameOperatorsInput\n  code: FilterFindOneProductCodeOperatorsInput\n  _id: FilterFindOneProduct_idOperatorsInput\n  createdAt: FilterFindOneProductCreatedAtOperatorsInput\n}\n\ninput FilterFindOneProductNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneProductCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneProduct_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneProductCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneProductInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyProductOperatorsInput\n  OR: [FilterFindManyProductInput!]\n  AND: [FilterFindManyProductInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyProductOperatorsInput {\n  name: FilterFindManyProductNameOperatorsInput\n  code: FilterFindManyProductCodeOperatorsInput\n  _id: FilterFindManyProduct_idOperatorsInput\n  createdAt: FilterFindManyProductCreatedAtOperatorsInput\n}\n\ninput FilterFindManyProductNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyProductCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyProduct_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyProductCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyProductInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountProductOperatorsInput\n  OR: [FilterCountProductInput!]\n  AND: [FilterCountProductInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountProductOperatorsInput {\n  name: FilterCountProductNameOperatorsInput\n  code: FilterCountProductCodeOperatorsInput\n  _id: FilterCountProduct_idOperatorsInput\n  createdAt: FilterCountProductCreatedAtOperatorsInput\n}\n\ninput FilterCountProductNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountProductCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountProduct_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountProductCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype ProductConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [ProductEdge!]!\n}\n\n# An edge in a connection.\ntype ProductEdge {\n  # The item at the end of the edge\n  node: Product!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionProductEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n  CODE_DESC\n  CODE_ASC\n}\n\n# List of items with pagination.\ntype ProductPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Product!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsPurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOnePurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOnePurchaseOperatorsInput\n  OR: [FilterFindOnePurchaseInput!]\n  AND: [FilterFindOnePurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOnePurchaseOperatorsInput {\n  reference_no: FilterFindOnePurchaseReference_noOperatorsInput\n  document: FilterFindOnePurchaseDocumentOperatorsInput\n  note: FilterFindOnePurchaseNoteOperatorsInput\n  _id: FilterFindOnePurchase_idOperatorsInput\n  createdAt: FilterFindOnePurchaseCreatedAtOperatorsInput\n}\n\ninput FilterFindOnePurchaseReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOnePurchaseDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOnePurchaseNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOnePurchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOnePurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOnePurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyPurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyPurchaseOperatorsInput\n  OR: [FilterFindManyPurchaseInput!]\n  AND: [FilterFindManyPurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyPurchaseOperatorsInput {\n  reference_no: FilterFindManyPurchaseReference_noOperatorsInput\n  document: FilterFindManyPurchaseDocumentOperatorsInput\n  note: FilterFindManyPurchaseNoteOperatorsInput\n  _id: FilterFindManyPurchase_idOperatorsInput\n  createdAt: FilterFindManyPurchaseCreatedAtOperatorsInput\n}\n\ninput FilterFindManyPurchaseReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyPurchaseDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyPurchaseNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyPurchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyPurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyPurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountPurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountPurchaseOperatorsInput\n  OR: [FilterCountPurchaseInput!]\n  AND: [FilterCountPurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountPurchaseOperatorsInput {\n  reference_no: FilterCountPurchaseReference_noOperatorsInput\n  document: FilterCountPurchaseDocumentOperatorsInput\n  note: FilterCountPurchaseNoteOperatorsInput\n  _id: FilterCountPurchase_idOperatorsInput\n  createdAt: FilterCountPurchaseCreatedAtOperatorsInput\n}\n\ninput FilterCountPurchaseReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountPurchaseDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountPurchaseNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountPurchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountPurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype PurchaseConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [PurchaseEdge!]!\n}\n\n# An edge in a connection.\ntype PurchaseEdge {\n  # The item at the end of the edge\n  node: Purchase!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionPurchaseEnum {\n  _ID_DESC\n  _ID_ASC\n  REFERENCE_NO_DESC\n  REFERENCE_NO_ASC\n  DOCUMENT_DESC\n  DOCUMENT_ASC\n  NOTE_DESC\n  NOTE_ASC\n}\n\n# List of items with pagination.\ntype PurchasePagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Purchase!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsQuotationInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneQuotationOperatorsInput\n  OR: [FilterFindOneQuotationInput!]\n  AND: [FilterFindOneQuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneQuotationOperatorsInput {\n  reference_no: FilterFindOneQuotationReference_noOperatorsInput\n  document: FilterFindOneQuotationDocumentOperatorsInput\n  note: FilterFindOneQuotationNoteOperatorsInput\n  _id: FilterFindOneQuotation_idOperatorsInput\n  createdAt: FilterFindOneQuotationCreatedAtOperatorsInput\n}\n\ninput FilterFindOneQuotationReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneQuotationDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneQuotationNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneQuotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneQuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneQuotationInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyQuotationOperatorsInput\n  OR: [FilterFindManyQuotationInput!]\n  AND: [FilterFindManyQuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyQuotationOperatorsInput {\n  reference_no: FilterFindManyQuotationReference_noOperatorsInput\n  document: FilterFindManyQuotationDocumentOperatorsInput\n  note: FilterFindManyQuotationNoteOperatorsInput\n  _id: FilterFindManyQuotation_idOperatorsInput\n  createdAt: FilterFindManyQuotationCreatedAtOperatorsInput\n}\n\ninput FilterFindManyQuotationReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyQuotationDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyQuotationNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyQuotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyQuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyQuotationInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountQuotationOperatorsInput\n  OR: [FilterCountQuotationInput!]\n  AND: [FilterCountQuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountQuotationOperatorsInput {\n  reference_no: FilterCountQuotationReference_noOperatorsInput\n  document: FilterCountQuotationDocumentOperatorsInput\n  note: FilterCountQuotationNoteOperatorsInput\n  _id: FilterCountQuotation_idOperatorsInput\n  createdAt: FilterCountQuotationCreatedAtOperatorsInput\n}\n\ninput FilterCountQuotationReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountQuotationDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountQuotationNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountQuotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountQuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype QuotationConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [QuotationEdge!]!\n}\n\n# An edge in a connection.\ntype QuotationEdge {\n  # The item at the end of the edge\n  node: Quotation!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionQuotationEnum {\n  _ID_DESC\n  _ID_ASC\n  REFERENCE_NO_DESC\n  REFERENCE_NO_ASC\n  DOCUMENT_DESC\n  DOCUMENT_ASC\n  NOTE_DESC\n  NOTE_ASC\n}\n\n# List of items with pagination.\ntype QuotationPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Quotation!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsReturnInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  RETURN_NOTE_ASC\n  RETURN_NOTE_DESC\n  STAFF_NOTE_ASC\n  STAFF_NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneReturnOperatorsInput\n  OR: [FilterFindOneReturnInput!]\n  AND: [FilterFindOneReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneReturnOperatorsInput {\n  reference_no: FilterFindOneReturnReference_noOperatorsInput\n  document: FilterFindOneReturnDocumentOperatorsInput\n  return_note: FilterFindOneReturnReturn_noteOperatorsInput\n  staff_note: FilterFindOneReturnStaff_noteOperatorsInput\n  _id: FilterFindOneReturn_idOperatorsInput\n  createdAt: FilterFindOneReturnCreatedAtOperatorsInput\n}\n\ninput FilterFindOneReturnReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneReturnDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneReturnReturn_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneReturnStaff_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneReturn_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneReturnInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  RETURN_NOTE_ASC\n  RETURN_NOTE_DESC\n  STAFF_NOTE_ASC\n  STAFF_NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyReturnOperatorsInput\n  OR: [FilterFindManyReturnInput!]\n  AND: [FilterFindManyReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyReturnOperatorsInput {\n  reference_no: FilterFindManyReturnReference_noOperatorsInput\n  document: FilterFindManyReturnDocumentOperatorsInput\n  return_note: FilterFindManyReturnReturn_noteOperatorsInput\n  staff_note: FilterFindManyReturnStaff_noteOperatorsInput\n  _id: FilterFindManyReturn_idOperatorsInput\n  createdAt: FilterFindManyReturnCreatedAtOperatorsInput\n}\n\ninput FilterFindManyReturnReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyReturnDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyReturnReturn_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyReturnStaff_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyReturn_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyReturnInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  RETURN_NOTE_ASC\n  RETURN_NOTE_DESC\n  STAFF_NOTE_ASC\n  STAFF_NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountReturnOperatorsInput\n  OR: [FilterCountReturnInput!]\n  AND: [FilterCountReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountReturnOperatorsInput {\n  reference_no: FilterCountReturnReference_noOperatorsInput\n  document: FilterCountReturnDocumentOperatorsInput\n  return_note: FilterCountReturnReturn_noteOperatorsInput\n  staff_note: FilterCountReturnStaff_noteOperatorsInput\n  _id: FilterCountReturn_idOperatorsInput\n  createdAt: FilterCountReturnCreatedAtOperatorsInput\n}\n\ninput FilterCountReturnReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountReturnDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountReturnReturn_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountReturnStaff_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountReturn_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype ReturnConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [ReturnEdge!]!\n}\n\n# An edge in a connection.\ntype ReturnEdge {\n  # The item at the end of the edge\n  node: Return!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionReturnEnum {\n  _ID_DESC\n  _ID_ASC\n  REFERENCE_NO_DESC\n  REFERENCE_NO_ASC\n  DOCUMENT_DESC\n  DOCUMENT_ASC\n  RETURN_NOTE_DESC\n  RETURN_NOTE_ASC\n  STAFF_NOTE_DESC\n  STAFF_NOTE_ASC\n}\n\n# List of items with pagination.\ntype ReturnPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Return!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsRoleInput {\n  _ID_ASC\n  _ID_DESC\n  DESCRIPTION_ASC\n  DESCRIPTION_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneRoleOperatorsInput\n  OR: [FilterFindOneRoleInput!]\n  AND: [FilterFindOneRoleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneRoleOperatorsInput {\n  description: FilterFindOneRoleDescriptionOperatorsInput\n  _id: FilterFindOneRole_idOperatorsInput\n  createdAt: FilterFindOneRoleCreatedAtOperatorsInput\n}\n\ninput FilterFindOneRoleDescriptionOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneRole_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneRoleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneRoleInput {\n  _ID_ASC\n  _ID_DESC\n  DESCRIPTION_ASC\n  DESCRIPTION_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyRoleOperatorsInput\n  OR: [FilterFindManyRoleInput!]\n  AND: [FilterFindManyRoleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyRoleOperatorsInput {\n  description: FilterFindManyRoleDescriptionOperatorsInput\n  _id: FilterFindManyRole_idOperatorsInput\n  createdAt: FilterFindManyRoleCreatedAtOperatorsInput\n}\n\ninput FilterFindManyRoleDescriptionOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyRole_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyRoleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyRoleInput {\n  _ID_ASC\n  _ID_DESC\n  DESCRIPTION_ASC\n  DESCRIPTION_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountRoleOperatorsInput\n  OR: [FilterCountRoleInput!]\n  AND: [FilterCountRoleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountRoleOperatorsInput {\n  description: FilterCountRoleDescriptionOperatorsInput\n  _id: FilterCountRole_idOperatorsInput\n  createdAt: FilterCountRoleCreatedAtOperatorsInput\n}\n\ninput FilterCountRoleDescriptionOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountRole_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountRoleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype RoleConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [RoleEdge!]!\n}\n\n# An edge in a connection.\ntype RoleEdge {\n  # The item at the end of the edge\n  node: Role!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionRoleEnum {\n  _ID_DESC\n  _ID_ASC\n  DESCRIPTION_DESC\n  DESCRIPTION_ASC\n}\n\n# List of items with pagination.\ntype RolePagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Role!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsSupplierInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  COMPANY_NAME_ASC\n  COMPANY_NAME_DESC\n  VAT_NUMBER_ASC\n  VAT_NUMBER_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneSupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneSupplierOperatorsInput\n  OR: [FilterFindOneSupplierInput!]\n  AND: [FilterFindOneSupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneSupplierOperatorsInput {\n  name: FilterFindOneSupplierNameOperatorsInput\n  image: FilterFindOneSupplierImageOperatorsInput\n  company_name: FilterFindOneSupplierCompany_nameOperatorsInput\n  vat_number: FilterFindOneSupplierVat_numberOperatorsInput\n  email: FilterFindOneSupplierEmailOperatorsInput\n  phone_number: FilterFindOneSupplierPhone_numberOperatorsInput\n  address: FilterFindOneSupplierAddressOperatorsInput\n  _id: FilterFindOneSupplier_idOperatorsInput\n  createdAt: FilterFindOneSupplierCreatedAtOperatorsInput\n}\n\ninput FilterFindOneSupplierNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneSupplierImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneSupplierCompany_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneSupplierVat_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindOneSupplierEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneSupplierPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindOneSupplierAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneSupplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneSupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneSupplierInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  COMPANY_NAME_ASC\n  COMPANY_NAME_DESC\n  VAT_NUMBER_ASC\n  VAT_NUMBER_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManySupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManySupplierOperatorsInput\n  OR: [FilterFindManySupplierInput!]\n  AND: [FilterFindManySupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManySupplierOperatorsInput {\n  name: FilterFindManySupplierNameOperatorsInput\n  image: FilterFindManySupplierImageOperatorsInput\n  company_name: FilterFindManySupplierCompany_nameOperatorsInput\n  vat_number: FilterFindManySupplierVat_numberOperatorsInput\n  email: FilterFindManySupplierEmailOperatorsInput\n  phone_number: FilterFindManySupplierPhone_numberOperatorsInput\n  address: FilterFindManySupplierAddressOperatorsInput\n  _id: FilterFindManySupplier_idOperatorsInput\n  createdAt: FilterFindManySupplierCreatedAtOperatorsInput\n}\n\ninput FilterFindManySupplierNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManySupplierImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManySupplierCompany_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManySupplierVat_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindManySupplierEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManySupplierPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindManySupplierAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManySupplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManySupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManySupplierInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  COMPANY_NAME_ASC\n  COMPANY_NAME_DESC\n  VAT_NUMBER_ASC\n  VAT_NUMBER_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountSupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountSupplierOperatorsInput\n  OR: [FilterCountSupplierInput!]\n  AND: [FilterCountSupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountSupplierOperatorsInput {\n  name: FilterCountSupplierNameOperatorsInput\n  image: FilterCountSupplierImageOperatorsInput\n  company_name: FilterCountSupplierCompany_nameOperatorsInput\n  vat_number: FilterCountSupplierVat_numberOperatorsInput\n  email: FilterCountSupplierEmailOperatorsInput\n  phone_number: FilterCountSupplierPhone_numberOperatorsInput\n  address: FilterCountSupplierAddressOperatorsInput\n  _id: FilterCountSupplier_idOperatorsInput\n  createdAt: FilterCountSupplierCreatedAtOperatorsInput\n}\n\ninput FilterCountSupplierNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountSupplierImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountSupplierCompany_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountSupplierVat_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterCountSupplierEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountSupplierPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterCountSupplierAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountSupplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountSupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype SupplierConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [SupplierEdge!]!\n}\n\n# An edge in a connection.\ntype SupplierEdge {\n  # The item at the end of the edge\n  node: Supplier!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionSupplierEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n  IMAGE_DESC\n  IMAGE_ASC\n  COMPANY_NAME_DESC\n  COMPANY_NAME_ASC\n  VAT_NUMBER_DESC\n  VAT_NUMBER_ASC\n  EMAIL_DESC\n  EMAIL_ASC\n  PHONE_NUMBER_DESC\n  PHONE_NUMBER_ASC\n  ADDRESS_DESC\n  ADDRESS_ASC\n}\n\n# List of items with pagination.\ntype SupplierPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Supplier!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsTaxInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneTaxOperatorsInput\n  OR: [FilterFindOneTaxInput!]\n  AND: [FilterFindOneTaxInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneTaxOperatorsInput {\n  name: FilterFindOneTaxNameOperatorsInput\n  _id: FilterFindOneTax_idOperatorsInput\n  createdAt: FilterFindOneTaxCreatedAtOperatorsInput\n}\n\ninput FilterFindOneTaxNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneTax_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneTaxCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneTaxInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyTaxOperatorsInput\n  OR: [FilterFindManyTaxInput!]\n  AND: [FilterFindManyTaxInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyTaxOperatorsInput {\n  name: FilterFindManyTaxNameOperatorsInput\n  _id: FilterFindManyTax_idOperatorsInput\n  createdAt: FilterFindManyTaxCreatedAtOperatorsInput\n}\n\ninput FilterFindManyTaxNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyTax_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyTaxCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyTaxInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountTaxOperatorsInput\n  OR: [FilterCountTaxInput!]\n  AND: [FilterCountTaxInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountTaxOperatorsInput {\n  name: FilterCountTaxNameOperatorsInput\n  _id: FilterCountTax_idOperatorsInput\n  createdAt: FilterCountTaxCreatedAtOperatorsInput\n}\n\ninput FilterCountTaxNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountTax_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountTaxCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype TaxConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [TaxEdge!]!\n}\n\n# An edge in a connection.\ntype TaxEdge {\n  # The item at the end of the edge\n  node: Tax!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionTaxEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n}\n\n# List of items with pagination.\ntype TaxPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Tax!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsTransferInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneTransferOperatorsInput\n  OR: [FilterFindOneTransferInput!]\n  AND: [FilterFindOneTransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneTransferOperatorsInput {\n  reference_no: FilterFindOneTransferReference_noOperatorsInput\n  document: FilterFindOneTransferDocumentOperatorsInput\n  note: FilterFindOneTransferNoteOperatorsInput\n  _id: FilterFindOneTransfer_idOperatorsInput\n  createdAt: FilterFindOneTransferCreatedAtOperatorsInput\n}\n\ninput FilterFindOneTransferReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneTransferDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneTransferNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneTransfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneTransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneTransferInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyTransferOperatorsInput\n  OR: [FilterFindManyTransferInput!]\n  AND: [FilterFindManyTransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyTransferOperatorsInput {\n  reference_no: FilterFindManyTransferReference_noOperatorsInput\n  document: FilterFindManyTransferDocumentOperatorsInput\n  note: FilterFindManyTransferNoteOperatorsInput\n  _id: FilterFindManyTransfer_idOperatorsInput\n  createdAt: FilterFindManyTransferCreatedAtOperatorsInput\n}\n\ninput FilterFindManyTransferReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyTransferDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyTransferNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyTransfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyTransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyTransferInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountTransferOperatorsInput\n  OR: [FilterCountTransferInput!]\n  AND: [FilterCountTransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountTransferOperatorsInput {\n  reference_no: FilterCountTransferReference_noOperatorsInput\n  document: FilterCountTransferDocumentOperatorsInput\n  note: FilterCountTransferNoteOperatorsInput\n  _id: FilterCountTransfer_idOperatorsInput\n  createdAt: FilterCountTransferCreatedAtOperatorsInput\n}\n\ninput FilterCountTransferReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountTransferDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountTransferNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountTransfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountTransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype TransferConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [TransferEdge!]!\n}\n\n# An edge in a connection.\ntype TransferEdge {\n  # The item at the end of the edge\n  node: Transfer!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionTransferEnum {\n  _ID_DESC\n  _ID_ASC\n  REFERENCE_NO_DESC\n  REFERENCE_NO_ASC\n  DOCUMENT_DESC\n  DOCUMENT_ASC\n  NOTE_DESC\n  NOTE_ASC\n}\n\n# List of items with pagination.\ntype TransferPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Transfer!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsUnitInput {\n  _ID_ASC\n  _ID_DESC\n  UNIT_NAME_ASC\n  UNIT_NAME_DESC\n  UNIT_CODE_ASC\n  UNIT_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneUnitOperatorsInput\n  OR: [FilterFindOneUnitInput!]\n  AND: [FilterFindOneUnitInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneUnitOperatorsInput {\n  unit_name: FilterFindOneUnitUnit_nameOperatorsInput\n  unit_code: FilterFindOneUnitUnit_codeOperatorsInput\n  _id: FilterFindOneUnit_idOperatorsInput\n  createdAt: FilterFindOneUnitCreatedAtOperatorsInput\n}\n\ninput FilterFindOneUnitUnit_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneUnitUnit_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneUnit_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneUnitCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneUnitInput {\n  _ID_ASC\n  _ID_DESC\n  UNIT_NAME_ASC\n  UNIT_NAME_DESC\n  UNIT_CODE_ASC\n  UNIT_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyUnitOperatorsInput\n  OR: [FilterFindManyUnitInput!]\n  AND: [FilterFindManyUnitInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyUnitOperatorsInput {\n  unit_name: FilterFindManyUnitUnit_nameOperatorsInput\n  unit_code: FilterFindManyUnitUnit_codeOperatorsInput\n  _id: FilterFindManyUnit_idOperatorsInput\n  createdAt: FilterFindManyUnitCreatedAtOperatorsInput\n}\n\ninput FilterFindManyUnitUnit_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyUnitUnit_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyUnit_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyUnitCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyUnitInput {\n  _ID_ASC\n  _ID_DESC\n  UNIT_NAME_ASC\n  UNIT_NAME_DESC\n  UNIT_CODE_ASC\n  UNIT_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountUnitOperatorsInput\n  OR: [FilterCountUnitInput!]\n  AND: [FilterCountUnitInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountUnitOperatorsInput {\n  unit_name: FilterCountUnitUnit_nameOperatorsInput\n  unit_code: FilterCountUnitUnit_codeOperatorsInput\n  _id: FilterCountUnit_idOperatorsInput\n  createdAt: FilterCountUnitCreatedAtOperatorsInput\n}\n\ninput FilterCountUnitUnit_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountUnitUnit_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountUnit_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountUnitCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype UnitConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [UnitEdge!]!\n}\n\n# An edge in a connection.\ntype UnitEdge {\n  # The item at the end of the edge\n  node: Unit!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionUnitEnum {\n  _ID_DESC\n  _ID_ASC\n  UNIT_NAME_DESC\n  UNIT_NAME_ASC\n  UNIT_CODE_DESC\n  UNIT_CODE_ASC\n}\n\n# List of items with pagination.\ntype UnitPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Unit!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\nenum SortFindByIdsUserInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindOneUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneUserOperatorsInput\n  OR: [FilterFindOneUserInput!]\n  AND: [FilterFindOneUserInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneUserOperatorsInput {\n  _id: FilterFindOneUser_idOperatorsInput\n  createdAt: FilterFindOneUserCreatedAtOperatorsInput\n}\n\ninput FilterFindOneUser_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneUserCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneUserInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyUserOperatorsInput\n  OR: [FilterFindManyUserInput!]\n  AND: [FilterFindManyUserInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyUserOperatorsInput {\n  _id: FilterFindManyUser_idOperatorsInput\n  createdAt: FilterFindManyUserCreatedAtOperatorsInput\n}\n\ninput FilterFindManyUser_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyUserCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyUserInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountUserOperatorsInput\n  OR: [FilterCountUserInput!]\n  AND: [FilterCountUserInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountUserOperatorsInput {\n  _id: FilterCountUser_idOperatorsInput\n  createdAt: FilterCountUserCreatedAtOperatorsInput\n}\n\ninput FilterCountUser_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountUserCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype UserConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [UserEdge!]!\n}\n\n# An edge in a connection.\ntype UserEdge {\n  # The item at the end of the edge\n  node: User!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionUserEnum {\n  _ID_DESC\n  _ID_ASC\n}\n\n# List of items with pagination.\ntype UserPagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [User!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\n#\ninput FilterFindOneValueInput {\n  name: String\n  attribute: MongoID\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneValueOperatorsInput\n  OR: [FilterFindOneValueInput!]\n  AND: [FilterFindOneValueInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneValueOperatorsInput {\n  name: FilterFindOneValueNameOperatorsInput\n  _id: FilterFindOneValue_idOperatorsInput\n  createdAt: FilterFindOneValueCreatedAtOperatorsInput\n}\n\ninput FilterFindOneValueNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneValue_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneValueCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneValueInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyValueInput {\n  name: String\n  attribute: MongoID\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyValueOperatorsInput\n  OR: [FilterFindManyValueInput!]\n  AND: [FilterFindManyValueInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyValueOperatorsInput {\n  name: FilterFindManyValueNameOperatorsInput\n  _id: FilterFindManyValue_idOperatorsInput\n  createdAt: FilterFindManyValueCreatedAtOperatorsInput\n}\n\ninput FilterFindManyValueNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyValue_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyValueCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyValueInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountValueInput {\n  name: String\n  attribute: MongoID\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountValueOperatorsInput\n  OR: [FilterCountValueInput!]\n  AND: [FilterCountValueInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountValueOperatorsInput {\n  name: FilterCountValueNameOperatorsInput\n  _id: FilterCountValue_idOperatorsInput\n  createdAt: FilterCountValueCreatedAtOperatorsInput\n}\n\ninput FilterCountValueNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountValue_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountValueCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype ValueConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [ValueEdge!]!\n}\n\n# An edge in a connection.\ntype ValueEdge {\n  # The item at the end of the edge\n  node: Value!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionValueEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n}\n\n# List of items with pagination.\ntype ValuePagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Value!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\n#\ninput FilterFindOneWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindOneWarehouseOperatorsInput\n  OR: [FilterFindOneWarehouseInput!]\n  AND: [FilterFindOneWarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindOneWarehouseOperatorsInput {\n  name: FilterFindOneWarehouseNameOperatorsInput\n  email: FilterFindOneWarehouseEmailOperatorsInput\n  address: FilterFindOneWarehouseAddressOperatorsInput\n  phone: FilterFindOneWarehousePhoneOperatorsInput\n  _id: FilterFindOneWarehouse_idOperatorsInput\n  createdAt: FilterFindOneWarehouseCreatedAtOperatorsInput\n}\n\ninput FilterFindOneWarehouseNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneWarehouseEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneWarehouseAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindOneWarehousePhoneOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindOneWarehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindOneWarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindOneWarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  PHONE_ASC\n  PHONE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterFindManyWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterFindManyWarehouseOperatorsInput\n  OR: [FilterFindManyWarehouseInput!]\n  AND: [FilterFindManyWarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterFindManyWarehouseOperatorsInput {\n  name: FilterFindManyWarehouseNameOperatorsInput\n  email: FilterFindManyWarehouseEmailOperatorsInput\n  address: FilterFindManyWarehouseAddressOperatorsInput\n  phone: FilterFindManyWarehousePhoneOperatorsInput\n  _id: FilterFindManyWarehouse_idOperatorsInput\n  createdAt: FilterFindManyWarehouseCreatedAtOperatorsInput\n}\n\ninput FilterFindManyWarehouseNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyWarehouseEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyWarehouseAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterFindManyWarehousePhoneOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterFindManyWarehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterFindManyWarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortFindManyWarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  PHONE_ASC\n  PHONE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\n#\ninput FilterCountWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterCountWarehouseOperatorsInput\n  OR: [FilterCountWarehouseInput!]\n  AND: [FilterCountWarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterCountWarehouseOperatorsInput {\n  name: FilterCountWarehouseNameOperatorsInput\n  email: FilterCountWarehouseEmailOperatorsInput\n  address: FilterCountWarehouseAddressOperatorsInput\n  phone: FilterCountWarehousePhoneOperatorsInput\n  _id: FilterCountWarehouse_idOperatorsInput\n  createdAt: FilterCountWarehouseCreatedAtOperatorsInput\n}\n\ninput FilterCountWarehouseNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountWarehouseEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountWarehouseAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterCountWarehousePhoneOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterCountWarehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterCountWarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\n# A connection to a list of items.\ntype WarehouseConnection {\n  # Total object count.\n  count: Int!\n\n  # Information to aid in pagination.\n  pageInfo: PageInfo!\n\n  # Information to aid in pagination.\n  edges: [WarehouseEdge!]!\n}\n\n# An edge in a connection.\ntype WarehouseEdge {\n  # The item at the end of the edge\n  node: Warehouse!\n\n  # A cursor for use in pagination\n  cursor: String!\n}\n\nenum SortConnectionWarehouseEnum {\n  _ID_DESC\n  _ID_ASC\n  NAME_DESC\n  NAME_ASC\n  EMAIL_DESC\n  EMAIL_ASC\n  ADDRESS_DESC\n  ADDRESS_ASC\n  PHONE_DESC\n  PHONE_ASC\n}\n\n# List of items with pagination.\ntype WarehousePagination {\n  # Total object count.\n  count: Int\n\n  # Array of objects.\n  items: [Warehouse!]\n\n  # Information to aid in pagination.\n  pageInfo: PaginationInfo!\n}\n\ntype Mutation {\n  # Create one document with mongoose defaults, setters, hooks and validation\n  accountCreateOne(record: CreateOneAccountInput!): CreateOneAccountPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  accountCreateMany(records: [CreateManyAccountInput!]!): CreateManyAccountPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  accountUpdateById(_id: MongoID!, record: UpdateByIdAccountInput!): UpdateByIdAccountPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  accountUpdateOne(\n    record: UpdateOneAccountInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneAccountInput\n    sort: SortUpdateOneAccountInput\n    skip: Int\n  ): UpdateOneAccountPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  accountUpdateMany(\n    record: UpdateManyAccountInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyAccountInput\n    sort: SortUpdateManyAccountInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyAccountPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  accountRemoveById(_id: MongoID!): RemoveByIdAccountPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  accountRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneAccountInput\n    sort: SortRemoveOneAccountInput\n  ): RemoveOneAccountPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  accountRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyAccountInput!\n    limit: Int = 100\n  ): RemoveManyAccountPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  adjustmentCreateOne(record: CreateOneAdjustmentInput!): CreateOneAdjustmentPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  adjustmentCreateMany(records: [CreateManyAdjustmentInput!]!): CreateManyAdjustmentPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  adjustmentUpdateById(_id: MongoID!, record: UpdateByIdAdjustmentInput!): UpdateByIdAdjustmentPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  adjustmentUpdateOne(\n    record: UpdateOneAdjustmentInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneAdjustmentInput\n    sort: SortUpdateOneAdjustmentInput\n    skip: Int\n  ): UpdateOneAdjustmentPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  adjustmentUpdateMany(\n    record: UpdateManyAdjustmentInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyAdjustmentInput\n    sort: SortUpdateManyAdjustmentInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyAdjustmentPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  adjustmentRemoveById(_id: MongoID!): RemoveByIdAdjustmentPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  adjustmentRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneAdjustmentInput\n    sort: SortRemoveOneAdjustmentInput\n  ): RemoveOneAdjustmentPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  adjustmentRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyAdjustmentInput!\n    limit: Int = 100\n  ): RemoveManyAdjustmentPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  attributeCreateOne(record: CreateOneAttributeInput!): CreateOneAttributePayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  attributeCreateMany(records: [CreateManyAttributeInput!]!): CreateManyAttributePayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  attributeUpdateById(_id: MongoID!, record: UpdateByIdAttributeInput!): UpdateByIdAttributePayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  attributeUpdateOne(\n    record: UpdateOneAttributeInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneAttributeInput\n    sort: SortUpdateOneAttributeInput\n    skip: Int\n  ): UpdateOneAttributePayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  attributeUpdateMany(\n    record: UpdateManyAttributeInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyAttributeInput\n    sort: SortUpdateManyAttributeInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyAttributePayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  attributeRemoveById(_id: MongoID!): RemoveByIdAttributePayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  attributeRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneAttributeInput\n    sort: SortRemoveOneAttributeInput\n  ): RemoveOneAttributePayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  attributeRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyAttributeInput!\n    limit: Int = 100\n  ): RemoveManyAttributePayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  brandCreateOne(record: CreateOneBrandInput!): CreateOneBrandPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  brandCreateMany(records: [CreateManyBrandInput!]!): CreateManyBrandPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  brandUpdateById(_id: MongoID!, record: UpdateByIdBrandInput!): UpdateByIdBrandPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  brandUpdateOne(\n    record: UpdateOneBrandInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneBrandInput\n    sort: SortUpdateOneBrandInput\n    skip: Int\n  ): UpdateOneBrandPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  brandUpdateMany(\n    record: UpdateManyBrandInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyBrandInput\n    sort: SortUpdateManyBrandInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyBrandPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  brandRemoveById(_id: MongoID!): RemoveByIdBrandPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  brandRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneBrandInput\n    sort: SortRemoveOneBrandInput\n  ): RemoveOneBrandPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  brandRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyBrandInput!\n    limit: Int = 100\n  ): RemoveManyBrandPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  categoryCreateOne(record: CreateOneCategoryInput!): CreateOneCategoryPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  categoryCreateMany(records: [CreateManyCategoryInput!]!): CreateManyCategoryPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  categoryUpdateById(_id: MongoID!, record: UpdateByIdCategoryInput!): UpdateByIdCategoryPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  categoryUpdateOne(\n    record: UpdateOneCategoryInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneCategoryInput\n    sort: SortUpdateOneCategoryInput\n    skip: Int\n  ): UpdateOneCategoryPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  categoryUpdateMany(\n    record: UpdateManyCategoryInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyCategoryInput\n    sort: SortUpdateManyCategoryInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyCategoryPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  categoryRemoveById(_id: MongoID!): RemoveByIdCategoryPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  categoryRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneCategoryInput\n    sort: SortRemoveOneCategoryInput\n  ): RemoveOneCategoryPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  categoryRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyCategoryInput!\n    limit: Int = 100\n  ): RemoveManyCategoryPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  couponCreateOne(record: CreateOneCouponInput!): CreateOneCouponPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  couponCreateMany(records: [CreateManyCouponInput!]!): CreateManyCouponPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  couponUpdateById(_id: MongoID!, record: UpdateByIdCouponInput!): UpdateByIdCouponPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  couponUpdateOne(\n    record: UpdateOneCouponInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneCouponInput\n    sort: SortUpdateOneCouponInput\n    skip: Int\n  ): UpdateOneCouponPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  couponUpdateMany(\n    record: UpdateManyCouponInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyCouponInput\n    sort: SortUpdateManyCouponInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyCouponPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  couponRemoveById(_id: MongoID!): RemoveByIdCouponPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  couponRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneCouponInput\n    sort: SortRemoveOneCouponInput\n  ): RemoveOneCouponPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  couponRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyCouponInput!\n    limit: Int = 100\n  ): RemoveManyCouponPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  customerCreateOne(record: CreateOneCustomerInput!): CreateOneCustomerPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  customerCreateMany(records: [CreateManyCustomerInput!]!): CreateManyCustomerPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  customerUpdateById(_id: MongoID!, record: UpdateByIdCustomerInput!): UpdateByIdCustomerPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  customerUpdateOne(\n    record: UpdateOneCustomerInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneCustomerInput\n    sort: SortUpdateOneCustomerInput\n    skip: Int\n  ): UpdateOneCustomerPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  customerUpdateMany(\n    record: UpdateManyCustomerInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyCustomerInput\n    sort: SortUpdateManyCustomerInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyCustomerPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  customerRemoveById(_id: MongoID!): RemoveByIdCustomerPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  customerRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneCustomerInput\n    sort: SortRemoveOneCustomerInput\n  ): RemoveOneCustomerPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  customerRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyCustomerInput!\n    limit: Int = 100\n  ): RemoveManyCustomerPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  customerGroupCreateOne(record: CreateOneCustomer_GroupInput!): CreateOneCustomer_GroupPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  customerGroupCreateMany(records: [CreateManyCustomer_GroupInput!]!): CreateManyCustomer_GroupPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  customerGroupUpdateById(_id: MongoID!, record: UpdateByIdCustomer_GroupInput!): UpdateByIdCustomer_GroupPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  customerGroupUpdateOne(\n    record: UpdateOneCustomer_GroupInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneCustomer_GroupInput\n    sort: SortUpdateOneCustomer_GroupInput\n    skip: Int\n  ): UpdateOneCustomer_GroupPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  customerGroupUpdateMany(\n    record: UpdateManyCustomer_GroupInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyCustomer_GroupInput\n    sort: SortUpdateManyCustomer_GroupInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyCustomer_GroupPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  customerGroupRemoveById(_id: MongoID!): RemoveByIdCustomer_GroupPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  customerGroupRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneCustomer_GroupInput\n    sort: SortRemoveOneCustomer_GroupInput\n  ): RemoveOneCustomer_GroupPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  customerGroupRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyCustomer_GroupInput!\n    limit: Int = 100\n  ): RemoveManyCustomer_GroupPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  departmentCreateOne(record: CreateOneDepartmentInput!): CreateOneDepartmentPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  departmentCreateMany(records: [CreateManyDepartmentInput!]!): CreateManyDepartmentPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  departmentUpdateById(_id: MongoID!, record: UpdateByIdDepartmentInput!): UpdateByIdDepartmentPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  departmentUpdateOne(\n    record: UpdateOneDepartmentInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneDepartmentInput\n    sort: SortUpdateOneDepartmentInput\n    skip: Int\n  ): UpdateOneDepartmentPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  departmentUpdateMany(\n    record: UpdateManyDepartmentInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyDepartmentInput\n    sort: SortUpdateManyDepartmentInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyDepartmentPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  departmentRemoveById(_id: MongoID!): RemoveByIdDepartmentPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  departmentRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneDepartmentInput\n    sort: SortRemoveOneDepartmentInput\n  ): RemoveOneDepartmentPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  departmentRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyDepartmentInput!\n    limit: Int = 100\n  ): RemoveManyDepartmentPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  EmployeeCreateOne(record: CreateOneEmployeeInput!): CreateOneEmployeePayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  EmployeeCreateMany(records: [CreateManyEmployeeInput!]!): CreateManyEmployeePayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  EmployeeUpdateById(_id: MongoID!, record: UpdateByIdEmployeeInput!): UpdateByIdEmployeePayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  EmployeeUpdateOne(\n    record: UpdateOneEmployeeInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneEmployeeInput\n    sort: SortUpdateOneEmployeeInput\n    skip: Int\n  ): UpdateOneEmployeePayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  EmployeeUpdateMany(\n    record: UpdateManyEmployeeInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyEmployeeInput\n    sort: SortUpdateManyEmployeeInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyEmployeePayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  EmployeeRemoveById(_id: MongoID!): RemoveByIdEmployeePayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  EmployeeRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneEmployeeInput\n    sort: SortRemoveOneEmployeeInput\n  ): RemoveOneEmployeePayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  EmployeeRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyEmployeeInput!\n    limit: Int = 100\n  ): RemoveManyEmployeePayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  productAdjustmentCreateOne(record: CreateOneProduct_AdjustmentInput!): CreateOneProduct_AdjustmentPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  productAdjustmentCreateMany(records: [CreateManyProduct_AdjustmentInput!]!): CreateManyProduct_AdjustmentPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productAdjustmentUpdateById(_id: MongoID!, record: UpdateByIdProduct_AdjustmentInput!): UpdateByIdProduct_AdjustmentPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productAdjustmentUpdateOne(\n    record: UpdateOneProduct_AdjustmentInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProduct_AdjustmentInput\n    sort: SortUpdateOneProduct_AdjustmentInput\n    skip: Int\n  ): UpdateOneProduct_AdjustmentPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productAdjustmentUpdateMany(\n    record: UpdateManyProduct_AdjustmentInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProduct_AdjustmentInput\n    sort: SortUpdateManyProduct_AdjustmentInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProduct_AdjustmentPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  productAdjustmentRemoveById(_id: MongoID!): RemoveByIdProduct_AdjustmentPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  productAdjustmentRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProduct_AdjustmentInput\n    sort: SortRemoveOneProduct_AdjustmentInput\n  ): RemoveOneProduct_AdjustmentPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productAdjustmentRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProduct_AdjustmentInput!\n    limit: Int = 100\n  ): RemoveManyProduct_AdjustmentPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  productPurchaseCreateOne(record: CreateOneProduct_PurchaseInput!): CreateOneProduct_PurchasePayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  productPurchaseCreateMany(records: [CreateManyProduct_PurchaseInput!]!): CreateManyProduct_PurchasePayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productPurchaseUpdateById(_id: MongoID!, record: UpdateByIdProduct_PurchaseInput!): UpdateByIdProduct_PurchasePayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productPurchaseUpdateOne(\n    record: UpdateOneProduct_PurchaseInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProduct_PurchaseInput\n    sort: SortUpdateOneProduct_PurchaseInput\n    skip: Int\n  ): UpdateOneProduct_PurchasePayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productPurchaseUpdateMany(\n    record: UpdateManyProduct_PurchaseInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProduct_PurchaseInput\n    sort: SortUpdateManyProduct_PurchaseInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProduct_PurchasePayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  productPurchaseRemoveById(_id: MongoID!): RemoveByIdProduct_PurchasePayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  productPurchaseRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProduct_PurchaseInput\n    sort: SortRemoveOneProduct_PurchaseInput\n  ): RemoveOneProduct_PurchasePayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productPurchaseRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProduct_PurchaseInput!\n    limit: Int = 100\n  ): RemoveManyProduct_PurchasePayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  productQuotationCreateOne(record: CreateOneProduct_QuotationInput!): CreateOneProduct_QuotationPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  productQuotationCreateMany(records: [CreateManyProduct_QuotationInput!]!): CreateManyProduct_QuotationPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productQuotationUpdateById(_id: MongoID!, record: UpdateByIdProduct_QuotationInput!): UpdateByIdProduct_QuotationPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productQuotationUpdateOne(\n    record: UpdateOneProduct_QuotationInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProduct_QuotationInput\n    sort: SortUpdateOneProduct_QuotationInput\n    skip: Int\n  ): UpdateOneProduct_QuotationPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productQuotationUpdateMany(\n    record: UpdateManyProduct_QuotationInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProduct_QuotationInput\n    sort: SortUpdateManyProduct_QuotationInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProduct_QuotationPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  productQuotationRemoveById(_id: MongoID!): RemoveByIdProduct_QuotationPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  productQuotationRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProduct_QuotationInput\n    sort: SortRemoveOneProduct_QuotationInput\n  ): RemoveOneProduct_QuotationPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productQuotationRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProduct_QuotationInput!\n    limit: Int = 100\n  ): RemoveManyProduct_QuotationPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  productReturnCreateOne(record: CreateOneProduct_ReturnInput!): CreateOneProduct_ReturnPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  productReturnCreateMany(records: [CreateManyProduct_ReturnInput!]!): CreateManyProduct_ReturnPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productReturnUpdateById(_id: MongoID!, record: UpdateByIdProduct_ReturnInput!): UpdateByIdProduct_ReturnPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productReturnUpdateOne(\n    record: UpdateOneProduct_ReturnInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProduct_ReturnInput\n    sort: SortUpdateOneProduct_ReturnInput\n    skip: Int\n  ): UpdateOneProduct_ReturnPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productReturnUpdateMany(\n    record: UpdateManyProduct_ReturnInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProduct_ReturnInput\n    sort: SortUpdateManyProduct_ReturnInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProduct_ReturnPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  productReturnRemoveById(_id: MongoID!): RemoveByIdProduct_ReturnPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  productReturnRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProduct_ReturnInput\n    sort: SortRemoveOneProduct_ReturnInput\n  ): RemoveOneProduct_ReturnPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productReturnRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProduct_ReturnInput!\n    limit: Int = 100\n  ): RemoveManyProduct_ReturnPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  productSaleCreateOne(record: CreateOneProduct_SaleInput!): CreateOneProduct_SalePayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  productSaleCreateMany(records: [CreateManyProduct_SaleInput!]!): CreateManyProduct_SalePayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productSaleUpdateById(_id: MongoID!, record: UpdateByIdProduct_SaleInput!): UpdateByIdProduct_SalePayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productSaleUpdateOne(\n    record: UpdateOneProduct_SaleInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProduct_SaleInput\n    sort: SortUpdateOneProduct_SaleInput\n    skip: Int\n  ): UpdateOneProduct_SalePayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productSaleUpdateMany(\n    record: UpdateManyProduct_SaleInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProduct_SaleInput\n    sort: SortUpdateManyProduct_SaleInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProduct_SalePayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  productSaleRemoveById(_id: MongoID!): RemoveByIdProduct_SalePayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  productSaleRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProduct_SaleInput\n    sort: SortRemoveOneProduct_SaleInput\n  ): RemoveOneProduct_SalePayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productSaleRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProduct_SaleInput!\n    limit: Int = 100\n  ): RemoveManyProduct_SalePayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  productSupplierCreateOne(record: CreateOneProduct_SupplierInput!): CreateOneProduct_SupplierPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  productSupplierCreateMany(records: [CreateManyProduct_SupplierInput!]!): CreateManyProduct_SupplierPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productSupplierUpdateById(_id: MongoID!, record: UpdateByIdProduct_SupplierInput!): UpdateByIdProduct_SupplierPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productSupplierUpdateOne(\n    record: UpdateOneProduct_SupplierInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProduct_SupplierInput\n    sort: SortUpdateOneProduct_SupplierInput\n    skip: Int\n  ): UpdateOneProduct_SupplierPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productSupplierUpdateMany(\n    record: UpdateManyProduct_SupplierInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProduct_SupplierInput\n    sort: SortUpdateManyProduct_SupplierInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProduct_SupplierPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  productSupplierRemoveById(_id: MongoID!): RemoveByIdProduct_SupplierPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  productSupplierRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProduct_SupplierInput\n    sort: SortRemoveOneProduct_SupplierInput\n  ): RemoveOneProduct_SupplierPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productSupplierRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProduct_SupplierInput!\n    limit: Int = 100\n  ): RemoveManyProduct_SupplierPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  ProductTransferCreateOne(record: CreateOneProduct_TransferInput!): CreateOneProduct_TransferPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  ProductTransferCreateMany(records: [CreateManyProduct_TransferInput!]!): CreateManyProduct_TransferPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  ProductTransferUpdateById(_id: MongoID!, record: UpdateByIdProduct_TransferInput!): UpdateByIdProduct_TransferPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  ProductTransferUpdateOne(\n    record: UpdateOneProduct_TransferInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProduct_TransferInput\n    sort: SortUpdateOneProduct_TransferInput\n    skip: Int\n  ): UpdateOneProduct_TransferPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  ProductTransferUpdateMany(\n    record: UpdateManyProduct_TransferInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProduct_TransferInput\n    sort: SortUpdateManyProduct_TransferInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProduct_TransferPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  ProductTransferRemoveById(_id: MongoID!): RemoveByIdProduct_TransferPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  ProductTransferRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProduct_TransferInput\n    sort: SortRemoveOneProduct_TransferInput\n  ): RemoveOneProduct_TransferPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  ProductTransferRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProduct_TransferInput!\n    limit: Int = 100\n  ): RemoveManyProduct_TransferPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  productVariantCreateOne(record: CreateOneProduct_VariantInput!): CreateOneProduct_VariantPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  productVariantCreateMany(records: [CreateManyProduct_VariantInput!]!): CreateManyProduct_VariantPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productVariantUpdateById(_id: MongoID!, record: UpdateByIdProduct_VariantInput!): UpdateByIdProduct_VariantPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productVariantUpdateOne(\n    record: UpdateOneProduct_VariantInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProduct_VariantInput\n    sort: SortUpdateOneProduct_VariantInput\n    skip: Int\n  ): UpdateOneProduct_VariantPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productVariantUpdateMany(\n    record: UpdateManyProduct_VariantInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProduct_VariantInput\n    sort: SortUpdateManyProduct_VariantInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProduct_VariantPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  productVariantRemoveById(_id: MongoID!): RemoveByIdProduct_VariantPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  productVariantRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProduct_VariantInput\n    sort: SortRemoveOneProduct_VariantInput\n  ): RemoveOneProduct_VariantPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productVariantRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProduct_VariantInput!\n    limit: Int = 100\n  ): RemoveManyProduct_VariantPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  productWarehouseCreateOne(record: CreateOneProduct_WarehouseInput!): CreateOneProduct_WarehousePayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  productWarehouseCreateMany(records: [CreateManyProduct_WarehouseInput!]!): CreateManyProduct_WarehousePayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productWarehouseUpdateById(_id: MongoID!, record: UpdateByIdProduct_WarehouseInput!): UpdateByIdProduct_WarehousePayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productWarehouseUpdateOne(\n    record: UpdateOneProduct_WarehouseInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProduct_WarehouseInput\n    sort: SortUpdateOneProduct_WarehouseInput\n    skip: Int\n  ): UpdateOneProduct_WarehousePayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productWarehouseUpdateMany(\n    record: UpdateManyProduct_WarehouseInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProduct_WarehouseInput\n    sort: SortUpdateManyProduct_WarehouseInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProduct_WarehousePayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  productWarehouseRemoveById(_id: MongoID!): RemoveByIdProduct_WarehousePayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  productWarehouseRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProduct_WarehouseInput\n    sort: SortRemoveOneProduct_WarehouseInput\n  ): RemoveOneProduct_WarehousePayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productWarehouseRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProduct_WarehouseInput!\n    limit: Int = 100\n  ): RemoveManyProduct_WarehousePayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  productCreateOne(record: CreateOneProductInput!): CreateOneProductPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  productCreateMany(records: [CreateManyProductInput!]!): CreateManyProductPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productUpdateById(_id: MongoID!, record: UpdateByIdProductInput!): UpdateByIdProductPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  productUpdateOne(\n    record: UpdateOneProductInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneProductInput\n    sort: SortUpdateOneProductInput\n    skip: Int\n  ): UpdateOneProductPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productUpdateMany(\n    record: UpdateManyProductInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyProductInput\n    sort: SortUpdateManyProductInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyProductPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  productRemoveById(_id: MongoID!): RemoveByIdProductPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  productRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneProductInput\n    sort: SortRemoveOneProductInput\n  ): RemoveOneProductPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  productRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyProductInput!\n    limit: Int = 100\n  ): RemoveManyProductPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  purchaseCreateOne(record: CreateOnePurchaseInput!): CreateOnePurchasePayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  purchaseCreateMany(records: [CreateManyPurchaseInput!]!): CreateManyPurchasePayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  purchaseUpdateById(_id: MongoID!, record: UpdateByIdPurchaseInput!): UpdateByIdPurchasePayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  purchaseUpdateOne(\n    record: UpdateOnePurchaseInput!\n\n    # Filter by fields\n    filter: FilterUpdateOnePurchaseInput\n    sort: SortUpdateOnePurchaseInput\n    skip: Int\n  ): UpdateOnePurchasePayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  purchaseUpdateMany(\n    record: UpdateManyPurchaseInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyPurchaseInput\n    sort: SortUpdateManyPurchaseInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyPurchasePayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  purchaseRemoveById(_id: MongoID!): RemoveByIdPurchasePayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  purchaseRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOnePurchaseInput\n    sort: SortRemoveOnePurchaseInput\n  ): RemoveOnePurchasePayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  purchaseRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyPurchaseInput!\n    limit: Int = 100\n  ): RemoveManyPurchasePayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  returnCreateOne(record: CreateOneReturnInput!): CreateOneReturnPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  returnCreateMany(records: [CreateManyReturnInput!]!): CreateManyReturnPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  returnUpdateById(_id: MongoID!, record: UpdateByIdReturnInput!): UpdateByIdReturnPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  returnUpdateOne(\n    record: UpdateOneReturnInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneReturnInput\n    sort: SortUpdateOneReturnInput\n    skip: Int\n  ): UpdateOneReturnPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  returnUpdateMany(\n    record: UpdateManyReturnInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyReturnInput\n    sort: SortUpdateManyReturnInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyReturnPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  returnRemoveById(_id: MongoID!): RemoveByIdReturnPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  returnRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneReturnInput\n    sort: SortRemoveOneReturnInput\n  ): RemoveOneReturnPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  returnRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyReturnInput!\n    limit: Int = 100\n  ): RemoveManyReturnPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  quotationCreateOne(record: CreateOneQuotationInput!): CreateOneQuotationPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  quotationCreateMany(records: [CreateManyQuotationInput!]!): CreateManyQuotationPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  quotationUpdateById(_id: MongoID!, record: UpdateByIdQuotationInput!): UpdateByIdQuotationPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  quotationUpdateOne(\n    record: UpdateOneQuotationInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneQuotationInput\n    sort: SortUpdateOneQuotationInput\n    skip: Int\n  ): UpdateOneQuotationPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  quotationUpdateMany(\n    record: UpdateManyQuotationInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyQuotationInput\n    sort: SortUpdateManyQuotationInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyQuotationPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  quotationRemoveById(_id: MongoID!): RemoveByIdQuotationPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  quotationRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneQuotationInput\n    sort: SortRemoveOneQuotationInput\n  ): RemoveOneQuotationPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  quotationRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyQuotationInput!\n    limit: Int = 100\n  ): RemoveManyQuotationPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  roleCreateOne(record: CreateOneRoleInput!): CreateOneRolePayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  roleCreateMany(records: [CreateManyRoleInput!]!): CreateManyRolePayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  roleUpdateById(_id: MongoID!, record: UpdateByIdRoleInput!): UpdateByIdRolePayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  roleUpdateOne(\n    record: UpdateOneRoleInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneRoleInput\n    sort: SortUpdateOneRoleInput\n    skip: Int\n  ): UpdateOneRolePayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  roleUpdateMany(\n    record: UpdateManyRoleInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyRoleInput\n    sort: SortUpdateManyRoleInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyRolePayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  roleRemoveById(_id: MongoID!): RemoveByIdRolePayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  roleRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneRoleInput\n    sort: SortRemoveOneRoleInput\n  ): RemoveOneRolePayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  roleRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyRoleInput!\n    limit: Int = 100\n  ): RemoveManyRolePayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  supplierCreateOne(record: CreateOneSupplierInput!): CreateOneSupplierPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  supplierCreateMany(records: [CreateManySupplierInput!]!): CreateManySupplierPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  supplierUpdateById(_id: MongoID!, record: UpdateByIdSupplierInput!): UpdateByIdSupplierPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  supplierUpdateOne(\n    record: UpdateOneSupplierInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneSupplierInput\n    sort: SortUpdateOneSupplierInput\n    skip: Int\n  ): UpdateOneSupplierPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  supplierUpdateMany(\n    record: UpdateManySupplierInput!\n\n    # Filter by fields\n    filter: FilterUpdateManySupplierInput\n    sort: SortUpdateManySupplierInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManySupplierPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  supplierRemoveById(_id: MongoID!): RemoveByIdSupplierPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  supplierRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneSupplierInput\n    sort: SortRemoveOneSupplierInput\n  ): RemoveOneSupplierPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  supplierRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManySupplierInput!\n    limit: Int = 100\n  ): RemoveManySupplierPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  taxCreateOne(record: CreateOneTaxInput!): CreateOneTaxPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  taxCreateMany(records: [CreateManyTaxInput!]!): CreateManyTaxPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  taxUpdateById(_id: MongoID!, record: UpdateByIdTaxInput!): UpdateByIdTaxPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  taxUpdateOne(\n    record: UpdateOneTaxInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneTaxInput\n    sort: SortUpdateOneTaxInput\n    skip: Int\n  ): UpdateOneTaxPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  taxUpdateMany(\n    record: UpdateManyTaxInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyTaxInput\n    sort: SortUpdateManyTaxInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyTaxPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  taxRemoveById(_id: MongoID!): RemoveByIdTaxPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  taxRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneTaxInput\n    sort: SortRemoveOneTaxInput\n  ): RemoveOneTaxPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  taxRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyTaxInput!\n    limit: Int = 100\n  ): RemoveManyTaxPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  transferCreateOne(record: CreateOneTransferInput!): CreateOneTransferPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  transferCreateMany(records: [CreateManyTransferInput!]!): CreateManyTransferPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  transferUpdateById(_id: MongoID!, record: UpdateByIdTransferInput!): UpdateByIdTransferPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  transferUpdateOne(\n    record: UpdateOneTransferInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneTransferInput\n    sort: SortUpdateOneTransferInput\n    skip: Int\n  ): UpdateOneTransferPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  transferUpdateMany(\n    record: UpdateManyTransferInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyTransferInput\n    sort: SortUpdateManyTransferInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyTransferPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  transferRemoveById(_id: MongoID!): RemoveByIdTransferPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  transferRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneTransferInput\n    sort: SortRemoveOneTransferInput\n  ): RemoveOneTransferPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  transferRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyTransferInput!\n    limit: Int = 100\n  ): RemoveManyTransferPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  unitCreateOne(record: CreateOneUnitInput!): CreateOneUnitPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  unitCreateMany(records: [CreateManyUnitInput!]!): CreateManyUnitPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  unitUpdateById(_id: MongoID!, record: UpdateByIdUnitInput!): UpdateByIdUnitPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  unitUpdateOne(\n    record: UpdateOneUnitInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneUnitInput\n    sort: SortUpdateOneUnitInput\n    skip: Int\n  ): UpdateOneUnitPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  unitUpdateMany(\n    record: UpdateManyUnitInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyUnitInput\n    sort: SortUpdateManyUnitInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyUnitPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  unitRemoveById(_id: MongoID!): RemoveByIdUnitPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  unitRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneUnitInput\n    sort: SortRemoveOneUnitInput\n  ): RemoveOneUnitPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  unitRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyUnitInput!\n    limit: Int = 100\n  ): RemoveManyUnitPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  userCreateOne(record: CreateOneUserInput!): CreateOneUserPayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  userCreateMany(records: [CreateManyUserInput!]!): CreateManyUserPayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  userUpdateById(_id: MongoID!, record: UpdateByIdUserInput!): UpdateByIdUserPayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  userUpdateOne(\n    record: UpdateOneUserInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneUserInput\n    sort: SortUpdateOneUserInput\n    skip: Int\n  ): UpdateOneUserPayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  userUpdateMany(\n    record: UpdateManyUserInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyUserInput\n    sort: SortUpdateManyUserInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyUserPayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  userRemoveById(_id: MongoID!): RemoveByIdUserPayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  userRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneUserInput\n    sort: SortRemoveOneUserInput\n  ): RemoveOneUserPayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  userRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyUserInput!\n    limit: Int = 100\n  ): RemoveManyUserPayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  valueCreateOne(record: CreateOneValueInput!): CreateOneValuePayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  valueCreateMany(records: [CreateManyValueInput!]!): CreateManyValuePayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  valueUpdateById(_id: MongoID!, record: UpdateByIdValueInput!): UpdateByIdValuePayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  valueUpdateOne(\n    record: UpdateOneValueInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneValueInput\n    sort: SortUpdateOneValueInput\n    skip: Int\n  ): UpdateOneValuePayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  valueUpdateMany(\n    record: UpdateManyValueInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyValueInput\n    sort: SortUpdateManyValueInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyValuePayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  valueRemoveById(_id: MongoID!): RemoveByIdValuePayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  valueRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneValueInput\n    sort: SortRemoveOneValueInput\n  ): RemoveOneValuePayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  valueRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyValueInput!\n    limit: Int = 100\n  ): RemoveManyValuePayload\n\n  # Create one document with mongoose defaults, setters, hooks and validation\n  warehouseCreateOne(record: CreateOneWarehouseInput!): CreateOneWarehousePayload\n\n  # Creates Many documents with mongoose defaults, setters, hooks and validation\n  warehouseCreateMany(records: [CreateManyWarehouseInput!]!): CreateManyWarehousePayload\n\n  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  warehouseUpdateById(_id: MongoID!, record: UpdateByIdWarehouseInput!): UpdateByIdWarehousePayload\n\n  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.\n  warehouseUpdateOne(\n    record: UpdateOneWarehouseInput!\n\n    # Filter by fields\n    filter: FilterUpdateOneWarehouseInput\n    sort: SortUpdateOneWarehouseInput\n    skip: Int\n  ): UpdateOneWarehousePayload\n\n  # Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  warehouseUpdateMany(\n    record: UpdateManyWarehouseInput!\n\n    # Filter by fields\n    filter: FilterUpdateManyWarehouseInput\n    sort: SortUpdateManyWarehouseInput\n    skip: Int\n    limit: Int = 100\n  ): UpdateManyWarehousePayload\n\n  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.\n  warehouseRemoveById(_id: MongoID!): RemoveByIdWarehousePayload\n\n  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.\n  warehouseRemoveOne(\n    # Filter by fields\n    filter: FilterRemoveOneWarehouseInput\n    sort: SortRemoveOneWarehouseInput\n  ): RemoveOneWarehousePayload\n\n  # Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. \n  warehouseRemoveMany(\n    # Filter by fields\n    filter: FilterRemoveManyWarehouseInput!\n    limit: Int = 100\n  ): RemoveManyWarehousePayload\n}\n\ntype CreateOneAccountPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Account\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ninterface ErrorInterface {\n  # Generic error message\n  message: String\n}\n\n#\ninput CreateOneAccountInput {\n  account_no: String!\n  name: String!\n  initial_balance: Float!\n  total_Balance: Float!\n  note: String\n  is_default: Boolean!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyAccountPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Account!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyAccountInput {\n  account_no: String!\n  name: String!\n  initial_balance: Float!\n  total_Balance: Float!\n  note: String\n  is_default: Boolean!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdAccountPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Account\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneAccountPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Account\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneAccountOperatorsInput\n  OR: [FilterUpdateOneAccountInput!]\n  AND: [FilterUpdateOneAccountInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneAccountOperatorsInput {\n  account_no: FilterUpdateOneAccountAccount_noOperatorsInput\n  name: FilterUpdateOneAccountNameOperatorsInput\n  note: FilterUpdateOneAccountNoteOperatorsInput\n  _id: FilterUpdateOneAccount_idOperatorsInput\n  createdAt: FilterUpdateOneAccountCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneAccountAccount_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneAccountNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneAccountNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneAccount_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneAccountCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneAccountInput {\n  _ID_ASC\n  _ID_DESC\n  ACCOUNT_NO_ASC\n  ACCOUNT_NO_DESC\n  NAME_ASC\n  NAME_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyAccountPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyAccountOperatorsInput\n  OR: [FilterUpdateManyAccountInput!]\n  AND: [FilterUpdateManyAccountInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyAccountOperatorsInput {\n  account_no: FilterUpdateManyAccountAccount_noOperatorsInput\n  name: FilterUpdateManyAccountNameOperatorsInput\n  note: FilterUpdateManyAccountNoteOperatorsInput\n  _id: FilterUpdateManyAccount_idOperatorsInput\n  createdAt: FilterUpdateManyAccountCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyAccountAccount_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyAccountNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyAccountNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyAccount_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyAccountCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyAccountInput {\n  _ID_ASC\n  _ID_DESC\n  ACCOUNT_NO_ASC\n  ACCOUNT_NO_DESC\n  NAME_ASC\n  NAME_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdAccountPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Account\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneAccountPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Account\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneAccountOperatorsInput\n  OR: [FilterRemoveOneAccountInput!]\n  AND: [FilterRemoveOneAccountInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneAccountOperatorsInput {\n  account_no: FilterRemoveOneAccountAccount_noOperatorsInput\n  name: FilterRemoveOneAccountNameOperatorsInput\n  note: FilterRemoveOneAccountNoteOperatorsInput\n  _id: FilterRemoveOneAccount_idOperatorsInput\n  createdAt: FilterRemoveOneAccountCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneAccountAccount_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneAccountNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneAccountNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneAccount_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneAccountCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneAccountInput {\n  _ID_ASC\n  _ID_DESC\n  ACCOUNT_NO_ASC\n  ACCOUNT_NO_DESC\n  NAME_ASC\n  NAME_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyAccountPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyAccountInput {\n  account_no: String\n  name: String\n  initial_balance: Float\n  total_Balance: Float\n  note: String\n  is_default: Boolean\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyAccountOperatorsInput\n  OR: [FilterRemoveManyAccountInput!]\n  AND: [FilterRemoveManyAccountInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyAccountOperatorsInput {\n  account_no: FilterRemoveManyAccountAccount_noOperatorsInput\n  name: FilterRemoveManyAccountNameOperatorsInput\n  note: FilterRemoveManyAccountNoteOperatorsInput\n  _id: FilterRemoveManyAccount_idOperatorsInput\n  createdAt: FilterRemoveManyAccountCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyAccountAccount_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyAccountNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyAccountNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyAccount_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyAccountCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneAdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneAdjustmentInput {\n  reference_no: String!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  warehouse: MongoID!\n  product_adjustments: [MongoID]!\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyAdjustmentPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Adjustment!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyAdjustmentInput {\n  reference_no: String!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  warehouse: MongoID!\n  product_adjustments: [MongoID]!\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdAdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneAdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneAdjustmentOperatorsInput\n  OR: [FilterUpdateOneAdjustmentInput!]\n  AND: [FilterUpdateOneAdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneAdjustmentOperatorsInput {\n  reference_no: FilterUpdateOneAdjustmentReference_noOperatorsInput\n  document: FilterUpdateOneAdjustmentDocumentOperatorsInput\n  note: FilterUpdateOneAdjustmentNoteOperatorsInput\n  _id: FilterUpdateOneAdjustment_idOperatorsInput\n  createdAt: FilterUpdateOneAdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneAdjustmentReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneAdjustmentDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneAdjustmentNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneAdjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneAdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneAdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyAdjustmentPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyAdjustmentOperatorsInput\n  OR: [FilterUpdateManyAdjustmentInput!]\n  AND: [FilterUpdateManyAdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyAdjustmentOperatorsInput {\n  reference_no: FilterUpdateManyAdjustmentReference_noOperatorsInput\n  document: FilterUpdateManyAdjustmentDocumentOperatorsInput\n  note: FilterUpdateManyAdjustmentNoteOperatorsInput\n  _id: FilterUpdateManyAdjustment_idOperatorsInput\n  createdAt: FilterUpdateManyAdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyAdjustmentReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyAdjustmentDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyAdjustmentNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyAdjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyAdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyAdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdAdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneAdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneAdjustmentOperatorsInput\n  OR: [FilterRemoveOneAdjustmentInput!]\n  AND: [FilterRemoveOneAdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneAdjustmentOperatorsInput {\n  reference_no: FilterRemoveOneAdjustmentReference_noOperatorsInput\n  document: FilterRemoveOneAdjustmentDocumentOperatorsInput\n  note: FilterRemoveOneAdjustmentNoteOperatorsInput\n  _id: FilterRemoveOneAdjustment_idOperatorsInput\n  createdAt: FilterRemoveOneAdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneAdjustmentReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneAdjustmentDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneAdjustmentNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneAdjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneAdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneAdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyAdjustmentPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyAdjustmentInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  warehouse: MongoID\n  product_adjustments: [MongoID]\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyAdjustmentOperatorsInput\n  OR: [FilterRemoveManyAdjustmentInput!]\n  AND: [FilterRemoveManyAdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyAdjustmentOperatorsInput {\n  reference_no: FilterRemoveManyAdjustmentReference_noOperatorsInput\n  document: FilterRemoveManyAdjustmentDocumentOperatorsInput\n  note: FilterRemoveManyAdjustmentNoteOperatorsInput\n  _id: FilterRemoveManyAdjustment_idOperatorsInput\n  createdAt: FilterRemoveManyAdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyAdjustmentReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyAdjustmentDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyAdjustmentNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyAdjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyAdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneAttributePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Attribute\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneAttributeInput {\n  name: String!\n  values: [MongoID]!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyAttributePayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Attribute!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyAttributeInput {\n  name: String!\n  values: [MongoID]!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdAttributePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Attribute\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneAttributePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Attribute\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneAttributeOperatorsInput\n  OR: [FilterUpdateOneAttributeInput!]\n  AND: [FilterUpdateOneAttributeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneAttributeOperatorsInput {\n  name: FilterUpdateOneAttributeNameOperatorsInput\n  _id: FilterUpdateOneAttribute_idOperatorsInput\n  createdAt: FilterUpdateOneAttributeCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneAttributeNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneAttribute_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneAttributeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneAttributeInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyAttributePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyAttributeOperatorsInput\n  OR: [FilterUpdateManyAttributeInput!]\n  AND: [FilterUpdateManyAttributeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyAttributeOperatorsInput {\n  name: FilterUpdateManyAttributeNameOperatorsInput\n  _id: FilterUpdateManyAttribute_idOperatorsInput\n  createdAt: FilterUpdateManyAttributeCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyAttributeNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyAttribute_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyAttributeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyAttributeInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdAttributePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Attribute\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneAttributePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Attribute\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneAttributeOperatorsInput\n  OR: [FilterRemoveOneAttributeInput!]\n  AND: [FilterRemoveOneAttributeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneAttributeOperatorsInput {\n  name: FilterRemoveOneAttributeNameOperatorsInput\n  _id: FilterRemoveOneAttribute_idOperatorsInput\n  createdAt: FilterRemoveOneAttributeCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneAttributeNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneAttribute_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneAttributeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneAttributeInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyAttributePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyAttributeInput {\n  name: String\n  values: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyAttributeOperatorsInput\n  OR: [FilterRemoveManyAttributeInput!]\n  AND: [FilterRemoveManyAttributeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyAttributeOperatorsInput {\n  name: FilterRemoveManyAttributeNameOperatorsInput\n  _id: FilterRemoveManyAttribute_idOperatorsInput\n  createdAt: FilterRemoveManyAttributeCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyAttributeNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyAttribute_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyAttributeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneBrandPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Brand\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneBrandInput {\n  name: String!\n  image: String\n  products: [MongoID]!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyBrandPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Brand!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyBrandInput {\n  name: String!\n  image: String\n  products: [MongoID]!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdBrandPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Brand\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneBrandPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Brand\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneBrandOperatorsInput\n  OR: [FilterUpdateOneBrandInput!]\n  AND: [FilterUpdateOneBrandInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneBrandOperatorsInput {\n  name: FilterUpdateOneBrandNameOperatorsInput\n  image: FilterUpdateOneBrandImageOperatorsInput\n  _id: FilterUpdateOneBrand_idOperatorsInput\n  createdAt: FilterUpdateOneBrandCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneBrandNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneBrandImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneBrand_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneBrandCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneBrandInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyBrandPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyBrandOperatorsInput\n  OR: [FilterUpdateManyBrandInput!]\n  AND: [FilterUpdateManyBrandInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyBrandOperatorsInput {\n  name: FilterUpdateManyBrandNameOperatorsInput\n  image: FilterUpdateManyBrandImageOperatorsInput\n  _id: FilterUpdateManyBrand_idOperatorsInput\n  createdAt: FilterUpdateManyBrandCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyBrandNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyBrandImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyBrand_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyBrandCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyBrandInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdBrandPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Brand\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneBrandPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Brand\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneBrandOperatorsInput\n  OR: [FilterRemoveOneBrandInput!]\n  AND: [FilterRemoveOneBrandInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneBrandOperatorsInput {\n  name: FilterRemoveOneBrandNameOperatorsInput\n  image: FilterRemoveOneBrandImageOperatorsInput\n  _id: FilterRemoveOneBrand_idOperatorsInput\n  createdAt: FilterRemoveOneBrandCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneBrandNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneBrandImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneBrand_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneBrandCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneBrandInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyBrandPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyBrandInput {\n  name: String\n  image: String\n  products: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyBrandOperatorsInput\n  OR: [FilterRemoveManyBrandInput!]\n  AND: [FilterRemoveManyBrandInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyBrandOperatorsInput {\n  name: FilterRemoveManyBrandNameOperatorsInput\n  image: FilterRemoveManyBrandImageOperatorsInput\n  _id: FilterRemoveManyBrand_idOperatorsInput\n  createdAt: FilterRemoveManyBrandCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyBrandNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyBrandImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyBrand_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyBrandCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneCategoryPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Category\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneCategoryInput {\n  name: String!\n  image: String\n  variants: [MongoID]!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyCategoryPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Category!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyCategoryInput {\n  name: String!\n  image: String\n  variants: [MongoID]!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdCategoryPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Category\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneCategoryPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Category\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneCategoryOperatorsInput\n  OR: [FilterUpdateOneCategoryInput!]\n  AND: [FilterUpdateOneCategoryInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneCategoryOperatorsInput {\n  name: FilterUpdateOneCategoryNameOperatorsInput\n  image: FilterUpdateOneCategoryImageOperatorsInput\n  _id: FilterUpdateOneCategory_idOperatorsInput\n  createdAt: FilterUpdateOneCategoryCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneCategoryNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneCategoryImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneCategory_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneCategoryCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneCategoryInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyCategoryPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyCategoryOperatorsInput\n  OR: [FilterUpdateManyCategoryInput!]\n  AND: [FilterUpdateManyCategoryInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyCategoryOperatorsInput {\n  name: FilterUpdateManyCategoryNameOperatorsInput\n  image: FilterUpdateManyCategoryImageOperatorsInput\n  _id: FilterUpdateManyCategory_idOperatorsInput\n  createdAt: FilterUpdateManyCategoryCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyCategoryNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyCategoryImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyCategory_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyCategoryCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyCategoryInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdCategoryPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Category\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneCategoryPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Category\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneCategoryOperatorsInput\n  OR: [FilterRemoveOneCategoryInput!]\n  AND: [FilterRemoveOneCategoryInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneCategoryOperatorsInput {\n  name: FilterRemoveOneCategoryNameOperatorsInput\n  image: FilterRemoveOneCategoryImageOperatorsInput\n  _id: FilterRemoveOneCategory_idOperatorsInput\n  createdAt: FilterRemoveOneCategoryCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneCategoryNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneCategoryImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneCategory_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneCategoryCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneCategoryInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyCategoryPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyCategoryInput {\n  name: String\n  image: String\n  variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyCategoryOperatorsInput\n  OR: [FilterRemoveManyCategoryInput!]\n  AND: [FilterRemoveManyCategoryInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyCategoryOperatorsInput {\n  name: FilterRemoveManyCategoryNameOperatorsInput\n  image: FilterRemoveManyCategoryImageOperatorsInput\n  _id: FilterRemoveManyCategory_idOperatorsInput\n  createdAt: FilterRemoveManyCategoryCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyCategoryNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyCategoryImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyCategory_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyCategoryCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneCouponPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Coupon\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneCouponInput {\n  code: String!\n  coupon_type: String!\n  amount: Float!\n  min_amount: Float!\n  user: MongoID\n  qty: Float!\n  used: Boolean!\n  expired_date: Date!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyCouponPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Coupon!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyCouponInput {\n  code: String!\n  coupon_type: String!\n  amount: Float!\n  min_amount: Float!\n  user: MongoID\n  qty: Float!\n  used: Boolean!\n  expired_date: Date!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdCouponPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Coupon\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneCouponPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Coupon\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneCouponOperatorsInput\n  OR: [FilterUpdateOneCouponInput!]\n  AND: [FilterUpdateOneCouponInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneCouponOperatorsInput {\n  code: FilterUpdateOneCouponCodeOperatorsInput\n  _id: FilterUpdateOneCoupon_idOperatorsInput\n  createdAt: FilterUpdateOneCouponCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneCouponCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneCoupon_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneCouponCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneCouponInput {\n  _ID_ASC\n  _ID_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyCouponPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyCouponOperatorsInput\n  OR: [FilterUpdateManyCouponInput!]\n  AND: [FilterUpdateManyCouponInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyCouponOperatorsInput {\n  code: FilterUpdateManyCouponCodeOperatorsInput\n  _id: FilterUpdateManyCoupon_idOperatorsInput\n  createdAt: FilterUpdateManyCouponCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyCouponCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyCoupon_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyCouponCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyCouponInput {\n  _ID_ASC\n  _ID_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdCouponPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Coupon\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneCouponPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Coupon\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneCouponOperatorsInput\n  OR: [FilterRemoveOneCouponInput!]\n  AND: [FilterRemoveOneCouponInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneCouponOperatorsInput {\n  code: FilterRemoveOneCouponCodeOperatorsInput\n  _id: FilterRemoveOneCoupon_idOperatorsInput\n  createdAt: FilterRemoveOneCouponCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneCouponCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneCoupon_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneCouponCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneCouponInput {\n  _ID_ASC\n  _ID_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyCouponPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyCouponInput {\n  code: String\n  coupon_type: String\n  amount: Float\n  min_amount: Float\n  user: MongoID\n  qty: Float\n  used: Boolean\n  expired_date: Date\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyCouponOperatorsInput\n  OR: [FilterRemoveManyCouponInput!]\n  AND: [FilterRemoveManyCouponInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyCouponOperatorsInput {\n  code: FilterRemoveManyCouponCodeOperatorsInput\n  _id: FilterRemoveManyCoupon_idOperatorsInput\n  createdAt: FilterRemoveManyCouponCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyCouponCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyCoupon_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyCouponCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneCustomerPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Customer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneCustomerInput {\n  customer_group: MongoID!\n  company_name: String!\n  name: String!\n  image: String!\n  email: String!\n  phone_number: Float!\n  gender: String!\n  user: MongoID\n  address: String!\n  city: String!\n  country: String!\n  tax_no: String\n  deposit: Float!\n  expense: Float!\n  is_active: Boolean!\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyCustomerPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Customer!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyCustomerInput {\n  customer_group: MongoID!\n  company_name: String!\n  name: String!\n  image: String!\n  email: String!\n  phone_number: Float!\n  gender: String!\n  user: MongoID\n  address: String!\n  city: String!\n  country: String!\n  tax_no: String\n  deposit: Float!\n  expense: Float!\n  is_active: Boolean!\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdCustomerPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Customer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneCustomerPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Customer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneCustomerOperatorsInput\n  OR: [FilterUpdateOneCustomerInput!]\n  AND: [FilterUpdateOneCustomerInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneCustomerOperatorsInput {\n  email: FilterUpdateOneCustomerEmailOperatorsInput\n  phone_number: FilterUpdateOneCustomerPhone_numberOperatorsInput\n  tax_no: FilterUpdateOneCustomerTax_noOperatorsInput\n  _id: FilterUpdateOneCustomer_idOperatorsInput\n  createdAt: FilterUpdateOneCustomerCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneCustomerEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneCustomerPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateOneCustomerTax_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneCustomer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneCustomerCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneCustomerInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  TAX_NO_ASC\n  TAX_NO_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyCustomerPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyCustomerOperatorsInput\n  OR: [FilterUpdateManyCustomerInput!]\n  AND: [FilterUpdateManyCustomerInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyCustomerOperatorsInput {\n  email: FilterUpdateManyCustomerEmailOperatorsInput\n  phone_number: FilterUpdateManyCustomerPhone_numberOperatorsInput\n  tax_no: FilterUpdateManyCustomerTax_noOperatorsInput\n  _id: FilterUpdateManyCustomer_idOperatorsInput\n  createdAt: FilterUpdateManyCustomerCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyCustomerEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyCustomerPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateManyCustomerTax_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyCustomer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyCustomerCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyCustomerInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  TAX_NO_ASC\n  TAX_NO_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdCustomerPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Customer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneCustomerPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Customer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneCustomerOperatorsInput\n  OR: [FilterRemoveOneCustomerInput!]\n  AND: [FilterRemoveOneCustomerInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneCustomerOperatorsInput {\n  email: FilterRemoveOneCustomerEmailOperatorsInput\n  phone_number: FilterRemoveOneCustomerPhone_numberOperatorsInput\n  tax_no: FilterRemoveOneCustomerTax_noOperatorsInput\n  _id: FilterRemoveOneCustomer_idOperatorsInput\n  createdAt: FilterRemoveOneCustomerCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneCustomerEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneCustomerPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveOneCustomerTax_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneCustomer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneCustomerCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneCustomerInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  TAX_NO_ASC\n  TAX_NO_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyCustomerPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyCustomerInput {\n  customer_group: MongoID\n  company_name: String\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  address: String\n  city: String\n  country: String\n  tax_no: String\n  deposit: Float\n  expense: Float\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyCustomerOperatorsInput\n  OR: [FilterRemoveManyCustomerInput!]\n  AND: [FilterRemoveManyCustomerInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyCustomerOperatorsInput {\n  email: FilterRemoveManyCustomerEmailOperatorsInput\n  phone_number: FilterRemoveManyCustomerPhone_numberOperatorsInput\n  tax_no: FilterRemoveManyCustomerTax_noOperatorsInput\n  _id: FilterRemoveManyCustomer_idOperatorsInput\n  createdAt: FilterRemoveManyCustomerCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyCustomerEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyCustomerPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveManyCustomerTax_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyCustomer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyCustomerCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneCustomer_GroupPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Customer_Group\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneCustomer_GroupInput {\n  name: String!\n  percentage: Float!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyCustomer_GroupPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Customer_Group!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyCustomer_GroupInput {\n  name: String!\n  percentage: Float!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdCustomer_GroupPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Customer_Group\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneCustomer_GroupPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Customer_Group\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneCustomer_GroupOperatorsInput\n  OR: [FilterUpdateOneCustomer_GroupInput!]\n  AND: [FilterUpdateOneCustomer_GroupInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneCustomer_GroupOperatorsInput {\n  name: FilterUpdateOneCustomer_GroupNameOperatorsInput\n  _id: FilterUpdateOneCustomer_Group_idOperatorsInput\n  createdAt: FilterUpdateOneCustomer_GroupCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneCustomer_GroupNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneCustomer_Group_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneCustomer_GroupCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneCustomer_GroupInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyCustomer_GroupPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyCustomer_GroupOperatorsInput\n  OR: [FilterUpdateManyCustomer_GroupInput!]\n  AND: [FilterUpdateManyCustomer_GroupInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyCustomer_GroupOperatorsInput {\n  name: FilterUpdateManyCustomer_GroupNameOperatorsInput\n  _id: FilterUpdateManyCustomer_Group_idOperatorsInput\n  createdAt: FilterUpdateManyCustomer_GroupCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyCustomer_GroupNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyCustomer_Group_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyCustomer_GroupCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyCustomer_GroupInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdCustomer_GroupPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Customer_Group\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneCustomer_GroupPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Customer_Group\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneCustomer_GroupOperatorsInput\n  OR: [FilterRemoveOneCustomer_GroupInput!]\n  AND: [FilterRemoveOneCustomer_GroupInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneCustomer_GroupOperatorsInput {\n  name: FilterRemoveOneCustomer_GroupNameOperatorsInput\n  _id: FilterRemoveOneCustomer_Group_idOperatorsInput\n  createdAt: FilterRemoveOneCustomer_GroupCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneCustomer_GroupNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneCustomer_Group_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneCustomer_GroupCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneCustomer_GroupInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyCustomer_GroupPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyCustomer_GroupInput {\n  name: String\n  percentage: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyCustomer_GroupOperatorsInput\n  OR: [FilterRemoveManyCustomer_GroupInput!]\n  AND: [FilterRemoveManyCustomer_GroupInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyCustomer_GroupOperatorsInput {\n  name: FilterRemoveManyCustomer_GroupNameOperatorsInput\n  _id: FilterRemoveManyCustomer_Group_idOperatorsInput\n  createdAt: FilterRemoveManyCustomer_GroupCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyCustomer_GroupNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyCustomer_Group_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyCustomer_GroupCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneDepartmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Department\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneDepartmentInput {\n  name: String!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyDepartmentPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Department!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyDepartmentInput {\n  name: String!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdDepartmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Department\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdDepartmentInput {\n  name: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneDepartmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Department\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneDepartmentInput {\n  name: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneDepartmentInput {\n  name: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneDepartmentOperatorsInput\n  OR: [FilterUpdateOneDepartmentInput!]\n  AND: [FilterUpdateOneDepartmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneDepartmentOperatorsInput {\n  name: FilterUpdateOneDepartmentNameOperatorsInput\n  _id: FilterUpdateOneDepartment_idOperatorsInput\n  createdAt: FilterUpdateOneDepartmentCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneDepartmentNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneDepartment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneDepartmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneDepartmentInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyDepartmentPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyDepartmentInput {\n  name: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyDepartmentInput {\n  name: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyDepartmentOperatorsInput\n  OR: [FilterUpdateManyDepartmentInput!]\n  AND: [FilterUpdateManyDepartmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyDepartmentOperatorsInput {\n  name: FilterUpdateManyDepartmentNameOperatorsInput\n  _id: FilterUpdateManyDepartment_idOperatorsInput\n  createdAt: FilterUpdateManyDepartmentCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyDepartmentNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyDepartment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyDepartmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyDepartmentInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdDepartmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Department\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneDepartmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Department\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneDepartmentInput {\n  name: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneDepartmentOperatorsInput\n  OR: [FilterRemoveOneDepartmentInput!]\n  AND: [FilterRemoveOneDepartmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneDepartmentOperatorsInput {\n  name: FilterRemoveOneDepartmentNameOperatorsInput\n  _id: FilterRemoveOneDepartment_idOperatorsInput\n  createdAt: FilterRemoveOneDepartmentCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneDepartmentNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneDepartment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneDepartmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneDepartmentInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyDepartmentPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyDepartmentInput {\n  name: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyDepartmentOperatorsInput\n  OR: [FilterRemoveManyDepartmentInput!]\n  AND: [FilterRemoveManyDepartmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyDepartmentOperatorsInput {\n  name: FilterRemoveManyDepartmentNameOperatorsInput\n  _id: FilterRemoveManyDepartment_idOperatorsInput\n  createdAt: FilterRemoveManyDepartmentCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyDepartmentNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyDepartment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyDepartmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneEmployeePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Employee\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneEmployeeInput {\n  name: String!\n  image: String!\n  email: String!\n  phone_number: Float!\n  gender: String!\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]!\n  address: String!\n  city: String!\n  country: String!\n  is_active: Boolean!\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyEmployeePayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Employee!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyEmployeeInput {\n  name: String!\n  image: String!\n  email: String!\n  phone_number: Float!\n  gender: String!\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]!\n  address: String!\n  city: String!\n  country: String!\n  is_active: Boolean!\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdEmployeePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Employee\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneEmployeePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Employee\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneEmployeeOperatorsInput\n  OR: [FilterUpdateOneEmployeeInput!]\n  AND: [FilterUpdateOneEmployeeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneEmployeeOperatorsInput {\n  email: FilterUpdateOneEmployeeEmailOperatorsInput\n  phone_number: FilterUpdateOneEmployeePhone_numberOperatorsInput\n  _id: FilterUpdateOneEmployee_idOperatorsInput\n  createdAt: FilterUpdateOneEmployeeCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneEmployeeEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneEmployeePhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateOneEmployee_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneEmployeeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneEmployeeInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyEmployeePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyEmployeeOperatorsInput\n  OR: [FilterUpdateManyEmployeeInput!]\n  AND: [FilterUpdateManyEmployeeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyEmployeeOperatorsInput {\n  email: FilterUpdateManyEmployeeEmailOperatorsInput\n  phone_number: FilterUpdateManyEmployeePhone_numberOperatorsInput\n  _id: FilterUpdateManyEmployee_idOperatorsInput\n  createdAt: FilterUpdateManyEmployeeCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyEmployeeEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyEmployeePhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateManyEmployee_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyEmployeeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyEmployeeInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdEmployeePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Employee\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneEmployeePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Employee\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneEmployeeOperatorsInput\n  OR: [FilterRemoveOneEmployeeInput!]\n  AND: [FilterRemoveOneEmployeeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneEmployeeOperatorsInput {\n  email: FilterRemoveOneEmployeeEmailOperatorsInput\n  phone_number: FilterRemoveOneEmployeePhone_numberOperatorsInput\n  _id: FilterRemoveOneEmployee_idOperatorsInput\n  createdAt: FilterRemoveOneEmployeeCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneEmployeeEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneEmployeePhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveOneEmployee_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneEmployeeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneEmployeeInput {\n  _ID_ASC\n  _ID_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyEmployeePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyEmployeeInput {\n  name: String\n  image: String\n  email: String\n  phone_number: Float\n  gender: String\n  user: MongoID\n  department: MongoID\n  payrolls: [MongoID]\n  address: String\n  city: String\n  country: String\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyEmployeeOperatorsInput\n  OR: [FilterRemoveManyEmployeeInput!]\n  AND: [FilterRemoveManyEmployeeInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyEmployeeOperatorsInput {\n  email: FilterRemoveManyEmployeeEmailOperatorsInput\n  phone_number: FilterRemoveManyEmployeePhone_numberOperatorsInput\n  _id: FilterRemoveManyEmployee_idOperatorsInput\n  createdAt: FilterRemoveManyEmployeeCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyEmployeeEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyEmployeePhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveManyEmployee_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyEmployeeCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProduct_AdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product_Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProduct_AdjustmentInput {\n  adjustment: MongoID!\n  product_variant: MongoID!\n  qty: Float!\n  action: String!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProduct_AdjustmentPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product_Adjustment!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProduct_AdjustmentInput {\n  adjustment: MongoID!\n  product_variant: MongoID!\n  qty: Float!\n  action: String!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProduct_AdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProduct_AdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProduct_AdjustmentOperatorsInput\n  OR: [FilterUpdateOneProduct_AdjustmentInput!]\n  AND: [FilterUpdateOneProduct_AdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProduct_AdjustmentOperatorsInput {\n  adjustment: FilterUpdateOneProduct_AdjustmentAdjustmentOperatorsInput\n  _id: FilterUpdateOneProduct_Adjustment_idOperatorsInput\n  createdAt: FilterUpdateOneProduct_AdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProduct_AdjustmentAdjustmentOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_Adjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_AdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProduct_AdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  ADJUSTMENT_ASC\n  ADJUSTMENT_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProduct_AdjustmentPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProduct_AdjustmentOperatorsInput\n  OR: [FilterUpdateManyProduct_AdjustmentInput!]\n  AND: [FilterUpdateManyProduct_AdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProduct_AdjustmentOperatorsInput {\n  adjustment: FilterUpdateManyProduct_AdjustmentAdjustmentOperatorsInput\n  _id: FilterUpdateManyProduct_Adjustment_idOperatorsInput\n  createdAt: FilterUpdateManyProduct_AdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProduct_AdjustmentAdjustmentOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_Adjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_AdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProduct_AdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  ADJUSTMENT_ASC\n  ADJUSTMENT_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProduct_AdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProduct_AdjustmentPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Adjustment\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProduct_AdjustmentOperatorsInput\n  OR: [FilterRemoveOneProduct_AdjustmentInput!]\n  AND: [FilterRemoveOneProduct_AdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProduct_AdjustmentOperatorsInput {\n  adjustment: FilterRemoveOneProduct_AdjustmentAdjustmentOperatorsInput\n  _id: FilterRemoveOneProduct_Adjustment_idOperatorsInput\n  createdAt: FilterRemoveOneProduct_AdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProduct_AdjustmentAdjustmentOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_Adjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_AdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProduct_AdjustmentInput {\n  _ID_ASC\n  _ID_DESC\n  ADJUSTMENT_ASC\n  ADJUSTMENT_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProduct_AdjustmentPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProduct_AdjustmentInput {\n  adjustment: MongoID\n  product_variant: MongoID\n  qty: Float\n  action: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProduct_AdjustmentOperatorsInput\n  OR: [FilterRemoveManyProduct_AdjustmentInput!]\n  AND: [FilterRemoveManyProduct_AdjustmentInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProduct_AdjustmentOperatorsInput {\n  adjustment: FilterRemoveManyProduct_AdjustmentAdjustmentOperatorsInput\n  _id: FilterRemoveManyProduct_Adjustment_idOperatorsInput\n  createdAt: FilterRemoveManyProduct_AdjustmentCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProduct_AdjustmentAdjustmentOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_Adjustment_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_AdjustmentCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProduct_PurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product_Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProduct_PurchaseInput {\n  purchase: MongoID!\n  product_variant: MongoID!\n  unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_cost: Float!\n  total: Float!\n  status: EnumProduct_PurchaseStatus!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProduct_PurchasePayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product_Purchase!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProduct_PurchaseInput {\n  purchase: MongoID!\n  product_variant: MongoID!\n  unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_cost: Float!\n  total: Float!\n  status: EnumProduct_PurchaseStatus!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProduct_PurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProduct_PurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProduct_PurchaseOperatorsInput\n  OR: [FilterUpdateOneProduct_PurchaseInput!]\n  AND: [FilterUpdateOneProduct_PurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProduct_PurchaseOperatorsInput {\n  _id: FilterUpdateOneProduct_Purchase_idOperatorsInput\n  createdAt: FilterUpdateOneProduct_PurchaseCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProduct_Purchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_PurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProduct_PurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProduct_PurchasePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProduct_PurchaseOperatorsInput\n  OR: [FilterUpdateManyProduct_PurchaseInput!]\n  AND: [FilterUpdateManyProduct_PurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProduct_PurchaseOperatorsInput {\n  _id: FilterUpdateManyProduct_Purchase_idOperatorsInput\n  createdAt: FilterUpdateManyProduct_PurchaseCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProduct_Purchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_PurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProduct_PurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProduct_PurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProduct_PurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProduct_PurchaseOperatorsInput\n  OR: [FilterRemoveOneProduct_PurchaseInput!]\n  AND: [FilterRemoveOneProduct_PurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProduct_PurchaseOperatorsInput {\n  _id: FilterRemoveOneProduct_Purchase_idOperatorsInput\n  createdAt: FilterRemoveOneProduct_PurchaseCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProduct_Purchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_PurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProduct_PurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProduct_PurchasePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProduct_PurchaseInput {\n  purchase: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_cost: Float\n  total: Float\n  status: EnumProduct_PurchaseStatus\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProduct_PurchaseOperatorsInput\n  OR: [FilterRemoveManyProduct_PurchaseInput!]\n  AND: [FilterRemoveManyProduct_PurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProduct_PurchaseOperatorsInput {\n  _id: FilterRemoveManyProduct_Purchase_idOperatorsInput\n  createdAt: FilterRemoveManyProduct_PurchaseCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProduct_Purchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_PurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProduct_QuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product_Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProduct_QuotationInput {\n  quotation: MongoID!\n  product_variant: MongoID!\n  unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_price: Float!\n  total: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProduct_QuotationPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product_Quotation!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProduct_QuotationInput {\n  quotation: MongoID!\n  product_variant: MongoID!\n  unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_price: Float!\n  total: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProduct_QuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProduct_QuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProduct_QuotationOperatorsInput\n  OR: [FilterUpdateOneProduct_QuotationInput!]\n  AND: [FilterUpdateOneProduct_QuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProduct_QuotationOperatorsInput {\n  _id: FilterUpdateOneProduct_Quotation_idOperatorsInput\n  createdAt: FilterUpdateOneProduct_QuotationCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProduct_Quotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_QuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProduct_QuotationInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProduct_QuotationPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProduct_QuotationOperatorsInput\n  OR: [FilterUpdateManyProduct_QuotationInput!]\n  AND: [FilterUpdateManyProduct_QuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProduct_QuotationOperatorsInput {\n  _id: FilterUpdateManyProduct_Quotation_idOperatorsInput\n  createdAt: FilterUpdateManyProduct_QuotationCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProduct_Quotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_QuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProduct_QuotationInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProduct_QuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProduct_QuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProduct_QuotationOperatorsInput\n  OR: [FilterRemoveOneProduct_QuotationInput!]\n  AND: [FilterRemoveOneProduct_QuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProduct_QuotationOperatorsInput {\n  _id: FilterRemoveOneProduct_Quotation_idOperatorsInput\n  createdAt: FilterRemoveOneProduct_QuotationCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProduct_Quotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_QuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProduct_QuotationInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProduct_QuotationPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProduct_QuotationInput {\n  quotation: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProduct_QuotationOperatorsInput\n  OR: [FilterRemoveManyProduct_QuotationInput!]\n  AND: [FilterRemoveManyProduct_QuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProduct_QuotationOperatorsInput {\n  _id: FilterRemoveManyProduct_Quotation_idOperatorsInput\n  createdAt: FilterRemoveManyProduct_QuotationCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProduct_Quotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_QuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProduct_ReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product_Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProduct_ReturnInput {\n  return: MongoID!\n  product_variant: MongoID!\n  unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_price: Float!\n  total: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProduct_ReturnPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product_Return!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProduct_ReturnInput {\n  return: MongoID!\n  product_variant: MongoID!\n  unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_price: Float!\n  total: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProduct_ReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProduct_ReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProduct_ReturnOperatorsInput\n  OR: [FilterUpdateOneProduct_ReturnInput!]\n  AND: [FilterUpdateOneProduct_ReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProduct_ReturnOperatorsInput {\n  _id: FilterUpdateOneProduct_Return_idOperatorsInput\n  createdAt: FilterUpdateOneProduct_ReturnCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProduct_Return_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_ReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProduct_ReturnInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProduct_ReturnPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProduct_ReturnOperatorsInput\n  OR: [FilterUpdateManyProduct_ReturnInput!]\n  AND: [FilterUpdateManyProduct_ReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProduct_ReturnOperatorsInput {\n  _id: FilterUpdateManyProduct_Return_idOperatorsInput\n  createdAt: FilterUpdateManyProduct_ReturnCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProduct_Return_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_ReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProduct_ReturnInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProduct_ReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProduct_ReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProduct_ReturnOperatorsInput\n  OR: [FilterRemoveOneProduct_ReturnInput!]\n  AND: [FilterRemoveOneProduct_ReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProduct_ReturnOperatorsInput {\n  _id: FilterRemoveOneProduct_Return_idOperatorsInput\n  createdAt: FilterRemoveOneProduct_ReturnCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProduct_Return_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_ReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProduct_ReturnInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProduct_ReturnPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProduct_ReturnInput {\n  return: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProduct_ReturnOperatorsInput\n  OR: [FilterRemoveManyProduct_ReturnInput!]\n  AND: [FilterRemoveManyProduct_ReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProduct_ReturnOperatorsInput {\n  _id: FilterRemoveManyProduct_Return_idOperatorsInput\n  createdAt: FilterRemoveManyProduct_ReturnCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProduct_Return_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_ReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProduct_SalePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product_Sale\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProduct_SaleInput {\n  sale: MongoID!\n  product_variant: MongoID!\n  unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_price: Float!\n  total: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProduct_SalePayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product_Sale!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProduct_SaleInput {\n  sale: MongoID!\n  product_variant: MongoID!\n  unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  discount: Float!\n  net_unit_price: Float!\n  total: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProduct_SalePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Sale\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProduct_SalePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Sale\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProduct_SaleOperatorsInput\n  OR: [FilterUpdateOneProduct_SaleInput!]\n  AND: [FilterUpdateOneProduct_SaleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProduct_SaleOperatorsInput {\n  _id: FilterUpdateOneProduct_Sale_idOperatorsInput\n  createdAt: FilterUpdateOneProduct_SaleCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProduct_Sale_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_SaleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProduct_SaleInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProduct_SalePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProduct_SaleOperatorsInput\n  OR: [FilterUpdateManyProduct_SaleInput!]\n  AND: [FilterUpdateManyProduct_SaleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProduct_SaleOperatorsInput {\n  _id: FilterUpdateManyProduct_Sale_idOperatorsInput\n  createdAt: FilterUpdateManyProduct_SaleCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProduct_Sale_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_SaleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProduct_SaleInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProduct_SalePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Sale\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProduct_SalePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Sale\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProduct_SaleOperatorsInput\n  OR: [FilterRemoveOneProduct_SaleInput!]\n  AND: [FilterRemoveOneProduct_SaleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProduct_SaleOperatorsInput {\n  _id: FilterRemoveOneProduct_Sale_idOperatorsInput\n  createdAt: FilterRemoveOneProduct_SaleCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProduct_Sale_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_SaleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProduct_SaleInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProduct_SalePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProduct_SaleInput {\n  sale: MongoID\n  product_variant: MongoID\n  unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  discount: Float\n  net_unit_price: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProduct_SaleOperatorsInput\n  OR: [FilterRemoveManyProduct_SaleInput!]\n  AND: [FilterRemoveManyProduct_SaleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProduct_SaleOperatorsInput {\n  _id: FilterRemoveManyProduct_Sale_idOperatorsInput\n  createdAt: FilterRemoveManyProduct_SaleCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProduct_Sale_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_SaleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProduct_SupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product_Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProduct_SupplierInput {\n  productVariant: MongoID!\n  supplier: MongoID!\n  qty: Float!\n  price: Float!\n  itemCode: String!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProduct_SupplierPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product_Supplier!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProduct_SupplierInput {\n  productVariant: MongoID!\n  supplier: MongoID!\n  qty: Float!\n  price: Float!\n  itemCode: String!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProduct_SupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProduct_SupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProduct_SupplierOperatorsInput\n  OR: [FilterUpdateOneProduct_SupplierInput!]\n  AND: [FilterUpdateOneProduct_SupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProduct_SupplierOperatorsInput {\n  itemCode: FilterUpdateOneProduct_SupplierItemCodeOperatorsInput\n  _id: FilterUpdateOneProduct_Supplier_idOperatorsInput\n  createdAt: FilterUpdateOneProduct_SupplierCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProduct_SupplierItemCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_Supplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_SupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProduct_SupplierInput {\n  _ID_ASC\n  _ID_DESC\n  ITEMCODE_ASC\n  ITEMCODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProduct_SupplierPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProduct_SupplierOperatorsInput\n  OR: [FilterUpdateManyProduct_SupplierInput!]\n  AND: [FilterUpdateManyProduct_SupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProduct_SupplierOperatorsInput {\n  itemCode: FilterUpdateManyProduct_SupplierItemCodeOperatorsInput\n  _id: FilterUpdateManyProduct_Supplier_idOperatorsInput\n  createdAt: FilterUpdateManyProduct_SupplierCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProduct_SupplierItemCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_Supplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_SupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProduct_SupplierInput {\n  _ID_ASC\n  _ID_DESC\n  ITEMCODE_ASC\n  ITEMCODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProduct_SupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProduct_SupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProduct_SupplierOperatorsInput\n  OR: [FilterRemoveOneProduct_SupplierInput!]\n  AND: [FilterRemoveOneProduct_SupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProduct_SupplierOperatorsInput {\n  itemCode: FilterRemoveOneProduct_SupplierItemCodeOperatorsInput\n  _id: FilterRemoveOneProduct_Supplier_idOperatorsInput\n  createdAt: FilterRemoveOneProduct_SupplierCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProduct_SupplierItemCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_Supplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_SupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProduct_SupplierInput {\n  _ID_ASC\n  _ID_DESC\n  ITEMCODE_ASC\n  ITEMCODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProduct_SupplierPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProduct_SupplierInput {\n  productVariant: MongoID\n  supplier: MongoID\n  qty: Float\n  price: Float\n  itemCode: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProduct_SupplierOperatorsInput\n  OR: [FilterRemoveManyProduct_SupplierInput!]\n  AND: [FilterRemoveManyProduct_SupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProduct_SupplierOperatorsInput {\n  itemCode: FilterRemoveManyProduct_SupplierItemCodeOperatorsInput\n  _id: FilterRemoveManyProduct_Supplier_idOperatorsInput\n  createdAt: FilterRemoveManyProduct_SupplierCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProduct_SupplierItemCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_Supplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_SupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProduct_TransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product_Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProduct_TransferInput {\n  transfer: MongoID!\n  product_variant: MongoID!\n  purchase_unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  net_unit_cost: Float!\n  total: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProduct_TransferPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product_Transfer!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProduct_TransferInput {\n  transfer: MongoID!\n  product_variant: MongoID!\n  purchase_unit: MongoID!\n  qty: Float!\n  tax_rate: Float!\n  tax: Float!\n  net_unit_cost: Float!\n  total: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProduct_TransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProduct_TransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProduct_TransferOperatorsInput\n  OR: [FilterUpdateOneProduct_TransferInput!]\n  AND: [FilterUpdateOneProduct_TransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProduct_TransferOperatorsInput {\n  _id: FilterUpdateOneProduct_Transfer_idOperatorsInput\n  createdAt: FilterUpdateOneProduct_TransferCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProduct_Transfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_TransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProduct_TransferInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProduct_TransferPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProduct_TransferOperatorsInput\n  OR: [FilterUpdateManyProduct_TransferInput!]\n  AND: [FilterUpdateManyProduct_TransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProduct_TransferOperatorsInput {\n  _id: FilterUpdateManyProduct_Transfer_idOperatorsInput\n  createdAt: FilterUpdateManyProduct_TransferCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProduct_Transfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_TransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProduct_TransferInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProduct_TransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProduct_TransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProduct_TransferOperatorsInput\n  OR: [FilterRemoveOneProduct_TransferInput!]\n  AND: [FilterRemoveOneProduct_TransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProduct_TransferOperatorsInput {\n  _id: FilterRemoveOneProduct_Transfer_idOperatorsInput\n  createdAt: FilterRemoveOneProduct_TransferCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProduct_Transfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_TransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProduct_TransferInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProduct_TransferPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProduct_TransferInput {\n  transfer: MongoID\n  product_variant: MongoID\n  purchase_unit: MongoID\n  qty: Float\n  tax_rate: Float\n  tax: Float\n  net_unit_cost: Float\n  total: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProduct_TransferOperatorsInput\n  OR: [FilterRemoveManyProduct_TransferInput!]\n  AND: [FilterRemoveManyProduct_TransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProduct_TransferOperatorsInput {\n  _id: FilterRemoveManyProduct_Transfer_idOperatorsInput\n  createdAt: FilterRemoveManyProduct_TransferCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProduct_Transfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_TransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProduct_VariantPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product_Variant\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProduct_VariantInput {\n  variant: MongoID!\n  product: MongoID!\n  unit: MongoID!\n  category: MongoID!\n  tax: MongoID\n  purchase_unit: MongoID!\n  sale_unit: MongoID!\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type!\n  barcode_symbology: String!\n  item_code: String!\n  qty: Float!\n  position: Float!\n  additional_price: Float!\n  alert_qty: Float\n  promotion: Boolean!\n  promotion_price: Float!\n  price: Float!\n  cost: Float!\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean!\n  product_list: String\n  qty_list: String\n  price_list: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProduct_VariantPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product_Variant!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProduct_VariantInput {\n  variant: MongoID!\n  product: MongoID!\n  unit: MongoID!\n  category: MongoID!\n  tax: MongoID\n  purchase_unit: MongoID!\n  sale_unit: MongoID!\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type!\n  barcode_symbology: String!\n  item_code: String!\n  qty: Float!\n  position: Float!\n  additional_price: Float!\n  alert_qty: Float\n  promotion: Boolean!\n  promotion_price: Float!\n  price: Float!\n  cost: Float!\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean!\n  product_list: String\n  qty_list: String\n  price_list: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProduct_VariantPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Variant\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProduct_VariantPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Variant\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProduct_VariantOperatorsInput\n  OR: [FilterUpdateOneProduct_VariantInput!]\n  AND: [FilterUpdateOneProduct_VariantInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProduct_VariantOperatorsInput {\n  variant: FilterUpdateOneProduct_VariantVariantOperatorsInput\n  item_code: FilterUpdateOneProduct_VariantItem_codeOperatorsInput\n  _id: FilterUpdateOneProduct_Variant_idOperatorsInput\n  createdAt: FilterUpdateOneProduct_VariantCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProduct_VariantVariantOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_VariantItem_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_Variant_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_VariantCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProduct_VariantInput {\n  _ID_ASC\n  _ID_DESC\n  VARIANT_ASC\n  VARIANT_DESC\n  ITEM_CODE_ASC\n  ITEM_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProduct_VariantPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProduct_VariantOperatorsInput\n  OR: [FilterUpdateManyProduct_VariantInput!]\n  AND: [FilterUpdateManyProduct_VariantInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProduct_VariantOperatorsInput {\n  variant: FilterUpdateManyProduct_VariantVariantOperatorsInput\n  item_code: FilterUpdateManyProduct_VariantItem_codeOperatorsInput\n  _id: FilterUpdateManyProduct_Variant_idOperatorsInput\n  createdAt: FilterUpdateManyProduct_VariantCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProduct_VariantVariantOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_VariantItem_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_Variant_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_VariantCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProduct_VariantInput {\n  _ID_ASC\n  _ID_DESC\n  VARIANT_ASC\n  VARIANT_DESC\n  ITEM_CODE_ASC\n  ITEM_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProduct_VariantPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Variant\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProduct_VariantPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Variant\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProduct_VariantOperatorsInput\n  OR: [FilterRemoveOneProduct_VariantInput!]\n  AND: [FilterRemoveOneProduct_VariantInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProduct_VariantOperatorsInput {\n  variant: FilterRemoveOneProduct_VariantVariantOperatorsInput\n  item_code: FilterRemoveOneProduct_VariantItem_codeOperatorsInput\n  _id: FilterRemoveOneProduct_Variant_idOperatorsInput\n  createdAt: FilterRemoveOneProduct_VariantCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProduct_VariantVariantOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_VariantItem_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_Variant_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_VariantCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProduct_VariantInput {\n  _ID_ASC\n  _ID_DESC\n  VARIANT_ASC\n  VARIANT_DESC\n  ITEM_CODE_ASC\n  ITEM_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProduct_VariantPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProduct_VariantInput {\n  variant: MongoID\n  product: MongoID\n  unit: MongoID\n  category: MongoID\n  tax: MongoID\n  purchase_unit: MongoID\n  sale_unit: MongoID\n  productSuppliers: [MongoID]\n  product_type: EnumProduct_VariantProduct_type\n  barcode_symbology: String\n  item_code: String\n  qty: Float\n  position: Float\n  additional_price: Float\n  alert_qty: Float\n  promotion: Boolean\n  promotion_price: Float\n  price: Float\n  cost: Float\n  tax_method: EnumProduct_VariantTax_method\n  starting_date: Date\n  last_date: Date\n  image: String\n  featured: Boolean\n  product_list: String\n  qty_list: String\n  price_list: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProduct_VariantOperatorsInput\n  OR: [FilterRemoveManyProduct_VariantInput!]\n  AND: [FilterRemoveManyProduct_VariantInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProduct_VariantOperatorsInput {\n  variant: FilterRemoveManyProduct_VariantVariantOperatorsInput\n  item_code: FilterRemoveManyProduct_VariantItem_codeOperatorsInput\n  _id: FilterRemoveManyProduct_Variant_idOperatorsInput\n  createdAt: FilterRemoveManyProduct_VariantCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProduct_VariantVariantOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_VariantItem_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_Variant_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_VariantCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProduct_WarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product_Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProduct_WarehouseInput {\n  product_variant: MongoID!\n  warehouse: MongoID!\n  qty: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProduct_WarehousePayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product_Warehouse!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProduct_WarehouseInput {\n  product_variant: MongoID!\n  warehouse: MongoID!\n  qty: Float!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProduct_WarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProduct_WarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product_Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProduct_WarehouseOperatorsInput\n  OR: [FilterUpdateOneProduct_WarehouseInput!]\n  AND: [FilterUpdateOneProduct_WarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProduct_WarehouseOperatorsInput {\n  _id: FilterUpdateOneProduct_Warehouse_idOperatorsInput\n  createdAt: FilterUpdateOneProduct_WarehouseCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProduct_Warehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_WarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProduct_WarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProduct_WarehousePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProduct_WarehouseOperatorsInput\n  OR: [FilterUpdateManyProduct_WarehouseInput!]\n  AND: [FilterUpdateManyProduct_WarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProduct_WarehouseOperatorsInput {\n  _id: FilterUpdateManyProduct_Warehouse_idOperatorsInput\n  createdAt: FilterUpdateManyProduct_WarehouseCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProduct_Warehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_WarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProduct_WarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProduct_WarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProduct_WarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product_Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProduct_WarehouseOperatorsInput\n  OR: [FilterRemoveOneProduct_WarehouseInput!]\n  AND: [FilterRemoveOneProduct_WarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProduct_WarehouseOperatorsInput {\n  _id: FilterRemoveOneProduct_Warehouse_idOperatorsInput\n  createdAt: FilterRemoveOneProduct_WarehouseCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProduct_Warehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_WarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProduct_WarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProduct_WarehousePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProduct_WarehouseInput {\n  product_variant: MongoID\n  warehouse: MongoID\n  qty: Float\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProduct_WarehouseOperatorsInput\n  OR: [FilterRemoveManyProduct_WarehouseInput!]\n  AND: [FilterRemoveManyProduct_WarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProduct_WarehouseOperatorsInput {\n  _id: FilterRemoveManyProduct_Warehouse_idOperatorsInput\n  createdAt: FilterRemoveManyProduct_WarehouseCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProduct_Warehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_WarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneProductPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Product\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneProductInput {\n  name: String!\n  code: String!\n  brand: MongoID!\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyProductPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Product!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyProductInput {\n  name: String!\n  code: String!\n  brand: MongoID!\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdProductPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneProductPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Product\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneProductOperatorsInput\n  OR: [FilterUpdateOneProductInput!]\n  AND: [FilterUpdateOneProductInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneProductOperatorsInput {\n  name: FilterUpdateOneProductNameOperatorsInput\n  code: FilterUpdateOneProductCodeOperatorsInput\n  _id: FilterUpdateOneProduct_idOperatorsInput\n  createdAt: FilterUpdateOneProductCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneProductNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneProductCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneProduct_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneProductCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneProductInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyProductPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyProductOperatorsInput\n  OR: [FilterUpdateManyProductInput!]\n  AND: [FilterUpdateManyProductInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyProductOperatorsInput {\n  name: FilterUpdateManyProductNameOperatorsInput\n  code: FilterUpdateManyProductCodeOperatorsInput\n  _id: FilterUpdateManyProduct_idOperatorsInput\n  createdAt: FilterUpdateManyProductCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyProductNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyProductCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyProduct_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyProductCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyProductInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdProductPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneProductPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Product\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneProductOperatorsInput\n  OR: [FilterRemoveOneProductInput!]\n  AND: [FilterRemoveOneProductInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneProductOperatorsInput {\n  name: FilterRemoveOneProductNameOperatorsInput\n  code: FilterRemoveOneProductCodeOperatorsInput\n  _id: FilterRemoveOneProduct_idOperatorsInput\n  createdAt: FilterRemoveOneProductCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneProductNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneProductCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneProduct_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneProductCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneProductInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CODE_ASC\n  CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyProductPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyProductInput {\n  name: String\n  code: String\n  brand: MongoID\n  product_variants: [MongoID]\n  file: String\n  product_details: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyProductOperatorsInput\n  OR: [FilterRemoveManyProductInput!]\n  AND: [FilterRemoveManyProductInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyProductOperatorsInput {\n  name: FilterRemoveManyProductNameOperatorsInput\n  code: FilterRemoveManyProductCodeOperatorsInput\n  _id: FilterRemoveManyProduct_idOperatorsInput\n  createdAt: FilterRemoveManyProductCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyProductNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyProductCodeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyProduct_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyProductCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOnePurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOnePurchaseInput {\n  reference_no: String!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_cost: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  order_discount: Float!\n  shipping_cost: Float!\n  grandtotal: Float!\n  paid_amount: Float!\n  user: MongoID!\n  warehouse: MongoID!\n  supplier: MongoID!\n  product_purchases: [MongoID]!\n  product_purchase_returns: [MongoID]!\n  status: EnumPurchaseStatus!\n  payment_status: EnumPurchasePayment_status!\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyPurchasePayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Purchase!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyPurchaseInput {\n  reference_no: String!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_cost: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  order_discount: Float!\n  shipping_cost: Float!\n  grandtotal: Float!\n  paid_amount: Float!\n  user: MongoID!\n  warehouse: MongoID!\n  supplier: MongoID!\n  product_purchases: [MongoID]!\n  product_purchase_returns: [MongoID]!\n  status: EnumPurchaseStatus!\n  payment_status: EnumPurchasePayment_status!\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdPurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdPurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOnePurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOnePurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOnePurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOnePurchaseOperatorsInput\n  OR: [FilterUpdateOnePurchaseInput!]\n  AND: [FilterUpdateOnePurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOnePurchaseOperatorsInput {\n  reference_no: FilterUpdateOnePurchaseReference_noOperatorsInput\n  document: FilterUpdateOnePurchaseDocumentOperatorsInput\n  note: FilterUpdateOnePurchaseNoteOperatorsInput\n  _id: FilterUpdateOnePurchase_idOperatorsInput\n  createdAt: FilterUpdateOnePurchaseCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOnePurchaseReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOnePurchaseDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOnePurchaseNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOnePurchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOnePurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOnePurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyPurchasePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyPurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyPurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyPurchaseOperatorsInput\n  OR: [FilterUpdateManyPurchaseInput!]\n  AND: [FilterUpdateManyPurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyPurchaseOperatorsInput {\n  reference_no: FilterUpdateManyPurchaseReference_noOperatorsInput\n  document: FilterUpdateManyPurchaseDocumentOperatorsInput\n  note: FilterUpdateManyPurchaseNoteOperatorsInput\n  _id: FilterUpdateManyPurchase_idOperatorsInput\n  createdAt: FilterUpdateManyPurchaseCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyPurchaseReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyPurchaseDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyPurchaseNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyPurchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyPurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyPurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdPurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOnePurchasePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Purchase\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOnePurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOnePurchaseOperatorsInput\n  OR: [FilterRemoveOnePurchaseInput!]\n  AND: [FilterRemoveOnePurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOnePurchaseOperatorsInput {\n  reference_no: FilterRemoveOnePurchaseReference_noOperatorsInput\n  document: FilterRemoveOnePurchaseDocumentOperatorsInput\n  note: FilterRemoveOnePurchaseNoteOperatorsInput\n  _id: FilterRemoveOnePurchase_idOperatorsInput\n  createdAt: FilterRemoveOnePurchaseCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOnePurchaseReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOnePurchaseDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOnePurchaseNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOnePurchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOnePurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOnePurchaseInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyPurchasePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyPurchaseInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_cost: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  user: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  product_purchases: [MongoID]\n  product_purchase_returns: [MongoID]\n  status: EnumPurchaseStatus\n  payment_status: EnumPurchasePayment_status\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyPurchaseOperatorsInput\n  OR: [FilterRemoveManyPurchaseInput!]\n  AND: [FilterRemoveManyPurchaseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyPurchaseOperatorsInput {\n  reference_no: FilterRemoveManyPurchaseReference_noOperatorsInput\n  document: FilterRemoveManyPurchaseDocumentOperatorsInput\n  note: FilterRemoveManyPurchaseNoteOperatorsInput\n  _id: FilterRemoveManyPurchase_idOperatorsInput\n  createdAt: FilterRemoveManyPurchaseCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyPurchaseReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyPurchaseDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyPurchaseNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyPurchase_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyPurchaseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneReturnInput {\n  reference_no: String!\n  user: MongoID!\n  biller: MongoID!\n  warehouse: MongoID!\n  account: MongoID!\n  customer: MongoID!\n  product_returns: MongoID!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_price: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  grandtotal: Float!\n  document: String\n  return_note: String\n  staff_note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyReturnPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Return!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyReturnInput {\n  reference_no: String!\n  user: MongoID!\n  biller: MongoID!\n  warehouse: MongoID!\n  account: MongoID!\n  customer: MongoID!\n  product_returns: MongoID!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_price: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  grandtotal: Float!\n  document: String\n  return_note: String\n  staff_note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneReturnOperatorsInput\n  OR: [FilterUpdateOneReturnInput!]\n  AND: [FilterUpdateOneReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneReturnOperatorsInput {\n  reference_no: FilterUpdateOneReturnReference_noOperatorsInput\n  document: FilterUpdateOneReturnDocumentOperatorsInput\n  return_note: FilterUpdateOneReturnReturn_noteOperatorsInput\n  staff_note: FilterUpdateOneReturnStaff_noteOperatorsInput\n  _id: FilterUpdateOneReturn_idOperatorsInput\n  createdAt: FilterUpdateOneReturnCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneReturnReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneReturnDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneReturnReturn_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneReturnStaff_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneReturn_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneReturnInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  RETURN_NOTE_ASC\n  RETURN_NOTE_DESC\n  STAFF_NOTE_ASC\n  STAFF_NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyReturnPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyReturnOperatorsInput\n  OR: [FilterUpdateManyReturnInput!]\n  AND: [FilterUpdateManyReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyReturnOperatorsInput {\n  reference_no: FilterUpdateManyReturnReference_noOperatorsInput\n  document: FilterUpdateManyReturnDocumentOperatorsInput\n  return_note: FilterUpdateManyReturnReturn_noteOperatorsInput\n  staff_note: FilterUpdateManyReturnStaff_noteOperatorsInput\n  _id: FilterUpdateManyReturn_idOperatorsInput\n  createdAt: FilterUpdateManyReturnCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyReturnReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyReturnDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyReturnReturn_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyReturnStaff_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyReturn_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyReturnInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  RETURN_NOTE_ASC\n  RETURN_NOTE_DESC\n  STAFF_NOTE_ASC\n  STAFF_NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneReturnPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Return\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneReturnOperatorsInput\n  OR: [FilterRemoveOneReturnInput!]\n  AND: [FilterRemoveOneReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneReturnOperatorsInput {\n  reference_no: FilterRemoveOneReturnReference_noOperatorsInput\n  document: FilterRemoveOneReturnDocumentOperatorsInput\n  return_note: FilterRemoveOneReturnReturn_noteOperatorsInput\n  staff_note: FilterRemoveOneReturnStaff_noteOperatorsInput\n  _id: FilterRemoveOneReturn_idOperatorsInput\n  createdAt: FilterRemoveOneReturnCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneReturnReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneReturnDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneReturnReturn_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneReturnStaff_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneReturn_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneReturnInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  RETURN_NOTE_ASC\n  RETURN_NOTE_DESC\n  STAFF_NOTE_ASC\n  STAFF_NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyReturnPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyReturnInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  account: MongoID\n  customer: MongoID\n  product_returns: MongoID\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  grandtotal: Float\n  document: String\n  return_note: String\n  staff_note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyReturnOperatorsInput\n  OR: [FilterRemoveManyReturnInput!]\n  AND: [FilterRemoveManyReturnInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyReturnOperatorsInput {\n  reference_no: FilterRemoveManyReturnReference_noOperatorsInput\n  document: FilterRemoveManyReturnDocumentOperatorsInput\n  return_note: FilterRemoveManyReturnReturn_noteOperatorsInput\n  staff_note: FilterRemoveManyReturnStaff_noteOperatorsInput\n  _id: FilterRemoveManyReturn_idOperatorsInput\n  createdAt: FilterRemoveManyReturnCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyReturnReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyReturnDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyReturnReturn_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyReturnStaff_noteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyReturn_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyReturnCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneQuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneQuotationInput {\n  reference_no: String!\n  user: MongoID!\n  biller: MongoID!\n  warehouse: MongoID!\n  supplier: MongoID!\n  customer: MongoID!\n  product_quotations: [MongoID]!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_price: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  order_discount: Float!\n  shipping_cost: Float!\n  grandtotal: Float!\n  paid_amount: Float!\n  status: EnumQuotationStatus!\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyQuotationPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Quotation!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyQuotationInput {\n  reference_no: String!\n  user: MongoID!\n  biller: MongoID!\n  warehouse: MongoID!\n  supplier: MongoID!\n  customer: MongoID!\n  product_quotations: [MongoID]!\n  item: Float!\n  total_qty: Float!\n  total_discount: Float!\n  total_tax: Float!\n  total_price: Float!\n  order_tax_rate: Float!\n  order_tax: Float!\n  order_discount: Float!\n  shipping_cost: Float!\n  grandtotal: Float!\n  paid_amount: Float!\n  status: EnumQuotationStatus!\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdQuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneQuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneQuotationOperatorsInput\n  OR: [FilterUpdateOneQuotationInput!]\n  AND: [FilterUpdateOneQuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneQuotationOperatorsInput {\n  reference_no: FilterUpdateOneQuotationReference_noOperatorsInput\n  document: FilterUpdateOneQuotationDocumentOperatorsInput\n  note: FilterUpdateOneQuotationNoteOperatorsInput\n  _id: FilterUpdateOneQuotation_idOperatorsInput\n  createdAt: FilterUpdateOneQuotationCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneQuotationReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneQuotationDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneQuotationNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneQuotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneQuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneQuotationInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyQuotationPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyQuotationOperatorsInput\n  OR: [FilterUpdateManyQuotationInput!]\n  AND: [FilterUpdateManyQuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyQuotationOperatorsInput {\n  reference_no: FilterUpdateManyQuotationReference_noOperatorsInput\n  document: FilterUpdateManyQuotationDocumentOperatorsInput\n  note: FilterUpdateManyQuotationNoteOperatorsInput\n  _id: FilterUpdateManyQuotation_idOperatorsInput\n  createdAt: FilterUpdateManyQuotationCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyQuotationReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyQuotationDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyQuotationNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyQuotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyQuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyQuotationInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdQuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneQuotationPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Quotation\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneQuotationOperatorsInput\n  OR: [FilterRemoveOneQuotationInput!]\n  AND: [FilterRemoveOneQuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneQuotationOperatorsInput {\n  reference_no: FilterRemoveOneQuotationReference_noOperatorsInput\n  document: FilterRemoveOneQuotationDocumentOperatorsInput\n  note: FilterRemoveOneQuotationNoteOperatorsInput\n  _id: FilterRemoveOneQuotation_idOperatorsInput\n  createdAt: FilterRemoveOneQuotationCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneQuotationReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneQuotationDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneQuotationNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneQuotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneQuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneQuotationInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyQuotationPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyQuotationInput {\n  reference_no: String\n  user: MongoID\n  biller: MongoID\n  warehouse: MongoID\n  supplier: MongoID\n  customer: MongoID\n  product_quotations: [MongoID]\n  item: Float\n  total_qty: Float\n  total_discount: Float\n  total_tax: Float\n  total_price: Float\n  order_tax_rate: Float\n  order_tax: Float\n  order_discount: Float\n  shipping_cost: Float\n  grandtotal: Float\n  paid_amount: Float\n  status: EnumQuotationStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyQuotationOperatorsInput\n  OR: [FilterRemoveManyQuotationInput!]\n  AND: [FilterRemoveManyQuotationInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyQuotationOperatorsInput {\n  reference_no: FilterRemoveManyQuotationReference_noOperatorsInput\n  document: FilterRemoveManyQuotationDocumentOperatorsInput\n  note: FilterRemoveManyQuotationNoteOperatorsInput\n  _id: FilterRemoveManyQuotation_idOperatorsInput\n  createdAt: FilterRemoveManyQuotationCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyQuotationReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyQuotationDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyQuotationNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyQuotation_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyQuotationCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneRolePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Role\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneRoleInput {\n  name: String!\n  description: String!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyRolePayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Role!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyRoleInput {\n  name: String!\n  description: String!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdRolePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Role\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneRolePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Role\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneRoleOperatorsInput\n  OR: [FilterUpdateOneRoleInput!]\n  AND: [FilterUpdateOneRoleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneRoleOperatorsInput {\n  description: FilterUpdateOneRoleDescriptionOperatorsInput\n  _id: FilterUpdateOneRole_idOperatorsInput\n  createdAt: FilterUpdateOneRoleCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneRoleDescriptionOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneRole_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneRoleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneRoleInput {\n  _ID_ASC\n  _ID_DESC\n  DESCRIPTION_ASC\n  DESCRIPTION_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyRolePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyRoleOperatorsInput\n  OR: [FilterUpdateManyRoleInput!]\n  AND: [FilterUpdateManyRoleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyRoleOperatorsInput {\n  description: FilterUpdateManyRoleDescriptionOperatorsInput\n  _id: FilterUpdateManyRole_idOperatorsInput\n  createdAt: FilterUpdateManyRoleCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyRoleDescriptionOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyRole_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyRoleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyRoleInput {\n  _ID_ASC\n  _ID_DESC\n  DESCRIPTION_ASC\n  DESCRIPTION_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdRolePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Role\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneRolePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Role\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneRoleOperatorsInput\n  OR: [FilterRemoveOneRoleInput!]\n  AND: [FilterRemoveOneRoleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneRoleOperatorsInput {\n  description: FilterRemoveOneRoleDescriptionOperatorsInput\n  _id: FilterRemoveOneRole_idOperatorsInput\n  createdAt: FilterRemoveOneRoleCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneRoleDescriptionOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneRole_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneRoleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneRoleInput {\n  _ID_ASC\n  _ID_DESC\n  DESCRIPTION_ASC\n  DESCRIPTION_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyRolePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyRoleInput {\n  name: String\n  description: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyRoleOperatorsInput\n  OR: [FilterRemoveManyRoleInput!]\n  AND: [FilterRemoveManyRoleInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyRoleOperatorsInput {\n  description: FilterRemoveManyRoleDescriptionOperatorsInput\n  _id: FilterRemoveManyRole_idOperatorsInput\n  createdAt: FilterRemoveManyRoleCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyRoleDescriptionOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyRole_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyRoleCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneSupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneSupplierInput {\n  name: String!\n  image: String\n  company_name: String!\n  vat_number: Float\n  email: String!\n  phone_number: Float!\n  address: String!\n  city: String!\n  state: String!\n  postal_code: String!\n  country: String!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManySupplierPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Supplier!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManySupplierInput {\n  name: String!\n  image: String\n  company_name: String!\n  vat_number: Float\n  email: String!\n  phone_number: Float!\n  address: String!\n  city: String!\n  state: String!\n  postal_code: String!\n  country: String!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdSupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdSupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneSupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneSupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneSupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneSupplierOperatorsInput\n  OR: [FilterUpdateOneSupplierInput!]\n  AND: [FilterUpdateOneSupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneSupplierOperatorsInput {\n  name: FilterUpdateOneSupplierNameOperatorsInput\n  image: FilterUpdateOneSupplierImageOperatorsInput\n  company_name: FilterUpdateOneSupplierCompany_nameOperatorsInput\n  vat_number: FilterUpdateOneSupplierVat_numberOperatorsInput\n  email: FilterUpdateOneSupplierEmailOperatorsInput\n  phone_number: FilterUpdateOneSupplierPhone_numberOperatorsInput\n  address: FilterUpdateOneSupplierAddressOperatorsInput\n  _id: FilterUpdateOneSupplier_idOperatorsInput\n  createdAt: FilterUpdateOneSupplierCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneSupplierNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneSupplierImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneSupplierCompany_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneSupplierVat_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateOneSupplierEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneSupplierPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateOneSupplierAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneSupplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneSupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneSupplierInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  COMPANY_NAME_ASC\n  COMPANY_NAME_DESC\n  VAT_NUMBER_ASC\n  VAT_NUMBER_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManySupplierPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManySupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManySupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManySupplierOperatorsInput\n  OR: [FilterUpdateManySupplierInput!]\n  AND: [FilterUpdateManySupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManySupplierOperatorsInput {\n  name: FilterUpdateManySupplierNameOperatorsInput\n  image: FilterUpdateManySupplierImageOperatorsInput\n  company_name: FilterUpdateManySupplierCompany_nameOperatorsInput\n  vat_number: FilterUpdateManySupplierVat_numberOperatorsInput\n  email: FilterUpdateManySupplierEmailOperatorsInput\n  phone_number: FilterUpdateManySupplierPhone_numberOperatorsInput\n  address: FilterUpdateManySupplierAddressOperatorsInput\n  _id: FilterUpdateManySupplier_idOperatorsInput\n  createdAt: FilterUpdateManySupplierCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManySupplierNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManySupplierImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManySupplierCompany_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManySupplierVat_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateManySupplierEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManySupplierPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateManySupplierAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManySupplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManySupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManySupplierInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  COMPANY_NAME_ASC\n  COMPANY_NAME_DESC\n  VAT_NUMBER_ASC\n  VAT_NUMBER_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdSupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneSupplierPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Supplier\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneSupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneSupplierOperatorsInput\n  OR: [FilterRemoveOneSupplierInput!]\n  AND: [FilterRemoveOneSupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneSupplierOperatorsInput {\n  name: FilterRemoveOneSupplierNameOperatorsInput\n  image: FilterRemoveOneSupplierImageOperatorsInput\n  company_name: FilterRemoveOneSupplierCompany_nameOperatorsInput\n  vat_number: FilterRemoveOneSupplierVat_numberOperatorsInput\n  email: FilterRemoveOneSupplierEmailOperatorsInput\n  phone_number: FilterRemoveOneSupplierPhone_numberOperatorsInput\n  address: FilterRemoveOneSupplierAddressOperatorsInput\n  _id: FilterRemoveOneSupplier_idOperatorsInput\n  createdAt: FilterRemoveOneSupplierCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneSupplierNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneSupplierImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneSupplierCompany_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneSupplierVat_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveOneSupplierEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneSupplierPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveOneSupplierAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneSupplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneSupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneSupplierInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  IMAGE_ASC\n  IMAGE_DESC\n  COMPANY_NAME_ASC\n  COMPANY_NAME_DESC\n  VAT_NUMBER_ASC\n  VAT_NUMBER_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  PHONE_NUMBER_ASC\n  PHONE_NUMBER_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManySupplierPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManySupplierInput {\n  name: String\n  image: String\n  company_name: String\n  vat_number: Float\n  email: String\n  phone_number: Float\n  address: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManySupplierOperatorsInput\n  OR: [FilterRemoveManySupplierInput!]\n  AND: [FilterRemoveManySupplierInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManySupplierOperatorsInput {\n  name: FilterRemoveManySupplierNameOperatorsInput\n  image: FilterRemoveManySupplierImageOperatorsInput\n  company_name: FilterRemoveManySupplierCompany_nameOperatorsInput\n  vat_number: FilterRemoveManySupplierVat_numberOperatorsInput\n  email: FilterRemoveManySupplierEmailOperatorsInput\n  phone_number: FilterRemoveManySupplierPhone_numberOperatorsInput\n  address: FilterRemoveManySupplierAddressOperatorsInput\n  _id: FilterRemoveManySupplier_idOperatorsInput\n  createdAt: FilterRemoveManySupplierCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManySupplierNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManySupplierImageOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManySupplierCompany_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManySupplierVat_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveManySupplierEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManySupplierPhone_numberOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveManySupplierAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManySupplier_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManySupplierCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneTaxPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Tax\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneTaxInput {\n  name: String!\n  rate: Float!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyTaxPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Tax!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyTaxInput {\n  name: String!\n  rate: Float!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdTaxPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Tax\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneTaxPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Tax\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneTaxOperatorsInput\n  OR: [FilterUpdateOneTaxInput!]\n  AND: [FilterUpdateOneTaxInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneTaxOperatorsInput {\n  name: FilterUpdateOneTaxNameOperatorsInput\n  _id: FilterUpdateOneTax_idOperatorsInput\n  createdAt: FilterUpdateOneTaxCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneTaxNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneTax_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneTaxCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneTaxInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyTaxPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyTaxOperatorsInput\n  OR: [FilterUpdateManyTaxInput!]\n  AND: [FilterUpdateManyTaxInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyTaxOperatorsInput {\n  name: FilterUpdateManyTaxNameOperatorsInput\n  _id: FilterUpdateManyTax_idOperatorsInput\n  createdAt: FilterUpdateManyTaxCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyTaxNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyTax_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyTaxCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyTaxInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdTaxPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Tax\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneTaxPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Tax\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneTaxOperatorsInput\n  OR: [FilterRemoveOneTaxInput!]\n  AND: [FilterRemoveOneTaxInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneTaxOperatorsInput {\n  name: FilterRemoveOneTaxNameOperatorsInput\n  _id: FilterRemoveOneTax_idOperatorsInput\n  createdAt: FilterRemoveOneTaxCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneTaxNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneTax_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneTaxCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneTaxInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyTaxPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyTaxInput {\n  name: String\n  rate: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyTaxOperatorsInput\n  OR: [FilterRemoveManyTaxInput!]\n  AND: [FilterRemoveManyTaxInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyTaxOperatorsInput {\n  name: FilterRemoveManyTaxNameOperatorsInput\n  _id: FilterRemoveManyTax_idOperatorsInput\n  createdAt: FilterRemoveManyTaxCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyTaxNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyTax_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyTaxCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneTransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneTransferInput {\n  reference_no: String!\n  item: Float!\n  total_qty: Float!\n  total_tax: Float!\n  total_cost: Float!\n  shipping_cost: Float!\n  grand_total: Float!\n  paid_amount: Float!\n  user: MongoID!\n  from_warehouse: MongoID!\n  to_warehouse: MongoID!\n  product_transfers: [MongoID]!\n  status: EnumTransferStatus!\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyTransferPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Transfer!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyTransferInput {\n  reference_no: String!\n  item: Float!\n  total_qty: Float!\n  total_tax: Float!\n  total_cost: Float!\n  shipping_cost: Float!\n  grand_total: Float!\n  paid_amount: Float!\n  user: MongoID!\n  from_warehouse: MongoID!\n  to_warehouse: MongoID!\n  product_transfers: [MongoID]!\n  status: EnumTransferStatus!\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdTransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneTransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneTransferOperatorsInput\n  OR: [FilterUpdateOneTransferInput!]\n  AND: [FilterUpdateOneTransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneTransferOperatorsInput {\n  reference_no: FilterUpdateOneTransferReference_noOperatorsInput\n  document: FilterUpdateOneTransferDocumentOperatorsInput\n  note: FilterUpdateOneTransferNoteOperatorsInput\n  _id: FilterUpdateOneTransfer_idOperatorsInput\n  createdAt: FilterUpdateOneTransferCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneTransferReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneTransferDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneTransferNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneTransfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneTransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneTransferInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyTransferPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyTransferOperatorsInput\n  OR: [FilterUpdateManyTransferInput!]\n  AND: [FilterUpdateManyTransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyTransferOperatorsInput {\n  reference_no: FilterUpdateManyTransferReference_noOperatorsInput\n  document: FilterUpdateManyTransferDocumentOperatorsInput\n  note: FilterUpdateManyTransferNoteOperatorsInput\n  _id: FilterUpdateManyTransfer_idOperatorsInput\n  createdAt: FilterUpdateManyTransferCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyTransferReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyTransferDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyTransferNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyTransfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyTransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyTransferInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdTransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneTransferPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Transfer\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneTransferOperatorsInput\n  OR: [FilterRemoveOneTransferInput!]\n  AND: [FilterRemoveOneTransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneTransferOperatorsInput {\n  reference_no: FilterRemoveOneTransferReference_noOperatorsInput\n  document: FilterRemoveOneTransferDocumentOperatorsInput\n  note: FilterRemoveOneTransferNoteOperatorsInput\n  _id: FilterRemoveOneTransfer_idOperatorsInput\n  createdAt: FilterRemoveOneTransferCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneTransferReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneTransferDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneTransferNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneTransfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneTransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneTransferInput {\n  _ID_ASC\n  _ID_DESC\n  REFERENCE_NO_ASC\n  REFERENCE_NO_DESC\n  DOCUMENT_ASC\n  DOCUMENT_DESC\n  NOTE_ASC\n  NOTE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyTransferPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyTransferInput {\n  reference_no: String\n  item: Float\n  total_qty: Float\n  total_tax: Float\n  total_cost: Float\n  shipping_cost: Float\n  grand_total: Float\n  paid_amount: Float\n  user: MongoID\n  from_warehouse: MongoID\n  to_warehouse: MongoID\n  product_transfers: [MongoID]\n  status: EnumTransferStatus\n  document: String\n  note: String\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyTransferOperatorsInput\n  OR: [FilterRemoveManyTransferInput!]\n  AND: [FilterRemoveManyTransferInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyTransferOperatorsInput {\n  reference_no: FilterRemoveManyTransferReference_noOperatorsInput\n  document: FilterRemoveManyTransferDocumentOperatorsInput\n  note: FilterRemoveManyTransferNoteOperatorsInput\n  _id: FilterRemoveManyTransfer_idOperatorsInput\n  createdAt: FilterRemoveManyTransferCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyTransferReference_noOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyTransferDocumentOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyTransferNoteOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyTransfer_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyTransferCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneUnitPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Unit\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneUnitInput {\n  unit_name: String!\n  unit_code: String!\n  base_unit: String!\n  operator: String!\n  operation_value: Float!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyUnitPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Unit!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyUnitInput {\n  unit_name: String!\n  unit_code: String!\n  base_unit: String!\n  operator: String!\n  operation_value: Float!\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdUnitPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Unit\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneUnitPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Unit\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneUnitOperatorsInput\n  OR: [FilterUpdateOneUnitInput!]\n  AND: [FilterUpdateOneUnitInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneUnitOperatorsInput {\n  unit_name: FilterUpdateOneUnitUnit_nameOperatorsInput\n  unit_code: FilterUpdateOneUnitUnit_codeOperatorsInput\n  _id: FilterUpdateOneUnit_idOperatorsInput\n  createdAt: FilterUpdateOneUnitCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneUnitUnit_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneUnitUnit_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneUnit_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneUnitCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneUnitInput {\n  _ID_ASC\n  _ID_DESC\n  UNIT_NAME_ASC\n  UNIT_NAME_DESC\n  UNIT_CODE_ASC\n  UNIT_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyUnitPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyUnitOperatorsInput\n  OR: [FilterUpdateManyUnitInput!]\n  AND: [FilterUpdateManyUnitInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyUnitOperatorsInput {\n  unit_name: FilterUpdateManyUnitUnit_nameOperatorsInput\n  unit_code: FilterUpdateManyUnitUnit_codeOperatorsInput\n  _id: FilterUpdateManyUnit_idOperatorsInput\n  createdAt: FilterUpdateManyUnitCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyUnitUnit_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyUnitUnit_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyUnit_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyUnitCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyUnitInput {\n  _ID_ASC\n  _ID_DESC\n  UNIT_NAME_ASC\n  UNIT_NAME_DESC\n  UNIT_CODE_ASC\n  UNIT_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdUnitPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Unit\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneUnitPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Unit\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneUnitOperatorsInput\n  OR: [FilterRemoveOneUnitInput!]\n  AND: [FilterRemoveOneUnitInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneUnitOperatorsInput {\n  unit_name: FilterRemoveOneUnitUnit_nameOperatorsInput\n  unit_code: FilterRemoveOneUnitUnit_codeOperatorsInput\n  _id: FilterRemoveOneUnit_idOperatorsInput\n  createdAt: FilterRemoveOneUnitCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneUnitUnit_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneUnitUnit_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneUnit_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneUnitCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneUnitInput {\n  _ID_ASC\n  _ID_DESC\n  UNIT_NAME_ASC\n  UNIT_NAME_DESC\n  UNIT_CODE_ASC\n  UNIT_CODE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyUnitPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyUnitInput {\n  unit_name: String\n  unit_code: String\n  base_unit: String\n  operator: String\n  operation_value: Float\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyUnitOperatorsInput\n  OR: [FilterRemoveManyUnitInput!]\n  AND: [FilterRemoveManyUnitInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyUnitOperatorsInput {\n  unit_name: FilterRemoveManyUnitUnit_nameOperatorsInput\n  unit_code: FilterRemoveManyUnitUnit_codeOperatorsInput\n  _id: FilterRemoveManyUnit_idOperatorsInput\n  createdAt: FilterRemoveManyUnitCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyUnitUnit_nameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyUnitUnit_codeOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyUnit_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyUnitCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneUserPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: User\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneUserInput {\n  name: String!\n  password: String!\n  role: MongoID!\n  personnel: MongoID!\n  personnelModel: EnumUserPersonnelModel!\n  warehouses: [MongoID]\n  is_active: Boolean!\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyUserPayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [User!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyUserInput {\n  name: String!\n  password: String!\n  role: MongoID!\n  personnel: MongoID!\n  personnelModel: EnumUserPersonnelModel!\n  warehouses: [MongoID]\n  is_active: Boolean!\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdUserPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: User\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneUserPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: User\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneUserOperatorsInput\n  OR: [FilterUpdateOneUserInput!]\n  AND: [FilterUpdateOneUserInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneUserOperatorsInput {\n  _id: FilterUpdateOneUser_idOperatorsInput\n  createdAt: FilterUpdateOneUserCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneUser_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneUserCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneUserInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyUserPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyUserOperatorsInput\n  OR: [FilterUpdateManyUserInput!]\n  AND: [FilterUpdateManyUserInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyUserOperatorsInput {\n  _id: FilterUpdateManyUser_idOperatorsInput\n  createdAt: FilterUpdateManyUserCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyUser_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyUserCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyUserInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdUserPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: User\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneUserPayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: User\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneUserOperatorsInput\n  OR: [FilterRemoveOneUserInput!]\n  AND: [FilterRemoveOneUserInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneUserOperatorsInput {\n  _id: FilterRemoveOneUser_idOperatorsInput\n  createdAt: FilterRemoveOneUserCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneUser_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneUserCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneUserInput {\n  _ID_ASC\n  _ID_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyUserPayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyUserInput {\n  name: String\n  password: String\n  role: MongoID\n  personnel: MongoID\n  personnelModel: EnumUserPersonnelModel\n  warehouses: [MongoID]\n  is_active: Boolean\n  is_deleted: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyUserOperatorsInput\n  OR: [FilterRemoveManyUserInput!]\n  AND: [FilterRemoveManyUserInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyUserOperatorsInput {\n  _id: FilterRemoveManyUser_idOperatorsInput\n  createdAt: FilterRemoveManyUserCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyUser_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyUserCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneValuePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Value\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneValueInput {\n  name: String!\n  attribute: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyValuePayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Value!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyValueInput {\n  name: String!\n  attribute: MongoID!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdValuePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Value\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdValueInput {\n  name: String\n  attribute: MongoID\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneValuePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Value\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneValueInput {\n  name: String\n  attribute: MongoID\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneValueInput {\n  name: String\n  attribute: MongoID\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneValueOperatorsInput\n  OR: [FilterUpdateOneValueInput!]\n  AND: [FilterUpdateOneValueInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneValueOperatorsInput {\n  name: FilterUpdateOneValueNameOperatorsInput\n  _id: FilterUpdateOneValue_idOperatorsInput\n  createdAt: FilterUpdateOneValueCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneValueNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneValue_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneValueCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneValueInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyValuePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyValueInput {\n  name: String\n  attribute: MongoID\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyValueInput {\n  name: String\n  attribute: MongoID\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyValueOperatorsInput\n  OR: [FilterUpdateManyValueInput!]\n  AND: [FilterUpdateManyValueInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyValueOperatorsInput {\n  name: FilterUpdateManyValueNameOperatorsInput\n  _id: FilterUpdateManyValue_idOperatorsInput\n  createdAt: FilterUpdateManyValueCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyValueNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyValue_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyValueCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyValueInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdValuePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Value\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneValuePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Value\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneValueInput {\n  name: String\n  attribute: MongoID\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneValueOperatorsInput\n  OR: [FilterRemoveOneValueInput!]\n  AND: [FilterRemoveOneValueInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneValueOperatorsInput {\n  name: FilterRemoveOneValueNameOperatorsInput\n  _id: FilterRemoveOneValue_idOperatorsInput\n  createdAt: FilterRemoveOneValueCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneValueNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneValue_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneValueCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneValueInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyValuePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyValueInput {\n  name: String\n  attribute: MongoID\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyValueOperatorsInput\n  OR: [FilterRemoveManyValueInput!]\n  AND: [FilterRemoveManyValueInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyValueOperatorsInput {\n  name: FilterRemoveManyValueNameOperatorsInput\n  _id: FilterRemoveManyValue_idOperatorsInput\n  createdAt: FilterRemoveManyValueCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyValueNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyValue_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyValueCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\ntype CreateOneWarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Created document\n  record: Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateOneWarehouseInput {\n  name: String!\n  email: String!\n  address: String!\n  phone: Float!\n  product_variants: [MongoID]\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype CreateManyWarehousePayload {\n  # Documents IDs\n  recordIds: [MongoID!]!\n\n  # Created documents\n  records: [Warehouse!]\n\n  # Number of created documents\n  createdCount: Int!\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput CreateManyWarehouseInput {\n  name: String!\n  email: String!\n  address: String!\n  phone: Float!\n  product_variants: [MongoID]\n  is_active: Boolean!\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateByIdWarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateByIdWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\ntype UpdateOneWarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Updated document\n  record: Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateOneWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateOneWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateOneWarehouseOperatorsInput\n  OR: [FilterUpdateOneWarehouseInput!]\n  AND: [FilterUpdateOneWarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateOneWarehouseOperatorsInput {\n  name: FilterUpdateOneWarehouseNameOperatorsInput\n  email: FilterUpdateOneWarehouseEmailOperatorsInput\n  address: FilterUpdateOneWarehouseAddressOperatorsInput\n  phone: FilterUpdateOneWarehousePhoneOperatorsInput\n  _id: FilterUpdateOneWarehouse_idOperatorsInput\n  createdAt: FilterUpdateOneWarehouseCreatedAtOperatorsInput\n}\n\ninput FilterUpdateOneWarehouseNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneWarehouseEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneWarehouseAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateOneWarehousePhoneOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateOneWarehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateOneWarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateOneWarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  PHONE_ASC\n  PHONE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype UpdateManyWarehousePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput UpdateManyWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  updatedAt: Date\n  createdAt: Date\n}\n\n#\ninput FilterUpdateManyWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterUpdateManyWarehouseOperatorsInput\n  OR: [FilterUpdateManyWarehouseInput!]\n  AND: [FilterUpdateManyWarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterUpdateManyWarehouseOperatorsInput {\n  name: FilterUpdateManyWarehouseNameOperatorsInput\n  email: FilterUpdateManyWarehouseEmailOperatorsInput\n  address: FilterUpdateManyWarehouseAddressOperatorsInput\n  phone: FilterUpdateManyWarehousePhoneOperatorsInput\n  _id: FilterUpdateManyWarehouse_idOperatorsInput\n  createdAt: FilterUpdateManyWarehouseCreatedAtOperatorsInput\n}\n\ninput FilterUpdateManyWarehouseNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyWarehouseEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyWarehouseAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterUpdateManyWarehousePhoneOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterUpdateManyWarehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterUpdateManyWarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortUpdateManyWarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  PHONE_ASC\n  PHONE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveByIdWarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\ntype RemoveOneWarehousePayload {\n  # Document ID\n  recordId: MongoID\n\n  # Removed document\n  record: Warehouse\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveOneWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveOneWarehouseOperatorsInput\n  OR: [FilterRemoveOneWarehouseInput!]\n  AND: [FilterRemoveOneWarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveOneWarehouseOperatorsInput {\n  name: FilterRemoveOneWarehouseNameOperatorsInput\n  email: FilterRemoveOneWarehouseEmailOperatorsInput\n  address: FilterRemoveOneWarehouseAddressOperatorsInput\n  phone: FilterRemoveOneWarehousePhoneOperatorsInput\n  _id: FilterRemoveOneWarehouse_idOperatorsInput\n  createdAt: FilterRemoveOneWarehouseCreatedAtOperatorsInput\n}\n\ninput FilterRemoveOneWarehouseNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneWarehouseEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneWarehouseAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveOneWarehousePhoneOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveOneWarehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveOneWarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n\nenum SortRemoveOneWarehouseInput {\n  _ID_ASC\n  _ID_DESC\n  NAME_ASC\n  NAME_DESC\n  EMAIL_ASC\n  EMAIL_DESC\n  ADDRESS_ASC\n  ADDRESS_DESC\n  PHONE_ASC\n  PHONE_DESC\n  CREATEDAT_ASC\n  CREATEDAT_DESC\n  CREATEDAT__UPDATEDAT_ASC\n  CREATEDAT__UPDATEDAT_DESC\n}\n\ntype RemoveManyWarehousePayload {\n  # Affected documents number\n  numAffected: Int\n\n  # Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.\n  error: ErrorInterface\n}\n\n#\ninput FilterRemoveManyWarehouseInput {\n  name: String\n  email: String\n  address: String\n  phone: Float\n  product_variants: [MongoID]\n  is_active: Boolean\n  _id: MongoID\n  updatedAt: Date\n  createdAt: Date\n\n  # List of *indexed* fields that can be filtered via operators.\n  _operators: FilterRemoveManyWarehouseOperatorsInput\n  OR: [FilterRemoveManyWarehouseInput!]\n  AND: [FilterRemoveManyWarehouseInput!]\n}\n\n# For performance reason this type contains only *indexed* fields.\ninput FilterRemoveManyWarehouseOperatorsInput {\n  name: FilterRemoveManyWarehouseNameOperatorsInput\n  email: FilterRemoveManyWarehouseEmailOperatorsInput\n  address: FilterRemoveManyWarehouseAddressOperatorsInput\n  phone: FilterRemoveManyWarehousePhoneOperatorsInput\n  _id: FilterRemoveManyWarehouse_idOperatorsInput\n  createdAt: FilterRemoveManyWarehouseCreatedAtOperatorsInput\n}\n\ninput FilterRemoveManyWarehouseNameOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyWarehouseEmailOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyWarehouseAddressOperatorsInput {\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  ne: String\n  in: [String]\n  nin: [String]\n  regex: RegExpAsString\n  exists: Boolean\n}\n\ninput FilterRemoveManyWarehousePhoneOperatorsInput {\n  gt: Float\n  gte: Float\n  lt: Float\n  lte: Float\n  ne: Float\n  in: [Float]\n  nin: [Float]\n  exists: Boolean\n}\n\ninput FilterRemoveManyWarehouse_idOperatorsInput {\n  gt: MongoID\n  gte: MongoID\n  lt: MongoID\n  lte: MongoID\n  ne: MongoID\n  in: [MongoID]\n  nin: [MongoID]\n  exists: Boolean\n}\n\ninput FilterRemoveManyWarehouseCreatedAtOperatorsInput {\n  gt: Date\n  gte: Date\n  lt: Date\n  lte: Date\n  ne: Date\n  in: [Date]\n  nin: [Date]\n  exists: Boolean\n}\n',
];
/* tslint:disable */

export interface Query {
  accountById: Account | null;
  accountByIds: Array<Account>;
  accountOne: Account | null;
  accountMany: Array<Account>;
  accountCount: number | null;
  accountConnection: AccountConnection | null;
  accountPagination: AccountPagination | null;
  adjustmentById: Adjustment | null;
  adjustmentByIds: Array<Adjustment>;
  adjustmentOne: Adjustment | null;
  adjustmentMany: Array<Adjustment>;
  adjustmentCount: number | null;
  adjustmentConnection: AdjustmentConnection | null;
  adjustmentPagination: AdjustmentPagination | null;
  AdjustmentWarehouseResolver: Adjustment | null;
  adjustmentProductAdjustmentsResolver: Adjustment | null;
  attributeById: Attribute | null;
  attributeByIds: Array<Attribute>;
  attributeOne: Attribute | null;
  attributeMany: Array<Attribute>;
  attributeCount: number | null;
  attributeConnection: AttributeConnection | null;
  attributePagination: AttributePagination | null;
  attributeValuesResolver: Attribute | null;
  brandById: Brand | null;
  brandByIds: Array<Brand>;
  brandOne: Brand | null;
  brandMany: Array<Brand>;
  brandCount: number | null;
  brandConnection: BrandConnection | null;
  brandPagination: BrandPagination | null;
  categoryById: Category | null;
  categoryByIds: Array<Category>;
  categoryOne: Category | null;
  categoryMany: Array<Category>;
  categoryCount: number | null;
  categoryConnection: CategoryConnection | null;
  categoryPagination: CategoryPagination | null;
  couponById: Coupon | null;
  couponByIds: Array<Coupon>;
  couponOne: Coupon | null;
  couponMany: Array<Coupon>;
  couponCount: number | null;
  couponConnection: CouponConnection | null;
  couponPagination: CouponPagination | null;
  couponUserResolver: Coupon | null;
  customerById: Customer | null;
  customerByIds: Array<Customer>;
  customerOne: Customer | null;
  customerMany: Array<Customer>;
  customerCount: number | null;
  customerConnection: CustomerConnection | null;
  customerPagination: CustomerPagination | null;
  customerGroupResolver: Customer | null;
  customerUserResolver: Customer | null;
  customerGroupById: Customer_Group | null;
  customerGroupByIds: Array<Customer_Group>;
  customerGroupOne: Customer_Group | null;
  customerGroupMany: Array<Customer_Group>;
  customerGroupCount: number | null;
  customerGroupConnection: Customer_GroupConnection | null;
  customerGroupPagination: Customer_GroupPagination | null;
  departmentById: Department | null;
  departmentByIds: Array<Department>;
  departmentOne: Department | null;
  departmentMany: Array<Department>;
  departmentCount: number | null;
  departmentConnection: DepartmentConnection | null;
  departmentPagination: DepartmentPagination | null;
  EmployeeById: Employee | null;
  EmployeeByIds: Array<Employee>;
  EmployeeOne: Employee | null;
  EmployeeMany: Array<Employee>;
  EmployeeCount: number | null;
  EmployeeConnection: EmployeeConnection | null;
  EmployeePagination: EmployeePagination | null;
  EmployeeRoleResolver: Employee | null;
  EmployeePersonnelResolver: Employee | null;
  EmployeePayrollResolver: Employee | null;
  productAdjustmentById: Product_Adjustment | null;
  productAdjustmentByIds: Array<Product_Adjustment>;
  productAdjustmentOne: Product_Adjustment | null;
  productAdjustmentMany: Array<Product_Adjustment>;
  productAdjustmentCount: number | null;
  productAdjustmentConnection: Product_AdjustmentConnection | null;
  productAdjustmentPagination: Product_AdjustmentPagination | null;
  ProductAdjustmentProductResolver: Product_Adjustment | null;
  ProductAdjustmentVariantIDResolver: Product_Adjustment | null;
  productPurchaseById: Product_Purchase | null;
  productPurchaseByIds: Array<Product_Purchase>;
  productPurchaseOne: Product_Purchase | null;
  productPurchaseMany: Array<Product_Purchase>;
  productPurchaseCount: number | null;
  productPurchaseConnection: Product_PurchaseConnection | null;
  productPurchasePagination: Product_PurchasePagination | null;
  productPurchasePurchaseResolver: Product_Purchase | null;
  productPurchaseUnitResolver: Product_Purchase | null;
  productPurchaseVariantResolver: Product_Purchase | null;
  productQuotationById: Product_Quotation | null;
  productQuotationByIds: Array<Product_Quotation>;
  productQuotationOne: Product_Quotation | null;
  productQuotationMany: Array<Product_Quotation>;
  productQuotationCount: number | null;
  productQuotationConnection: Product_QuotationConnection | null;
  productQuotationPagination: Product_QuotationPagination | null;
  productQuotationResolver: Product_Quotation | null;
  productQuotationUnitResolver: Product_Quotation | null;
  productQuotationVariantResolver: Product_Quotation | null;
  productReturnById: Product_Return | null;
  productReturnByIds: Array<Product_Return>;
  productReturnOne: Product_Return | null;
  productReturnMany: Array<Product_Return>;
  productReturnCount: number | null;
  productReturnConnection: Product_ReturnConnection | null;
  productReturnPagination: Product_ReturnPagination | null;
  productReturnResolver: Product_Return | null;
  productReturnUnitResolver: Product_Return | null;
  productReturnVariantResolver: Product_Return | null;
  productSaleById: Product_Sale | null;
  productSaleByIds: Array<Product_Sale>;
  productSaleOne: Product_Sale | null;
  productSaleMany: Array<Product_Sale>;
  productSaleCount: number | null;
  productSaleConnection: Product_SaleConnection | null;
  productSalePagination: Product_SalePagination | null;
  productSaleResolver: Product_Sale | null;
  productSaleUnitResolver: Product_Sale | null;
  productSaleVariantResolver: Product_Sale | null;
  productSupplierById: Product_Supplier | null;
  productSupplierByIds: Array<Product_Supplier>;
  productSupplierOne: Product_Supplier | null;
  productSupplierMany: Array<Product_Supplier>;
  productSupplierCount: number | null;
  productSupplierConnection: Product_SupplierConnection | null;
  productSupplierPagination: Product_SupplierPagination | null;
  productSupplierProductVariantResolver: Product_Supplier | null;
  productSupplierSupplierResolver: Product_Supplier | null;
  ProductTransferById: Product_Transfer | null;
  ProductTransferByIds: Array<Product_Transfer>;
  ProductTransferOne: Product_Transfer | null;
  ProductTransferMany: Array<Product_Transfer>;
  ProductTransferCount: number | null;
  ProductTransferConnection: Product_TransferConnection | null;
  ProductTransferPagination: Product_TransferPagination | null;
  ProductTransferPurchaseResolver: Product_Transfer | null;
  ProductTransferUnitResolver: Product_Transfer | null;
  ProductTransferVariantResolver: Product_Transfer | null;
  productVariantById: Product_Variant | null;
  productVariantByIds: Array<Product_Variant>;
  productVariantOne: Product_Variant | null;
  productVariantMany: Array<Product_Variant>;
  productVariantCount: number | null;
  productVariantConnection: Product_VariantConnection | null;
  productVariantPagination: Product_VariantPagination | null;
  ProductVariantProductResolver: Product_Variant | null;
  ProductVariantVariantIDResolver: Product_Variant | null;
  ProductVariantUnitResolver: Product_Variant | null;
  ProductVariantCategoryResolver: Product_Variant | null;
  ProductVariantSuppliersResolver: Product_Variant | null;
  ProductVariantPurchaseUnitResolver: Product_Variant | null;
  ProductVariantSaleUnitResolver: Product_Variant | null;
  productWarehouseById: Product_Warehouse | null;
  productWarehouseByIds: Array<Product_Warehouse>;
  productWarehouseOne: Product_Warehouse | null;
  productWarehouseMany: Array<Product_Warehouse>;
  productWarehouseCount: number | null;
  productWarehouseConnection: Product_WarehouseConnection | null;
  productWarehousePagination: Product_WarehousePagination | null;
  productWarehouseProductResolver: Product_Warehouse | null;
  productWarehouseVariantIDResolver: Product_Warehouse | null;
  productById: Product | null;
  productByIds: Array<Product>;
  productOne: Product | null;
  productMany: Array<Product>;
  productCount: number | null;
  productConnection: ProductConnection | null;
  productPagination: ProductPagination | null;
  purchaseById: Purchase | null;
  purchaseByIds: Array<Purchase>;
  purchaseOne: Purchase | null;
  purchaseMany: Array<Purchase>;
  purchaseCount: number | null;
  purchaseConnection: PurchaseConnection | null;
  purchasePagination: PurchasePagination | null;
  purchaseWarehouseResolver: Purchase | null;
  purchaseSupplierResolver: Purchase | null;
  purchaseUserResolver: Purchase | null;
  purchaseProductPurchasesResolver: Purchase | null;
  purchaseProductPurchaseReturnsResolver: Purchase | null;
  quotationById: Quotation | null;
  quotationByIds: Array<Quotation>;
  quotationOne: Quotation | null;
  quotationMany: Array<Quotation>;
  quotationCount: number | null;
  quotationConnection: QuotationConnection | null;
  quotationPagination: QuotationPagination | null;
  quotationWarehouseResolver: Quotation | null;
  quotationSupplierResolver: Quotation | null;
  quotationUserResolver: Quotation | null;
  quotationCustomerResolver: Quotation | null;
  quotationBillerResolver: Quotation | null;
  quotationProductQuotationsResolver: Quotation | null;
  returnById: Return | null;
  returnByIds: Array<Return>;
  returnOne: Return | null;
  returnMany: Array<Return>;
  returnCount: number | null;
  returnConnection: ReturnConnection | null;
  returnPagination: ReturnPagination | null;
  returnWarehouseResolver: Return | null;
  returnAccountResolver: Return | null;
  returnUserResolver: Return | null;
  returnCustomerResolver: Return | null;
  returnBillerResolver: Return | null;
  returnProductReturnsResolver: Return | null;
  roleById: Role | null;
  roleByIds: Array<Role>;
  roleOne: Role | null;
  roleMany: Array<Role>;
  roleCount: number | null;
  roleConnection: RoleConnection | null;
  rolePagination: RolePagination | null;
  supplierById: Supplier | null;
  supplierByIds: Array<Supplier>;
  supplierOne: Supplier | null;
  supplierMany: Array<Supplier>;
  supplierCount: number | null;
  supplierConnection: SupplierConnection | null;
  supplierPagination: SupplierPagination | null;
  taxById: Tax | null;
  taxByIds: Array<Tax>;
  taxOne: Tax | null;
  taxMany: Array<Tax>;
  taxCount: number | null;
  taxConnection: TaxConnection | null;
  taxPagination: TaxPagination | null;
  transferById: Transfer | null;
  transferByIds: Array<Transfer>;
  transferOne: Transfer | null;
  transferMany: Array<Transfer>;
  transferCount: number | null;
  transferConnection: TransferConnection | null;
  transferPagination: TransferPagination | null;
  transferToWarehouseResolver: Transfer | null;
  transferFromWarehouseResolver: Transfer | null;
  transferUserResolver: Transfer | null;
  transferProductTransfersResolver: Transfer | null;
  unitById: Unit | null;
  unitByIds: Array<Unit>;
  unitOne: Unit | null;
  unitMany: Array<Unit>;
  unitCount: number | null;
  unitConnection: UnitConnection | null;
  unitPagination: UnitPagination | null;
  userById: User | null;
  userByIds: Array<User>;
  userOne: User | null;
  userMany: Array<User>;
  userCount: number | null;
  userConnection: UserConnection | null;
  userPagination: UserPagination | null;
  userRoleResolver: User | null;
  userWarehousesResolver: User | null;
  userPersonnelResolver: User | null;
  valueById: Value | null;
  valueByIds: Array<Value>;
  valueOne: Value | null;
  valueMany: Array<Value>;
  valueCount: number | null;
  valueConnection: ValueConnection | null;
  valuePagination: ValuePagination | null;
  valueAttributeResolver: Value | null;
  warehouseById: Warehouse | null;
  warehouseByIds: Array<Warehouse>;
  warehouseOne: Warehouse | null;
  warehouseMany: Array<Warehouse>;
  warehouseCount: number | null;
  warehouseConnection: WarehouseConnection | null;
  warehousePagination: WarehousePagination | null;
}

export interface AccountByIdQueryArgs {
  _id: MongoID;
}

export interface AccountByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsAccountInput | null;
}

export interface AccountOneQueryArgs {
  filter: FilterFindOneAccountInput | null;
  skip: number | null;
  sort: SortFindOneAccountInput | null;
}

export interface AccountManyQueryArgs {
  filter: FilterFindManyAccountInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyAccountInput | null;
}

export interface AccountCountQueryArgs {
  filter: FilterCountAccountInput | null;
}

export interface AccountConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyAccountInput | null;
  sort: SortConnectionAccountEnum | null;
}

export interface AccountPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyAccountInput | null;
  sort: SortFindManyAccountInput | null;
}

export interface AdjustmentByIdQueryArgs {
  _id: MongoID;
}

export interface AdjustmentByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsAdjustmentInput | null;
}

export interface AdjustmentOneQueryArgs {
  filter: FilterFindOneAdjustmentInput | null;
  skip: number | null;
  sort: SortFindOneAdjustmentInput | null;
}

export interface AdjustmentManyQueryArgs {
  filter: FilterFindManyAdjustmentInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyAdjustmentInput | null;
}

export interface AdjustmentCountQueryArgs {
  filter: FilterCountAdjustmentInput | null;
}

export interface AdjustmentConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyAdjustmentInput | null;
  sort: SortConnectionAdjustmentEnum | null;
}

export interface AdjustmentPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyAdjustmentInput | null;
  sort: SortFindManyAdjustmentInput | null;
}

export interface AttributeByIdQueryArgs {
  _id: MongoID;
}

export interface AttributeByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsAttributeInput | null;
}

export interface AttributeOneQueryArgs {
  filter: FilterFindOneAttributeInput | null;
  skip: number | null;
  sort: SortFindOneAttributeInput | null;
}

export interface AttributeManyQueryArgs {
  filter: FilterFindManyAttributeInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyAttributeInput | null;
}

export interface AttributeCountQueryArgs {
  filter: FilterCountAttributeInput | null;
}

export interface AttributeConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyAttributeInput | null;
  sort: SortConnectionAttributeEnum | null;
}

export interface AttributePaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyAttributeInput | null;
  sort: SortFindManyAttributeInput | null;
}

export interface BrandByIdQueryArgs {
  _id: MongoID;
}

export interface BrandByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsBrandInput | null;
}

export interface BrandOneQueryArgs {
  filter: FilterFindOneBrandInput | null;
  skip: number | null;
  sort: SortFindOneBrandInput | null;
}

export interface BrandManyQueryArgs {
  filter: FilterFindManyBrandInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyBrandInput | null;
}

export interface BrandCountQueryArgs {
  filter: FilterCountBrandInput | null;
}

export interface BrandConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyBrandInput | null;
  sort: SortConnectionBrandEnum | null;
}

export interface BrandPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyBrandInput | null;
  sort: SortFindManyBrandInput | null;
}

export interface CategoryByIdQueryArgs {
  _id: MongoID;
}

export interface CategoryByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsCategoryInput | null;
}

export interface CategoryOneQueryArgs {
  filter: FilterFindOneCategoryInput | null;
  skip: number | null;
  sort: SortFindOneCategoryInput | null;
}

export interface CategoryManyQueryArgs {
  filter: FilterFindManyCategoryInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyCategoryInput | null;
}

export interface CategoryCountQueryArgs {
  filter: FilterCountCategoryInput | null;
}

export interface CategoryConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyCategoryInput | null;
  sort: SortConnectionCategoryEnum | null;
}

export interface CategoryPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyCategoryInput | null;
  sort: SortFindManyCategoryInput | null;
}

export interface CouponByIdQueryArgs {
  _id: MongoID;
}

export interface CouponByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsCouponInput | null;
}

export interface CouponOneQueryArgs {
  filter: FilterFindOneCouponInput | null;
  skip: number | null;
  sort: SortFindOneCouponInput | null;
}

export interface CouponManyQueryArgs {
  filter: FilterFindManyCouponInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyCouponInput | null;
}

export interface CouponCountQueryArgs {
  filter: FilterCountCouponInput | null;
}

export interface CouponConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyCouponInput | null;
  sort: SortConnectionCouponEnum | null;
}

export interface CouponPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyCouponInput | null;
  sort: SortFindManyCouponInput | null;
}

export interface CustomerByIdQueryArgs {
  _id: MongoID;
}

export interface CustomerByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsCustomerInput | null;
}

export interface CustomerOneQueryArgs {
  filter: FilterFindOneCustomerInput | null;
  skip: number | null;
  sort: SortFindOneCustomerInput | null;
}

export interface CustomerManyQueryArgs {
  filter: FilterFindManyCustomerInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyCustomerInput | null;
}

export interface CustomerCountQueryArgs {
  filter: FilterCountCustomerInput | null;
}

export interface CustomerConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyCustomerInput | null;
  sort: SortConnectionCustomerEnum | null;
}

export interface CustomerPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyCustomerInput | null;
  sort: SortFindManyCustomerInput | null;
}

export interface CustomerGroupByIdQueryArgs {
  _id: MongoID;
}

export interface CustomerGroupByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsCustomer_GroupInput | null;
}

export interface CustomerGroupOneQueryArgs {
  filter: FilterFindOneCustomer_GroupInput | null;
  skip: number | null;
  sort: SortFindOneCustomer_GroupInput | null;
}

export interface CustomerGroupManyQueryArgs {
  filter: FilterFindManyCustomer_GroupInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyCustomer_GroupInput | null;
}

export interface CustomerGroupCountQueryArgs {
  filter: FilterCountCustomer_GroupInput | null;
}

export interface CustomerGroupConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyCustomer_GroupInput | null;
  sort: SortConnectionCustomer_GroupEnum | null;
}

export interface CustomerGroupPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyCustomer_GroupInput | null;
  sort: SortFindManyCustomer_GroupInput | null;
}

export interface DepartmentByIdQueryArgs {
  _id: MongoID;
}

export interface DepartmentByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsDepartmentInput | null;
}

export interface DepartmentOneQueryArgs {
  filter: FilterFindOneDepartmentInput | null;
  skip: number | null;
  sort: SortFindOneDepartmentInput | null;
}

export interface DepartmentManyQueryArgs {
  filter: FilterFindManyDepartmentInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyDepartmentInput | null;
}

export interface DepartmentCountQueryArgs {
  filter: FilterCountDepartmentInput | null;
}

export interface DepartmentConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyDepartmentInput | null;
  sort: SortConnectionDepartmentEnum | null;
}

export interface DepartmentPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyDepartmentInput | null;
  sort: SortFindManyDepartmentInput | null;
}

export interface EmployeeByIdQueryArgs {
  _id: MongoID;
}

export interface EmployeeByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsEmployeeInput | null;
}

export interface EmployeeOneQueryArgs {
  filter: FilterFindOneEmployeeInput | null;
  skip: number | null;
  sort: SortFindOneEmployeeInput | null;
}

export interface EmployeeManyQueryArgs {
  filter: FilterFindManyEmployeeInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyEmployeeInput | null;
}

export interface EmployeeCountQueryArgs {
  filter: FilterCountEmployeeInput | null;
}

export interface EmployeeConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyEmployeeInput | null;
  sort: SortConnectionEmployeeEnum | null;
}

export interface EmployeePaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyEmployeeInput | null;
  sort: SortFindManyEmployeeInput | null;
}

export interface ProductAdjustmentByIdQueryArgs {
  _id: MongoID;
}

export interface ProductAdjustmentByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_AdjustmentInput | null;
}

export interface ProductAdjustmentOneQueryArgs {
  filter: FilterFindOneProduct_AdjustmentInput | null;
  skip: number | null;
  sort: SortFindOneProduct_AdjustmentInput | null;
}

export interface ProductAdjustmentManyQueryArgs {
  filter: FilterFindManyProduct_AdjustmentInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProduct_AdjustmentInput | null;
}

export interface ProductAdjustmentCountQueryArgs {
  filter: FilterCountProduct_AdjustmentInput | null;
}

export interface ProductAdjustmentConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProduct_AdjustmentInput | null;
  sort: SortConnectionProduct_AdjustmentEnum | null;
}

export interface ProductAdjustmentPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProduct_AdjustmentInput | null;
  sort: SortFindManyProduct_AdjustmentInput | null;
}

export interface ProductPurchaseByIdQueryArgs {
  _id: MongoID;
}

export interface ProductPurchaseByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_PurchaseInput | null;
}

export interface ProductPurchaseOneQueryArgs {
  filter: FilterFindOneProduct_PurchaseInput | null;
  skip: number | null;
  sort: SortFindOneProduct_PurchaseInput | null;
}

export interface ProductPurchaseManyQueryArgs {
  filter: FilterFindManyProduct_PurchaseInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProduct_PurchaseInput | null;
}

export interface ProductPurchaseCountQueryArgs {
  filter: FilterCountProduct_PurchaseInput | null;
}

export interface ProductPurchaseConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProduct_PurchaseInput | null;
  sort: SortConnectionProduct_PurchaseEnum | null;
}

export interface ProductPurchasePaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProduct_PurchaseInput | null;
  sort: SortFindManyProduct_PurchaseInput | null;
}

export interface ProductQuotationByIdQueryArgs {
  _id: MongoID;
}

export interface ProductQuotationByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_QuotationInput | null;
}

export interface ProductQuotationOneQueryArgs {
  filter: FilterFindOneProduct_QuotationInput | null;
  skip: number | null;
  sort: SortFindOneProduct_QuotationInput | null;
}

export interface ProductQuotationManyQueryArgs {
  filter: FilterFindManyProduct_QuotationInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProduct_QuotationInput | null;
}

export interface ProductQuotationCountQueryArgs {
  filter: FilterCountProduct_QuotationInput | null;
}

export interface ProductQuotationConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProduct_QuotationInput | null;
  sort: SortConnectionProduct_QuotationEnum | null;
}

export interface ProductQuotationPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProduct_QuotationInput | null;
  sort: SortFindManyProduct_QuotationInput | null;
}

export interface ProductReturnByIdQueryArgs {
  _id: MongoID;
}

export interface ProductReturnByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_ReturnInput | null;
}

export interface ProductReturnOneQueryArgs {
  filter: FilterFindOneProduct_ReturnInput | null;
  skip: number | null;
  sort: SortFindOneProduct_ReturnInput | null;
}

export interface ProductReturnManyQueryArgs {
  filter: FilterFindManyProduct_ReturnInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProduct_ReturnInput | null;
}

export interface ProductReturnCountQueryArgs {
  filter: FilterCountProduct_ReturnInput | null;
}

export interface ProductReturnConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProduct_ReturnInput | null;
  sort: SortConnectionProduct_ReturnEnum | null;
}

export interface ProductReturnPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProduct_ReturnInput | null;
  sort: SortFindManyProduct_ReturnInput | null;
}

export interface ProductSaleByIdQueryArgs {
  _id: MongoID;
}

export interface ProductSaleByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_SaleInput | null;
}

export interface ProductSaleOneQueryArgs {
  filter: FilterFindOneProduct_SaleInput | null;
  skip: number | null;
  sort: SortFindOneProduct_SaleInput | null;
}

export interface ProductSaleManyQueryArgs {
  filter: FilterFindManyProduct_SaleInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProduct_SaleInput | null;
}

export interface ProductSaleCountQueryArgs {
  filter: FilterCountProduct_SaleInput | null;
}

export interface ProductSaleConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProduct_SaleInput | null;
  sort: SortConnectionProduct_SaleEnum | null;
}

export interface ProductSalePaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProduct_SaleInput | null;
  sort: SortFindManyProduct_SaleInput | null;
}

export interface ProductSupplierByIdQueryArgs {
  _id: MongoID;
}

export interface ProductSupplierByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_SupplierInput | null;
}

export interface ProductSupplierOneQueryArgs {
  filter: FilterFindOneProduct_SupplierInput | null;
  skip: number | null;
  sort: SortFindOneProduct_SupplierInput | null;
}

export interface ProductSupplierManyQueryArgs {
  filter: FilterFindManyProduct_SupplierInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProduct_SupplierInput | null;
}

export interface ProductSupplierCountQueryArgs {
  filter: FilterCountProduct_SupplierInput | null;
}

export interface ProductSupplierConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProduct_SupplierInput | null;
  sort: SortConnectionProduct_SupplierEnum | null;
}

export interface ProductSupplierPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProduct_SupplierInput | null;
  sort: SortFindManyProduct_SupplierInput | null;
}

export interface ProductTransferByIdQueryArgs {
  _id: MongoID;
}

export interface ProductTransferByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_TransferInput | null;
}

export interface ProductTransferOneQueryArgs {
  filter: FilterFindOneProduct_TransferInput | null;
  skip: number | null;
  sort: SortFindOneProduct_TransferInput | null;
}

export interface ProductTransferManyQueryArgs {
  filter: FilterFindManyProduct_TransferInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProduct_TransferInput | null;
}

export interface ProductTransferCountQueryArgs {
  filter: FilterCountProduct_TransferInput | null;
}

export interface ProductTransferConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProduct_TransferInput | null;
  sort: SortConnectionProduct_TransferEnum | null;
}

export interface ProductTransferPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProduct_TransferInput | null;
  sort: SortFindManyProduct_TransferInput | null;
}

export interface ProductVariantByIdQueryArgs {
  _id: MongoID;
}

export interface ProductVariantByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_VariantInput | null;
}

export interface ProductVariantOneQueryArgs {
  filter: FilterFindOneProduct_VariantInput | null;
  skip: number | null;
  sort: SortFindOneProduct_VariantInput | null;
}

export interface ProductVariantManyQueryArgs {
  filter: FilterFindManyProduct_VariantInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProduct_VariantInput | null;
}

export interface ProductVariantCountQueryArgs {
  filter: FilterCountProduct_VariantInput | null;
}

export interface ProductVariantConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProduct_VariantInput | null;
  sort: SortConnectionProduct_VariantEnum | null;
}

export interface ProductVariantPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProduct_VariantInput | null;
  sort: SortFindManyProduct_VariantInput | null;
}

export interface ProductWarehouseByIdQueryArgs {
  _id: MongoID;
}

export interface ProductWarehouseByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_WarehouseInput | null;
}

export interface ProductWarehouseOneQueryArgs {
  filter: FilterFindOneProduct_WarehouseInput | null;
  skip: number | null;
  sort: SortFindOneProduct_WarehouseInput | null;
}

export interface ProductWarehouseManyQueryArgs {
  filter: FilterFindManyProduct_WarehouseInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProduct_WarehouseInput | null;
}

export interface ProductWarehouseCountQueryArgs {
  filter: FilterCountProduct_WarehouseInput | null;
}

export interface ProductWarehouseConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProduct_WarehouseInput | null;
  sort: SortConnectionProduct_WarehouseEnum | null;
}

export interface ProductWarehousePaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProduct_WarehouseInput | null;
  sort: SortFindManyProduct_WarehouseInput | null;
}

export interface ProductByIdQueryArgs {
  _id: MongoID;
}

export interface ProductByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProductInput | null;
}

export interface ProductOneQueryArgs {
  filter: FilterFindOneProductInput | null;
  skip: number | null;
  sort: SortFindOneProductInput | null;
}

export interface ProductManyQueryArgs {
  filter: FilterFindManyProductInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyProductInput | null;
}

export interface ProductCountQueryArgs {
  filter: FilterCountProductInput | null;
}

export interface ProductConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyProductInput | null;
  sort: SortConnectionProductEnum | null;
}

export interface ProductPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyProductInput | null;
  sort: SortFindManyProductInput | null;
}

export interface PurchaseByIdQueryArgs {
  _id: MongoID;
}

export interface PurchaseByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsPurchaseInput | null;
}

export interface PurchaseOneQueryArgs {
  filter: FilterFindOnePurchaseInput | null;
  skip: number | null;
  sort: SortFindOnePurchaseInput | null;
}

export interface PurchaseManyQueryArgs {
  filter: FilterFindManyPurchaseInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyPurchaseInput | null;
}

export interface PurchaseCountQueryArgs {
  filter: FilterCountPurchaseInput | null;
}

export interface PurchaseConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyPurchaseInput | null;
  sort: SortConnectionPurchaseEnum | null;
}

export interface PurchasePaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyPurchaseInput | null;
  sort: SortFindManyPurchaseInput | null;
}

export interface QuotationByIdQueryArgs {
  _id: MongoID;
}

export interface QuotationByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsQuotationInput | null;
}

export interface QuotationOneQueryArgs {
  filter: FilterFindOneQuotationInput | null;
  skip: number | null;
  sort: SortFindOneQuotationInput | null;
}

export interface QuotationManyQueryArgs {
  filter: FilterFindManyQuotationInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyQuotationInput | null;
}

export interface QuotationCountQueryArgs {
  filter: FilterCountQuotationInput | null;
}

export interface QuotationConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyQuotationInput | null;
  sort: SortConnectionQuotationEnum | null;
}

export interface QuotationPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyQuotationInput | null;
  sort: SortFindManyQuotationInput | null;
}

export interface ReturnByIdQueryArgs {
  _id: MongoID;
}

export interface ReturnByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsReturnInput | null;
}

export interface ReturnOneQueryArgs {
  filter: FilterFindOneReturnInput | null;
  skip: number | null;
  sort: SortFindOneReturnInput | null;
}

export interface ReturnManyQueryArgs {
  filter: FilterFindManyReturnInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyReturnInput | null;
}

export interface ReturnCountQueryArgs {
  filter: FilterCountReturnInput | null;
}

export interface ReturnConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyReturnInput | null;
  sort: SortConnectionReturnEnum | null;
}

export interface ReturnPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyReturnInput | null;
  sort: SortFindManyReturnInput | null;
}

export interface RoleByIdQueryArgs {
  _id: MongoID;
}

export interface RoleByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsRoleInput | null;
}

export interface RoleOneQueryArgs {
  filter: FilterFindOneRoleInput | null;
  skip: number | null;
  sort: SortFindOneRoleInput | null;
}

export interface RoleManyQueryArgs {
  filter: FilterFindManyRoleInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyRoleInput | null;
}

export interface RoleCountQueryArgs {
  filter: FilterCountRoleInput | null;
}

export interface RoleConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyRoleInput | null;
  sort: SortConnectionRoleEnum | null;
}

export interface RolePaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyRoleInput | null;
  sort: SortFindManyRoleInput | null;
}

export interface SupplierByIdQueryArgs {
  _id: MongoID;
}

export interface SupplierByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsSupplierInput | null;
}

export interface SupplierOneQueryArgs {
  filter: FilterFindOneSupplierInput | null;
  skip: number | null;
  sort: SortFindOneSupplierInput | null;
}

export interface SupplierManyQueryArgs {
  filter: FilterFindManySupplierInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManySupplierInput | null;
}

export interface SupplierCountQueryArgs {
  filter: FilterCountSupplierInput | null;
}

export interface SupplierConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManySupplierInput | null;
  sort: SortConnectionSupplierEnum | null;
}

export interface SupplierPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManySupplierInput | null;
  sort: SortFindManySupplierInput | null;
}

export interface TaxByIdQueryArgs {
  _id: MongoID;
}

export interface TaxByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsTaxInput | null;
}

export interface TaxOneQueryArgs {
  filter: FilterFindOneTaxInput | null;
  skip: number | null;
  sort: SortFindOneTaxInput | null;
}

export interface TaxManyQueryArgs {
  filter: FilterFindManyTaxInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyTaxInput | null;
}

export interface TaxCountQueryArgs {
  filter: FilterCountTaxInput | null;
}

export interface TaxConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyTaxInput | null;
  sort: SortConnectionTaxEnum | null;
}

export interface TaxPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyTaxInput | null;
  sort: SortFindManyTaxInput | null;
}

export interface TransferByIdQueryArgs {
  _id: MongoID;
}

export interface TransferByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsTransferInput | null;
}

export interface TransferOneQueryArgs {
  filter: FilterFindOneTransferInput | null;
  skip: number | null;
  sort: SortFindOneTransferInput | null;
}

export interface TransferManyQueryArgs {
  filter: FilterFindManyTransferInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyTransferInput | null;
}

export interface TransferCountQueryArgs {
  filter: FilterCountTransferInput | null;
}

export interface TransferConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyTransferInput | null;
  sort: SortConnectionTransferEnum | null;
}

export interface TransferPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyTransferInput | null;
  sort: SortFindManyTransferInput | null;
}

export interface UnitByIdQueryArgs {
  _id: MongoID;
}

export interface UnitByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsUnitInput | null;
}

export interface UnitOneQueryArgs {
  filter: FilterFindOneUnitInput | null;
  skip: number | null;
  sort: SortFindOneUnitInput | null;
}

export interface UnitManyQueryArgs {
  filter: FilterFindManyUnitInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyUnitInput | null;
}

export interface UnitCountQueryArgs {
  filter: FilterCountUnitInput | null;
}

export interface UnitConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyUnitInput | null;
  sort: SortConnectionUnitEnum | null;
}

export interface UnitPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyUnitInput | null;
  sort: SortFindManyUnitInput | null;
}

export interface UserByIdQueryArgs {
  _id: MongoID;
}

export interface UserByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsUserInput | null;
}

export interface UserOneQueryArgs {
  filter: FilterFindOneUserInput | null;
  skip: number | null;
  sort: SortFindOneUserInput | null;
}

export interface UserManyQueryArgs {
  filter: FilterFindManyUserInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyUserInput | null;
}

export interface UserCountQueryArgs {
  filter: FilterCountUserInput | null;
}

export interface UserConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyUserInput | null;
  sort: SortConnectionUserEnum | null;
}

export interface UserPaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyUserInput | null;
  sort: SortFindManyUserInput | null;
}

export interface ValueByIdQueryArgs {
  _id: MongoID;
}

export interface ValueByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsValueInput | null;
}

export interface ValueOneQueryArgs {
  filter: FilterFindOneValueInput | null;
  skip: number | null;
  sort: SortFindOneValueInput | null;
}

export interface ValueManyQueryArgs {
  filter: FilterFindManyValueInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyValueInput | null;
}

export interface ValueCountQueryArgs {
  filter: FilterCountValueInput | null;
}

export interface ValueConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyValueInput | null;
  sort: SortConnectionValueEnum | null;
}

export interface ValuePaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyValueInput | null;
  sort: SortFindManyValueInput | null;
}

export interface WarehouseByIdQueryArgs {
  _id: MongoID;
}

export interface WarehouseByIdsQueryArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsWarehouseInput | null;
}

export interface WarehouseOneQueryArgs {
  filter: FilterFindOneWarehouseInput | null;
  skip: number | null;
  sort: SortFindOneWarehouseInput | null;
}

export interface WarehouseManyQueryArgs {
  filter: FilterFindManyWarehouseInput | null;
  skip: number | null;
  limit: number | null;
  sort: SortFindManyWarehouseInput | null;
}

export interface WarehouseCountQueryArgs {
  filter: FilterCountWarehouseInput | null;
}

export interface WarehouseConnectionQueryArgs {
  first: number | null;
  after: string | null;
  last: number | null;
  before: string | null;
  filter: FilterFindManyWarehouseInput | null;
  sort: SortConnectionWarehouseEnum | null;
}

export interface WarehousePaginationQueryArgs {
  page: number | null;
  perPage: number | null;
  filter: FilterFindManyWarehouseInput | null;
  sort: SortFindManyWarehouseInput | null;
}

export type MongoID = any;

export interface Account {
  account_no: string;
  name: string;
  initial_balance: number;
  total_Balance: number;
  note: string | null;
  is_default: boolean;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type Date = any;

export type SortFindByIdsAccountInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ACCOUNT_NO_ASC"
  | "ACCOUNT_NO_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneAccountOperatorsInput | null;
  OR: Array<FilterFindOneAccountInput>;
  AND: Array<FilterFindOneAccountInput>;
}

export interface FilterFindOneAccountOperatorsInput {
  account_no: FilterFindOneAccountAccount_noOperatorsInput | null;
  name: FilterFindOneAccountNameOperatorsInput | null;
  note: FilterFindOneAccountNoteOperatorsInput | null;
  _id: FilterFindOneAccount_idOperatorsInput | null;
  createdAt: FilterFindOneAccountCreatedAtOperatorsInput | null;
}

export interface FilterFindOneAccountAccount_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export type RegExpAsString = any;

export interface FilterFindOneAccountNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneAccountNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneAccount_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneAccountCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneAccountInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ACCOUNT_NO_ASC"
  | "ACCOUNT_NO_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyAccountOperatorsInput | null;
  OR: Array<FilterFindManyAccountInput>;
  AND: Array<FilterFindManyAccountInput>;
}

export interface FilterFindManyAccountOperatorsInput {
  account_no: FilterFindManyAccountAccount_noOperatorsInput | null;
  name: FilterFindManyAccountNameOperatorsInput | null;
  note: FilterFindManyAccountNoteOperatorsInput | null;
  _id: FilterFindManyAccount_idOperatorsInput | null;
  createdAt: FilterFindManyAccountCreatedAtOperatorsInput | null;
}

export interface FilterFindManyAccountAccount_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyAccountNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyAccountNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyAccount_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyAccountCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyAccountInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ACCOUNT_NO_ASC"
  | "ACCOUNT_NO_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountAccountOperatorsInput | null;
  OR: Array<FilterCountAccountInput>;
  AND: Array<FilterCountAccountInput>;
}

export interface FilterCountAccountOperatorsInput {
  account_no: FilterCountAccountAccount_noOperatorsInput | null;
  name: FilterCountAccountNameOperatorsInput | null;
  note: FilterCountAccountNoteOperatorsInput | null;
  _id: FilterCountAccount_idOperatorsInput | null;
  createdAt: FilterCountAccountCreatedAtOperatorsInput | null;
}

export interface FilterCountAccountAccount_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountAccountNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountAccountNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountAccount_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountAccountCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionAccountEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "ACCOUNT_NO_DESC"
  | "ACCOUNT_NO_ASC"
  | "NAME_DESC"
  | "NAME_ASC"
  | "NOTE_DESC"
  | "NOTE_ASC";

export interface AccountConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<AccountEdge>;
}

export interface PageInfo {
  hasNextPage: boolean;
  hasPreviousPage: boolean;
  startCursor: string | null;
  endCursor: string | null;
}

export interface AccountEdge {
  node: Account;
  cursor: string;
}

export interface AccountPagination {
  count: number | null;
  items: Array<Account>;
  pageInfo: PaginationInfo;
}

export interface PaginationInfo {
  currentPage: number;
  perPage: number;
  pageCount: number | null;
  itemCount: number | null;
  hasNextPage: boolean | null;
  hasPreviousPage: boolean | null;
}

export interface Adjustment {
  reference_no: string;
  item: number;
  total_qty: number;
  total_discount: number;
  warehouse: Warehouse | null;
  product_adjustments: Array<Product_Adjustment>;
  document: string | null;
  note: string | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface ProductAdjustmentsAdjustmentArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_AdjustmentInput | null;
}

export interface Warehouse {
  name: string;
  email: string;
  address: string;
  phone: number;
  product_variants: Array<MongoID> | null;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
  product_variantss: Array<Product_Variant>;
}

export interface ProductVariantssWarehouseArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_VariantInput | null;
}

export type SortFindByIdsProduct_VariantInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "VARIANT_ASC"
  | "VARIANT_DESC"
  | "ITEM_CODE_ASC"
  | "ITEM_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface Product_Variant {
  variant: Variant | null;
  product: Product | null;
  unit: Unit | null;
  category: Category | null;
  tax: Tax | null;
  purchase_unit: MongoID;
  sale_unit: Unit | null;
  productSuppliers: Array<Product_Supplier>;
  product_type: EnumProduct_VariantProduct_type;
  barcode_symbology: string;
  item_code: string;
  qty: number;
  position: number;
  additional_price: number;
  alert_qty: number | null;
  promotion: boolean;
  promotion_price: number;
  price: number;
  cost: number;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
  pruchase_unit: Unit | null;
}

export interface ProductSuppliersProduct_VariantArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_SupplierInput | null;
}

export interface Variant {
  name: string;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface Product {
  name: string;
  code: string;
  brand: Brand | null;
  product_variants: Array<Product_Variant>;
  file: string | null;
  product_details: string | null;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface ProductVariantsProductArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_VariantInput | null;
}

export interface Brand {
  name: string;
  image: string | null;
  products: Array<Product>;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface ProductsBrandArgs {
  limit: number | null;
  sort: SortFindByIdsProductInput | null;
}

export type SortFindByIdsProductInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface Unit {
  unit_name: string;
  unit_code: string;
  base_unit: string;
  operator: string;
  operation_value: number;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface Category {
  name: string;
  image: string | null;
  variants: Array<Variant>;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface VariantsCategoryArgs {
  limit: number | null;
  sort: SortFindByIdsVariantInput | null;
}

export type SortFindByIdsVariantInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface Tax {
  name: string;
  rate: number;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type SortFindByIdsProduct_SupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ITEMCODE_ASC"
  | "ITEMCODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface Product_Supplier {
  productVariant: Product_Variant | null;
  supplier: Supplier | null;
  qty: number;
  price: number;
  itemCode: string;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface Supplier {
  name: string;
  image: string | null;
  company_name: string;
  vat_number: number | null;
  email: string;
  phone_number: number;
  address: string;
  city: string;
  state: string;
  postal_code: string;
  country: string;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type EnumProduct_VariantProduct_type = "Standard" | "Combo" | "Digital";

export type EnumProduct_VariantTax_method = "Exclusive" | "Inclusive";

export type SortFindByIdsProduct_AdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ADJUSTMENT_ASC"
  | "ADJUSTMENT_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface Product_Adjustment {
  adjustment: Adjustment | null;
  product_variant: Product_Variant | null;
  qty: number;
  action: string;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type SortFindByIdsAdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneAdjustmentOperatorsInput | null;
  OR: Array<FilterFindOneAdjustmentInput>;
  AND: Array<FilterFindOneAdjustmentInput>;
}

export interface FilterFindOneAdjustmentOperatorsInput {
  reference_no: FilterFindOneAdjustmentReference_noOperatorsInput | null;
  document: FilterFindOneAdjustmentDocumentOperatorsInput | null;
  note: FilterFindOneAdjustmentNoteOperatorsInput | null;
  _id: FilterFindOneAdjustment_idOperatorsInput | null;
  createdAt: FilterFindOneAdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterFindOneAdjustmentReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneAdjustmentDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneAdjustmentNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneAdjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneAdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneAdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyAdjustmentOperatorsInput | null;
  OR: Array<FilterFindManyAdjustmentInput>;
  AND: Array<FilterFindManyAdjustmentInput>;
}

export interface FilterFindManyAdjustmentOperatorsInput {
  reference_no: FilterFindManyAdjustmentReference_noOperatorsInput | null;
  document: FilterFindManyAdjustmentDocumentOperatorsInput | null;
  note: FilterFindManyAdjustmentNoteOperatorsInput | null;
  _id: FilterFindManyAdjustment_idOperatorsInput | null;
  createdAt: FilterFindManyAdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterFindManyAdjustmentReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyAdjustmentDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyAdjustmentNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyAdjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyAdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyAdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountAdjustmentOperatorsInput | null;
  OR: Array<FilterCountAdjustmentInput>;
  AND: Array<FilterCountAdjustmentInput>;
}

export interface FilterCountAdjustmentOperatorsInput {
  reference_no: FilterCountAdjustmentReference_noOperatorsInput | null;
  document: FilterCountAdjustmentDocumentOperatorsInput | null;
  note: FilterCountAdjustmentNoteOperatorsInput | null;
  _id: FilterCountAdjustment_idOperatorsInput | null;
  createdAt: FilterCountAdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterCountAdjustmentReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountAdjustmentDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountAdjustmentNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountAdjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountAdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionAdjustmentEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "REFERENCE_NO_DESC"
  | "REFERENCE_NO_ASC"
  | "DOCUMENT_DESC"
  | "DOCUMENT_ASC"
  | "NOTE_DESC"
  | "NOTE_ASC";

export interface AdjustmentConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<AdjustmentEdge>;
}

export interface AdjustmentEdge {
  node: Adjustment;
  cursor: string;
}

export interface AdjustmentPagination {
  count: number | null;
  items: Array<Adjustment>;
  pageInfo: PaginationInfo;
}

export interface Attribute {
  name: string;
  values: Array<Value>;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface ValuesAttributeArgs {
  limit: number | null;
  sort: SortFindByIdsValueInput | null;
}

export type SortFindByIdsValueInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface Value {
  name: string;
  attribute: Attribute | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type SortFindByIdsAttributeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneAttributeOperatorsInput | null;
  OR: Array<FilterFindOneAttributeInput>;
  AND: Array<FilterFindOneAttributeInput>;
}

export interface FilterFindOneAttributeOperatorsInput {
  name: FilterFindOneAttributeNameOperatorsInput | null;
  _id: FilterFindOneAttribute_idOperatorsInput | null;
  createdAt: FilterFindOneAttributeCreatedAtOperatorsInput | null;
}

export interface FilterFindOneAttributeNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneAttribute_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneAttributeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneAttributeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyAttributeOperatorsInput | null;
  OR: Array<FilterFindManyAttributeInput>;
  AND: Array<FilterFindManyAttributeInput>;
}

export interface FilterFindManyAttributeOperatorsInput {
  name: FilterFindManyAttributeNameOperatorsInput | null;
  _id: FilterFindManyAttribute_idOperatorsInput | null;
  createdAt: FilterFindManyAttributeCreatedAtOperatorsInput | null;
}

export interface FilterFindManyAttributeNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyAttribute_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyAttributeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyAttributeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountAttributeOperatorsInput | null;
  OR: Array<FilterCountAttributeInput>;
  AND: Array<FilterCountAttributeInput>;
}

export interface FilterCountAttributeOperatorsInput {
  name: FilterCountAttributeNameOperatorsInput | null;
  _id: FilterCountAttribute_idOperatorsInput | null;
  createdAt: FilterCountAttributeCreatedAtOperatorsInput | null;
}

export interface FilterCountAttributeNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountAttribute_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountAttributeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionAttributeEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC";

export interface AttributeConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<AttributeEdge>;
}

export interface AttributeEdge {
  node: Attribute;
  cursor: string;
}

export interface AttributePagination {
  count: number | null;
  items: Array<Attribute>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsBrandInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneBrandOperatorsInput | null;
  OR: Array<FilterFindOneBrandInput>;
  AND: Array<FilterFindOneBrandInput>;
}

export interface FilterFindOneBrandOperatorsInput {
  name: FilterFindOneBrandNameOperatorsInput | null;
  image: FilterFindOneBrandImageOperatorsInput | null;
  _id: FilterFindOneBrand_idOperatorsInput | null;
  createdAt: FilterFindOneBrandCreatedAtOperatorsInput | null;
}

export interface FilterFindOneBrandNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneBrandImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneBrand_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneBrandCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneBrandInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyBrandOperatorsInput | null;
  OR: Array<FilterFindManyBrandInput>;
  AND: Array<FilterFindManyBrandInput>;
}

export interface FilterFindManyBrandOperatorsInput {
  name: FilterFindManyBrandNameOperatorsInput | null;
  image: FilterFindManyBrandImageOperatorsInput | null;
  _id: FilterFindManyBrand_idOperatorsInput | null;
  createdAt: FilterFindManyBrandCreatedAtOperatorsInput | null;
}

export interface FilterFindManyBrandNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyBrandImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyBrand_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyBrandCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyBrandInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountBrandOperatorsInput | null;
  OR: Array<FilterCountBrandInput>;
  AND: Array<FilterCountBrandInput>;
}

export interface FilterCountBrandOperatorsInput {
  name: FilterCountBrandNameOperatorsInput | null;
  image: FilterCountBrandImageOperatorsInput | null;
  _id: FilterCountBrand_idOperatorsInput | null;
  createdAt: FilterCountBrandCreatedAtOperatorsInput | null;
}

export interface FilterCountBrandNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountBrandImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountBrand_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountBrandCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionBrandEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC"
  | "IMAGE_DESC"
  | "IMAGE_ASC";

export interface BrandConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<BrandEdge>;
}

export interface BrandEdge {
  node: Brand;
  cursor: string;
}

export interface BrandPagination {
  count: number | null;
  items: Array<Brand>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsCategoryInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneCategoryOperatorsInput | null;
  OR: Array<FilterFindOneCategoryInput>;
  AND: Array<FilterFindOneCategoryInput>;
}

export interface FilterFindOneCategoryOperatorsInput {
  name: FilterFindOneCategoryNameOperatorsInput | null;
  image: FilterFindOneCategoryImageOperatorsInput | null;
  _id: FilterFindOneCategory_idOperatorsInput | null;
  createdAt: FilterFindOneCategoryCreatedAtOperatorsInput | null;
}

export interface FilterFindOneCategoryNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneCategoryImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneCategory_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneCategoryCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneCategoryInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyCategoryOperatorsInput | null;
  OR: Array<FilterFindManyCategoryInput>;
  AND: Array<FilterFindManyCategoryInput>;
}

export interface FilterFindManyCategoryOperatorsInput {
  name: FilterFindManyCategoryNameOperatorsInput | null;
  image: FilterFindManyCategoryImageOperatorsInput | null;
  _id: FilterFindManyCategory_idOperatorsInput | null;
  createdAt: FilterFindManyCategoryCreatedAtOperatorsInput | null;
}

export interface FilterFindManyCategoryNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyCategoryImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyCategory_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyCategoryCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyCategoryInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountCategoryOperatorsInput | null;
  OR: Array<FilterCountCategoryInput>;
  AND: Array<FilterCountCategoryInput>;
}

export interface FilterCountCategoryOperatorsInput {
  name: FilterCountCategoryNameOperatorsInput | null;
  image: FilterCountCategoryImageOperatorsInput | null;
  _id: FilterCountCategory_idOperatorsInput | null;
  createdAt: FilterCountCategoryCreatedAtOperatorsInput | null;
}

export interface FilterCountCategoryNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountCategoryImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountCategory_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountCategoryCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionCategoryEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC"
  | "IMAGE_DESC"
  | "IMAGE_ASC";

export interface CategoryConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<CategoryEdge>;
}

export interface CategoryEdge {
  node: Category;
  cursor: string;
}

export interface CategoryPagination {
  count: number | null;
  items: Array<Category>;
  pageInfo: PaginationInfo;
}

export interface Coupon {
  code: string;
  coupon_type: string;
  amount: number;
  min_amount: number;
  user: User | null;
  qty: number;
  used: boolean;
  expired_date: Date;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface User {
  name: string;
  password: string;
  role: Role | null;
  personnel: MongoID;
  personnelModel: EnumUserPersonnelModel;
  warehouses: Array<Warehouse>;
  is_active: boolean;
  is_deleted: boolean | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
  Personnel: User | null;
}

export interface WarehousesUserArgs {
  limit: number | null;
  sort: SortFindByIdsWarehouseInput | null;
}

export interface Role {
  name: string;
  description: string;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type EnumUserPersonnelModel = "Employee" | "Customer" | "Supplier";

export type SortFindByIdsWarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "PHONE_ASC"
  | "PHONE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export type SortFindByIdsCouponInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneCouponOperatorsInput | null;
  OR: Array<FilterFindOneCouponInput>;
  AND: Array<FilterFindOneCouponInput>;
}

export interface FilterFindOneCouponOperatorsInput {
  code: FilterFindOneCouponCodeOperatorsInput | null;
  _id: FilterFindOneCoupon_idOperatorsInput | null;
  createdAt: FilterFindOneCouponCreatedAtOperatorsInput | null;
}

export interface FilterFindOneCouponCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneCoupon_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneCouponCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneCouponInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyCouponOperatorsInput | null;
  OR: Array<FilterFindManyCouponInput>;
  AND: Array<FilterFindManyCouponInput>;
}

export interface FilterFindManyCouponOperatorsInput {
  code: FilterFindManyCouponCodeOperatorsInput | null;
  _id: FilterFindManyCoupon_idOperatorsInput | null;
  createdAt: FilterFindManyCouponCreatedAtOperatorsInput | null;
}

export interface FilterFindManyCouponCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyCoupon_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyCouponCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyCouponInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountCouponOperatorsInput | null;
  OR: Array<FilterCountCouponInput>;
  AND: Array<FilterCountCouponInput>;
}

export interface FilterCountCouponOperatorsInput {
  code: FilterCountCouponCodeOperatorsInput | null;
  _id: FilterCountCoupon_idOperatorsInput | null;
  createdAt: FilterCountCouponCreatedAtOperatorsInput | null;
}

export interface FilterCountCouponCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountCoupon_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountCouponCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionCouponEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "CODE_DESC"
  | "CODE_ASC";

export interface CouponConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<CouponEdge>;
}

export interface CouponEdge {
  node: Coupon;
  cursor: string;
}

export interface CouponPagination {
  count: number | null;
  items: Array<Coupon>;
  pageInfo: PaginationInfo;
}

export interface Customer {
  customer_group: Customer_Group | null;
  company_name: string;
  name: string;
  image: string;
  email: string;
  phone_number: number;
  gender: string;
  user: User | null;
  address: string;
  city: string;
  country: string;
  tax_no: string | null;
  deposit: number;
  expense: number;
  is_active: boolean;
  is_deleted: boolean | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface Customer_Group {
  name: string;
  percentage: number;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type SortFindByIdsCustomerInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "TAX_NO_ASC"
  | "TAX_NO_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneCustomerOperatorsInput | null;
  OR: Array<FilterFindOneCustomerInput>;
  AND: Array<FilterFindOneCustomerInput>;
}

export interface FilterFindOneCustomerOperatorsInput {
  email: FilterFindOneCustomerEmailOperatorsInput | null;
  phone_number: FilterFindOneCustomerPhone_numberOperatorsInput | null;
  tax_no: FilterFindOneCustomerTax_noOperatorsInput | null;
  _id: FilterFindOneCustomer_idOperatorsInput | null;
  createdAt: FilterFindOneCustomerCreatedAtOperatorsInput | null;
}

export interface FilterFindOneCustomerEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneCustomerPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindOneCustomerTax_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneCustomer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneCustomerCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneCustomerInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "TAX_NO_ASC"
  | "TAX_NO_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyCustomerOperatorsInput | null;
  OR: Array<FilterFindManyCustomerInput>;
  AND: Array<FilterFindManyCustomerInput>;
}

export interface FilterFindManyCustomerOperatorsInput {
  email: FilterFindManyCustomerEmailOperatorsInput | null;
  phone_number: FilterFindManyCustomerPhone_numberOperatorsInput | null;
  tax_no: FilterFindManyCustomerTax_noOperatorsInput | null;
  _id: FilterFindManyCustomer_idOperatorsInput | null;
  createdAt: FilterFindManyCustomerCreatedAtOperatorsInput | null;
}

export interface FilterFindManyCustomerEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyCustomerPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindManyCustomerTax_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyCustomer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyCustomerCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyCustomerInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "TAX_NO_ASC"
  | "TAX_NO_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountCustomerOperatorsInput | null;
  OR: Array<FilterCountCustomerInput>;
  AND: Array<FilterCountCustomerInput>;
}

export interface FilterCountCustomerOperatorsInput {
  email: FilterCountCustomerEmailOperatorsInput | null;
  phone_number: FilterCountCustomerPhone_numberOperatorsInput | null;
  tax_no: FilterCountCustomerTax_noOperatorsInput | null;
  _id: FilterCountCustomer_idOperatorsInput | null;
  createdAt: FilterCountCustomerCreatedAtOperatorsInput | null;
}

export interface FilterCountCustomerEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountCustomerPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterCountCustomerTax_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountCustomer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountCustomerCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionCustomerEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "EMAIL_DESC"
  | "EMAIL_ASC"
  | "PHONE_NUMBER_DESC"
  | "PHONE_NUMBER_ASC"
  | "TAX_NO_DESC"
  | "TAX_NO_ASC";

export interface CustomerConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<CustomerEdge>;
}

export interface CustomerEdge {
  node: Customer;
  cursor: string;
}

export interface CustomerPagination {
  count: number | null;
  items: Array<Customer>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsCustomer_GroupInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneCustomer_GroupOperatorsInput | null;
  OR: Array<FilterFindOneCustomer_GroupInput>;
  AND: Array<FilterFindOneCustomer_GroupInput>;
}

export interface FilterFindOneCustomer_GroupOperatorsInput {
  name: FilterFindOneCustomer_GroupNameOperatorsInput | null;
  _id: FilterFindOneCustomer_Group_idOperatorsInput | null;
  createdAt: FilterFindOneCustomer_GroupCreatedAtOperatorsInput | null;
}

export interface FilterFindOneCustomer_GroupNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneCustomer_Group_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneCustomer_GroupCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneCustomer_GroupInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyCustomer_GroupOperatorsInput | null;
  OR: Array<FilterFindManyCustomer_GroupInput>;
  AND: Array<FilterFindManyCustomer_GroupInput>;
}

export interface FilterFindManyCustomer_GroupOperatorsInput {
  name: FilterFindManyCustomer_GroupNameOperatorsInput | null;
  _id: FilterFindManyCustomer_Group_idOperatorsInput | null;
  createdAt: FilterFindManyCustomer_GroupCreatedAtOperatorsInput | null;
}

export interface FilterFindManyCustomer_GroupNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyCustomer_Group_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyCustomer_GroupCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyCustomer_GroupInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountCustomer_GroupOperatorsInput | null;
  OR: Array<FilterCountCustomer_GroupInput>;
  AND: Array<FilterCountCustomer_GroupInput>;
}

export interface FilterCountCustomer_GroupOperatorsInput {
  name: FilterCountCustomer_GroupNameOperatorsInput | null;
  _id: FilterCountCustomer_Group_idOperatorsInput | null;
  createdAt: FilterCountCustomer_GroupCreatedAtOperatorsInput | null;
}

export interface FilterCountCustomer_GroupNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountCustomer_Group_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountCustomer_GroupCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionCustomer_GroupEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC";

export interface Customer_GroupConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Customer_GroupEdge>;
}

export interface Customer_GroupEdge {
  node: Customer_Group;
  cursor: string;
}

export interface Customer_GroupPagination {
  count: number | null;
  items: Array<Customer_Group>;
  pageInfo: PaginationInfo;
}

export interface Department {
  name: string;
  is_active: boolean;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type SortFindByIdsDepartmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneDepartmentOperatorsInput | null;
  OR: Array<FilterFindOneDepartmentInput>;
  AND: Array<FilterFindOneDepartmentInput>;
}

export interface FilterFindOneDepartmentOperatorsInput {
  name: FilterFindOneDepartmentNameOperatorsInput | null;
  _id: FilterFindOneDepartment_idOperatorsInput | null;
  createdAt: FilterFindOneDepartmentCreatedAtOperatorsInput | null;
}

export interface FilterFindOneDepartmentNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneDepartment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneDepartmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneDepartmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyDepartmentOperatorsInput | null;
  OR: Array<FilterFindManyDepartmentInput>;
  AND: Array<FilterFindManyDepartmentInput>;
}

export interface FilterFindManyDepartmentOperatorsInput {
  name: FilterFindManyDepartmentNameOperatorsInput | null;
  _id: FilterFindManyDepartment_idOperatorsInput | null;
  createdAt: FilterFindManyDepartmentCreatedAtOperatorsInput | null;
}

export interface FilterFindManyDepartmentNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyDepartment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyDepartmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyDepartmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountDepartmentOperatorsInput | null;
  OR: Array<FilterCountDepartmentInput>;
  AND: Array<FilterCountDepartmentInput>;
}

export interface FilterCountDepartmentOperatorsInput {
  name: FilterCountDepartmentNameOperatorsInput | null;
  _id: FilterCountDepartment_idOperatorsInput | null;
  createdAt: FilterCountDepartmentCreatedAtOperatorsInput | null;
}

export interface FilterCountDepartmentNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountDepartment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountDepartmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionDepartmentEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC";

export interface DepartmentConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<DepartmentEdge>;
}

export interface DepartmentEdge {
  node: Department;
  cursor: string;
}

export interface DepartmentPagination {
  count: number | null;
  items: Array<Department>;
  pageInfo: PaginationInfo;
}

export interface Employee {
  name: string;
  image: string;
  email: string;
  phone_number: number;
  gender: string;
  user: User | null;
  department: Department | null;
  payrolls: Array<Payroll>;
  address: string;
  city: string;
  country: string;
  is_active: boolean;
  is_deleted: boolean | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface PayrollsEmployeeArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsPayrollInput | null;
}

export type SortFindByIdsPayrollInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface Payroll {
  reference_no: string;
  amount: number;
  user: MongoID;
  employee: MongoID;
  account: MongoID;
  paying_method: string;
  note: string | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type SortFindByIdsEmployeeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneEmployeeOperatorsInput | null;
  OR: Array<FilterFindOneEmployeeInput>;
  AND: Array<FilterFindOneEmployeeInput>;
}

export interface FilterFindOneEmployeeOperatorsInput {
  email: FilterFindOneEmployeeEmailOperatorsInput | null;
  phone_number: FilterFindOneEmployeePhone_numberOperatorsInput | null;
  _id: FilterFindOneEmployee_idOperatorsInput | null;
  createdAt: FilterFindOneEmployeeCreatedAtOperatorsInput | null;
}

export interface FilterFindOneEmployeeEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneEmployeePhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindOneEmployee_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneEmployeeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneEmployeeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyEmployeeOperatorsInput | null;
  OR: Array<FilterFindManyEmployeeInput>;
  AND: Array<FilterFindManyEmployeeInput>;
}

export interface FilterFindManyEmployeeOperatorsInput {
  email: FilterFindManyEmployeeEmailOperatorsInput | null;
  phone_number: FilterFindManyEmployeePhone_numberOperatorsInput | null;
  _id: FilterFindManyEmployee_idOperatorsInput | null;
  createdAt: FilterFindManyEmployeeCreatedAtOperatorsInput | null;
}

export interface FilterFindManyEmployeeEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyEmployeePhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindManyEmployee_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyEmployeeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyEmployeeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountEmployeeOperatorsInput | null;
  OR: Array<FilterCountEmployeeInput>;
  AND: Array<FilterCountEmployeeInput>;
}

export interface FilterCountEmployeeOperatorsInput {
  email: FilterCountEmployeeEmailOperatorsInput | null;
  phone_number: FilterCountEmployeePhone_numberOperatorsInput | null;
  _id: FilterCountEmployee_idOperatorsInput | null;
  createdAt: FilterCountEmployeeCreatedAtOperatorsInput | null;
}

export interface FilterCountEmployeeEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountEmployeePhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterCountEmployee_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountEmployeeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionEmployeeEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "EMAIL_DESC"
  | "EMAIL_ASC"
  | "PHONE_NUMBER_DESC"
  | "PHONE_NUMBER_ASC";

export interface EmployeeConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<EmployeeEdge>;
}

export interface EmployeeEdge {
  node: Employee;
  cursor: string;
}

export interface EmployeePagination {
  count: number | null;
  items: Array<Employee>;
  pageInfo: PaginationInfo;
}

export interface FilterFindOneProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProduct_AdjustmentOperatorsInput | null;
  OR: Array<FilterFindOneProduct_AdjustmentInput>;
  AND: Array<FilterFindOneProduct_AdjustmentInput>;
}

export interface FilterFindOneProduct_AdjustmentOperatorsInput {
  adjustment: FilterFindOneProduct_AdjustmentAdjustmentOperatorsInput | null;
  _id: FilterFindOneProduct_Adjustment_idOperatorsInput | null;
  createdAt: FilterFindOneProduct_AdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProduct_AdjustmentAdjustmentOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_Adjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_AdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProduct_AdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ADJUSTMENT_ASC"
  | "ADJUSTMENT_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProduct_AdjustmentOperatorsInput | null;
  OR: Array<FilterFindManyProduct_AdjustmentInput>;
  AND: Array<FilterFindManyProduct_AdjustmentInput>;
}

export interface FilterFindManyProduct_AdjustmentOperatorsInput {
  adjustment: FilterFindManyProduct_AdjustmentAdjustmentOperatorsInput | null;
  _id: FilterFindManyProduct_Adjustment_idOperatorsInput | null;
  createdAt: FilterFindManyProduct_AdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProduct_AdjustmentAdjustmentOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_Adjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_AdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProduct_AdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ADJUSTMENT_ASC"
  | "ADJUSTMENT_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProduct_AdjustmentOperatorsInput | null;
  OR: Array<FilterCountProduct_AdjustmentInput>;
  AND: Array<FilterCountProduct_AdjustmentInput>;
}

export interface FilterCountProduct_AdjustmentOperatorsInput {
  adjustment: FilterCountProduct_AdjustmentAdjustmentOperatorsInput | null;
  _id: FilterCountProduct_Adjustment_idOperatorsInput | null;
  createdAt: FilterCountProduct_AdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterCountProduct_AdjustmentAdjustmentOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_Adjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_AdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProduct_AdjustmentEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "ADJUSTMENT_DESC"
  | "ADJUSTMENT_ASC";

export interface Product_AdjustmentConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Product_AdjustmentEdge>;
}

export interface Product_AdjustmentEdge {
  node: Product_Adjustment;
  cursor: string;
}

export interface Product_AdjustmentPagination {
  count: number | null;
  items: Array<Product_Adjustment>;
  pageInfo: PaginationInfo;
}

export interface Product_Purchase {
  purchase: Purchase | null;
  product_variant: Product_Variant | null;
  unit: Unit | null;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_cost: number;
  total: number;
  status: EnumProduct_PurchaseStatus;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface Purchase {
  reference_no: string;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_cost: number;
  order_tax_rate: number;
  order_tax: number;
  order_discount: number;
  shipping_cost: number;
  grandtotal: number;
  paid_amount: number;
  user: User | null;
  warehouse: Warehouse | null;
  supplier: Supplier | null;
  product_purchases: Array<Product_Purchase>;
  product_purchase_returns: Array<Product_Purchase_Return>;
  status: EnumPurchaseStatus;
  payment_status: EnumPurchasePayment_status;
  document: string | null;
  note: string | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface ProductPurchasesPurchaseArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_PurchaseInput | null;
}

export interface ProductPurchaseReturnsPurchaseArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_Purchase_ReturnInput | null;
}

export type SortFindByIdsProduct_PurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export type SortFindByIdsProduct_Purchase_ReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface Product_Purchase_Return {
  return: MongoID;
  product_variant: MongoID;
  unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_cost: number;
  total: number;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type EnumPurchaseStatus = "Recieved" | "Partial" | "Pending" | "Ordered";

export type EnumPurchasePayment_status = "Pending" | "Due" | "Partial" | "Paid";

export type EnumProduct_PurchaseStatus =
  | "Recieved"
  | "Partial"
  | "Pending"
  | "Ordered";

export interface FilterFindOneProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProduct_PurchaseOperatorsInput | null;
  OR: Array<FilterFindOneProduct_PurchaseInput>;
  AND: Array<FilterFindOneProduct_PurchaseInput>;
}

export interface FilterFindOneProduct_PurchaseOperatorsInput {
  _id: FilterFindOneProduct_Purchase_idOperatorsInput | null;
  createdAt: FilterFindOneProduct_PurchaseCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProduct_Purchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_PurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProduct_PurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProduct_PurchaseOperatorsInput | null;
  OR: Array<FilterFindManyProduct_PurchaseInput>;
  AND: Array<FilterFindManyProduct_PurchaseInput>;
}

export interface FilterFindManyProduct_PurchaseOperatorsInput {
  _id: FilterFindManyProduct_Purchase_idOperatorsInput | null;
  createdAt: FilterFindManyProduct_PurchaseCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProduct_Purchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_PurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProduct_PurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProduct_PurchaseOperatorsInput | null;
  OR: Array<FilterCountProduct_PurchaseInput>;
  AND: Array<FilterCountProduct_PurchaseInput>;
}

export interface FilterCountProduct_PurchaseOperatorsInput {
  _id: FilterCountProduct_Purchase_idOperatorsInput | null;
  createdAt: FilterCountProduct_PurchaseCreatedAtOperatorsInput | null;
}

export interface FilterCountProduct_Purchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_PurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProduct_PurchaseEnum = "_ID_DESC" | "_ID_ASC";

export interface Product_PurchaseConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Product_PurchaseEdge>;
}

export interface Product_PurchaseEdge {
  node: Product_Purchase;
  cursor: string;
}

export interface Product_PurchasePagination {
  count: number | null;
  items: Array<Product_Purchase>;
  pageInfo: PaginationInfo;
}

export interface Product_Quotation {
  quotation: Quotation | null;
  product_variant: Product_Variant | null;
  unit: Unit | null;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_price: number;
  total: number;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface Quotation {
  reference_no: string;
  user: User | null;
  biller: Employee | null;
  warehouse: Warehouse | null;
  supplier: Supplier | null;
  customer: Customer | null;
  product_quotations: Array<MongoID>;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_price: number;
  order_tax_rate: number;
  order_tax: number;
  order_discount: number;
  shipping_cost: number;
  grandtotal: number;
  paid_amount: number;
  status: EnumQuotationStatus;
  document: string | null;
  note: string | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
  product_qoutations: Array<Product_Quotation>;
}

export interface ProductQoutationsQuotationArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_QuotationInput | null;
}

export type EnumQuotationStatus = "Sent" | "Pending";

export type SortFindByIdsProduct_QuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProduct_QuotationOperatorsInput | null;
  OR: Array<FilterFindOneProduct_QuotationInput>;
  AND: Array<FilterFindOneProduct_QuotationInput>;
}

export interface FilterFindOneProduct_QuotationOperatorsInput {
  _id: FilterFindOneProduct_Quotation_idOperatorsInput | null;
  createdAt: FilterFindOneProduct_QuotationCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProduct_Quotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_QuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProduct_QuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProduct_QuotationOperatorsInput | null;
  OR: Array<FilterFindManyProduct_QuotationInput>;
  AND: Array<FilterFindManyProduct_QuotationInput>;
}

export interface FilterFindManyProduct_QuotationOperatorsInput {
  _id: FilterFindManyProduct_Quotation_idOperatorsInput | null;
  createdAt: FilterFindManyProduct_QuotationCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProduct_Quotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_QuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProduct_QuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProduct_QuotationOperatorsInput | null;
  OR: Array<FilterCountProduct_QuotationInput>;
  AND: Array<FilterCountProduct_QuotationInput>;
}

export interface FilterCountProduct_QuotationOperatorsInput {
  _id: FilterCountProduct_Quotation_idOperatorsInput | null;
  createdAt: FilterCountProduct_QuotationCreatedAtOperatorsInput | null;
}

export interface FilterCountProduct_Quotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_QuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProduct_QuotationEnum = "_ID_DESC" | "_ID_ASC";

export interface Product_QuotationConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Product_QuotationEdge>;
}

export interface Product_QuotationEdge {
  node: Product_Quotation;
  cursor: string;
}

export interface Product_QuotationPagination {
  count: number | null;
  items: Array<Product_Quotation>;
  pageInfo: PaginationInfo;
}

export interface Product_Return {
  return: Return | null;
  product_variant: Product_Variant | null;
  unit: Unit | null;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_price: number;
  total: number;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface Return {
  reference_no: string;
  user: User | null;
  biller: Employee | null;
  warehouse: Warehouse | null;
  account: Account | null;
  customer: Customer | null;
  product_returns: Array<Product_Return>;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_price: number;
  order_tax_rate: number;
  order_tax: number;
  grandtotal: number;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface ProductReturnsReturnArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_ReturnInput | null;
}

export type SortFindByIdsProduct_ReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProduct_ReturnOperatorsInput | null;
  OR: Array<FilterFindOneProduct_ReturnInput>;
  AND: Array<FilterFindOneProduct_ReturnInput>;
}

export interface FilterFindOneProduct_ReturnOperatorsInput {
  _id: FilterFindOneProduct_Return_idOperatorsInput | null;
  createdAt: FilterFindOneProduct_ReturnCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProduct_Return_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_ReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProduct_ReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProduct_ReturnOperatorsInput | null;
  OR: Array<FilterFindManyProduct_ReturnInput>;
  AND: Array<FilterFindManyProduct_ReturnInput>;
}

export interface FilterFindManyProduct_ReturnOperatorsInput {
  _id: FilterFindManyProduct_Return_idOperatorsInput | null;
  createdAt: FilterFindManyProduct_ReturnCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProduct_Return_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_ReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProduct_ReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProduct_ReturnOperatorsInput | null;
  OR: Array<FilterCountProduct_ReturnInput>;
  AND: Array<FilterCountProduct_ReturnInput>;
}

export interface FilterCountProduct_ReturnOperatorsInput {
  _id: FilterCountProduct_Return_idOperatorsInput | null;
  createdAt: FilterCountProduct_ReturnCreatedAtOperatorsInput | null;
}

export interface FilterCountProduct_Return_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_ReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProduct_ReturnEnum = "_ID_DESC" | "_ID_ASC";

export interface Product_ReturnConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Product_ReturnEdge>;
}

export interface Product_ReturnEdge {
  node: Product_Return;
  cursor: string;
}

export interface Product_ReturnPagination {
  count: number | null;
  items: Array<Product_Return>;
  pageInfo: PaginationInfo;
}

export interface Product_Sale {
  sale: Sale | null;
  product_variant: Product_Variant | null;
  unit: Unit | null;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_price: number;
  total: number;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface Sale {
  reference_no: string;
  user: MongoID;
  biller: MongoID;
  warehouse: MongoID;
  coupon: MongoID;
  customer: MongoID;
  product_sales: Array<MongoID>;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_price: number;
  order_tax_rate: number;
  order_tax: number;
  order_discount: number;
  shipping_cost: number;
  coupon_discount: number;
  grandtotal: number;
  paid_amount: number;
  sale_status: EnumSaleSale_status;
  payment_status: EnumSalePayment_status;
  document: string | null;
  sale_note: string | null;
  staff_note: string | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type EnumSaleSale_status = "Completed" | "Pending";

export type EnumSalePayment_status = "Due" | "Pending" | "Partial" | "Paid";

export type SortFindByIdsProduct_SaleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProduct_SaleOperatorsInput | null;
  OR: Array<FilterFindOneProduct_SaleInput>;
  AND: Array<FilterFindOneProduct_SaleInput>;
}

export interface FilterFindOneProduct_SaleOperatorsInput {
  _id: FilterFindOneProduct_Sale_idOperatorsInput | null;
  createdAt: FilterFindOneProduct_SaleCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProduct_Sale_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_SaleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProduct_SaleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProduct_SaleOperatorsInput | null;
  OR: Array<FilterFindManyProduct_SaleInput>;
  AND: Array<FilterFindManyProduct_SaleInput>;
}

export interface FilterFindManyProduct_SaleOperatorsInput {
  _id: FilterFindManyProduct_Sale_idOperatorsInput | null;
  createdAt: FilterFindManyProduct_SaleCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProduct_Sale_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_SaleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProduct_SaleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProduct_SaleOperatorsInput | null;
  OR: Array<FilterCountProduct_SaleInput>;
  AND: Array<FilterCountProduct_SaleInput>;
}

export interface FilterCountProduct_SaleOperatorsInput {
  _id: FilterCountProduct_Sale_idOperatorsInput | null;
  createdAt: FilterCountProduct_SaleCreatedAtOperatorsInput | null;
}

export interface FilterCountProduct_Sale_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_SaleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProduct_SaleEnum = "_ID_DESC" | "_ID_ASC";

export interface Product_SaleConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Product_SaleEdge>;
}

export interface Product_SaleEdge {
  node: Product_Sale;
  cursor: string;
}

export interface Product_SalePagination {
  count: number | null;
  items: Array<Product_Sale>;
  pageInfo: PaginationInfo;
}

export interface FilterFindOneProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProduct_SupplierOperatorsInput | null;
  OR: Array<FilterFindOneProduct_SupplierInput>;
  AND: Array<FilterFindOneProduct_SupplierInput>;
}

export interface FilterFindOneProduct_SupplierOperatorsInput {
  itemCode: FilterFindOneProduct_SupplierItemCodeOperatorsInput | null;
  _id: FilterFindOneProduct_Supplier_idOperatorsInput | null;
  createdAt: FilterFindOneProduct_SupplierCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProduct_SupplierItemCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_Supplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_SupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProduct_SupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ITEMCODE_ASC"
  | "ITEMCODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProduct_SupplierOperatorsInput | null;
  OR: Array<FilterFindManyProduct_SupplierInput>;
  AND: Array<FilterFindManyProduct_SupplierInput>;
}

export interface FilterFindManyProduct_SupplierOperatorsInput {
  itemCode: FilterFindManyProduct_SupplierItemCodeOperatorsInput | null;
  _id: FilterFindManyProduct_Supplier_idOperatorsInput | null;
  createdAt: FilterFindManyProduct_SupplierCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProduct_SupplierItemCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_Supplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_SupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProduct_SupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ITEMCODE_ASC"
  | "ITEMCODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProduct_SupplierOperatorsInput | null;
  OR: Array<FilterCountProduct_SupplierInput>;
  AND: Array<FilterCountProduct_SupplierInput>;
}

export interface FilterCountProduct_SupplierOperatorsInput {
  itemCode: FilterCountProduct_SupplierItemCodeOperatorsInput | null;
  _id: FilterCountProduct_Supplier_idOperatorsInput | null;
  createdAt: FilterCountProduct_SupplierCreatedAtOperatorsInput | null;
}

export interface FilterCountProduct_SupplierItemCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountProduct_Supplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_SupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProduct_SupplierEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "ITEMCODE_DESC"
  | "ITEMCODE_ASC";

export interface Product_SupplierConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Product_SupplierEdge>;
}

export interface Product_SupplierEdge {
  node: Product_Supplier;
  cursor: string;
}

export interface Product_SupplierPagination {
  count: number | null;
  items: Array<Product_Supplier>;
  pageInfo: PaginationInfo;
}

export interface Product_Transfer {
  transfer: MongoID;
  product_variant: Product_Variant | null;
  purchase_unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  net_unit_cost: number;
  total: number;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
  purchase: Transfer | null;
  unit: Unit | null;
}

export interface Transfer {
  reference_no: string;
  item: number;
  total_qty: number;
  total_tax: number;
  total_cost: number;
  shipping_cost: number;
  grand_total: number;
  paid_amount: number;
  user: User | null;
  from_warehouse: Warehouse | null;
  to_warehouse: Warehouse | null;
  product_transfers: Array<Product_Transfer>;
  status: EnumTransferStatus;
  document: string | null;
  note: string | null;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface ProductTransfersTransferArgs {
  _ids: Array<MongoID>;
  limit: number | null;
  sort: SortFindByIdsProduct_TransferInput | null;
}

export type SortFindByIdsProduct_TransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export type EnumTransferStatus = "Completed" | "Pending" | "Sent";

export interface FilterFindOneProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProduct_TransferOperatorsInput | null;
  OR: Array<FilterFindOneProduct_TransferInput>;
  AND: Array<FilterFindOneProduct_TransferInput>;
}

export interface FilterFindOneProduct_TransferOperatorsInput {
  _id: FilterFindOneProduct_Transfer_idOperatorsInput | null;
  createdAt: FilterFindOneProduct_TransferCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProduct_Transfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_TransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProduct_TransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProduct_TransferOperatorsInput | null;
  OR: Array<FilterFindManyProduct_TransferInput>;
  AND: Array<FilterFindManyProduct_TransferInput>;
}

export interface FilterFindManyProduct_TransferOperatorsInput {
  _id: FilterFindManyProduct_Transfer_idOperatorsInput | null;
  createdAt: FilterFindManyProduct_TransferCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProduct_Transfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_TransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProduct_TransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProduct_TransferOperatorsInput | null;
  OR: Array<FilterCountProduct_TransferInput>;
  AND: Array<FilterCountProduct_TransferInput>;
}

export interface FilterCountProduct_TransferOperatorsInput {
  _id: FilterCountProduct_Transfer_idOperatorsInput | null;
  createdAt: FilterCountProduct_TransferCreatedAtOperatorsInput | null;
}

export interface FilterCountProduct_Transfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_TransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProduct_TransferEnum = "_ID_DESC" | "_ID_ASC";

export interface Product_TransferConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Product_TransferEdge>;
}

export interface Product_TransferEdge {
  node: Product_Transfer;
  cursor: string;
}

export interface Product_TransferPagination {
  count: number | null;
  items: Array<Product_Transfer>;
  pageInfo: PaginationInfo;
}

export interface FilterFindOneProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProduct_VariantOperatorsInput | null;
  OR: Array<FilterFindOneProduct_VariantInput>;
  AND: Array<FilterFindOneProduct_VariantInput>;
}

export interface FilterFindOneProduct_VariantOperatorsInput {
  variant: FilterFindOneProduct_VariantVariantOperatorsInput | null;
  item_code: FilterFindOneProduct_VariantItem_codeOperatorsInput | null;
  _id: FilterFindOneProduct_Variant_idOperatorsInput | null;
  createdAt: FilterFindOneProduct_VariantCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProduct_VariantVariantOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_VariantItem_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_Variant_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_VariantCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProduct_VariantInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "VARIANT_ASC"
  | "VARIANT_DESC"
  | "ITEM_CODE_ASC"
  | "ITEM_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProduct_VariantOperatorsInput | null;
  OR: Array<FilterFindManyProduct_VariantInput>;
  AND: Array<FilterFindManyProduct_VariantInput>;
}

export interface FilterFindManyProduct_VariantOperatorsInput {
  variant: FilterFindManyProduct_VariantVariantOperatorsInput | null;
  item_code: FilterFindManyProduct_VariantItem_codeOperatorsInput | null;
  _id: FilterFindManyProduct_Variant_idOperatorsInput | null;
  createdAt: FilterFindManyProduct_VariantCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProduct_VariantVariantOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_VariantItem_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_Variant_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_VariantCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProduct_VariantInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "VARIANT_ASC"
  | "VARIANT_DESC"
  | "ITEM_CODE_ASC"
  | "ITEM_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProduct_VariantOperatorsInput | null;
  OR: Array<FilterCountProduct_VariantInput>;
  AND: Array<FilterCountProduct_VariantInput>;
}

export interface FilterCountProduct_VariantOperatorsInput {
  variant: FilterCountProduct_VariantVariantOperatorsInput | null;
  item_code: FilterCountProduct_VariantItem_codeOperatorsInput | null;
  _id: FilterCountProduct_Variant_idOperatorsInput | null;
  createdAt: FilterCountProduct_VariantCreatedAtOperatorsInput | null;
}

export interface FilterCountProduct_VariantVariantOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_VariantItem_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountProduct_Variant_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_VariantCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProduct_VariantEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "VARIANT_DESC"
  | "VARIANT_ASC"
  | "ITEM_CODE_DESC"
  | "ITEM_CODE_ASC";

export interface Product_VariantConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Product_VariantEdge>;
}

export interface Product_VariantEdge {
  node: Product_Variant;
  cursor: string;
}

export interface Product_VariantPagination {
  count: number | null;
  items: Array<Product_Variant>;
  pageInfo: PaginationInfo;
}

export interface Product_Warehouse {
  product_variant: Product_Variant | null;
  warehouse: Warehouse | null;
  qty: number;
  _id: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export type SortFindByIdsProduct_WarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProduct_WarehouseOperatorsInput | null;
  OR: Array<FilterFindOneProduct_WarehouseInput>;
  AND: Array<FilterFindOneProduct_WarehouseInput>;
}

export interface FilterFindOneProduct_WarehouseOperatorsInput {
  _id: FilterFindOneProduct_Warehouse_idOperatorsInput | null;
  createdAt: FilterFindOneProduct_WarehouseCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProduct_Warehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_WarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProduct_WarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProduct_WarehouseOperatorsInput | null;
  OR: Array<FilterFindManyProduct_WarehouseInput>;
  AND: Array<FilterFindManyProduct_WarehouseInput>;
}

export interface FilterFindManyProduct_WarehouseOperatorsInput {
  _id: FilterFindManyProduct_Warehouse_idOperatorsInput | null;
  createdAt: FilterFindManyProduct_WarehouseCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProduct_Warehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_WarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProduct_WarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProduct_WarehouseOperatorsInput | null;
  OR: Array<FilterCountProduct_WarehouseInput>;
  AND: Array<FilterCountProduct_WarehouseInput>;
}

export interface FilterCountProduct_WarehouseOperatorsInput {
  _id: FilterCountProduct_Warehouse_idOperatorsInput | null;
  createdAt: FilterCountProduct_WarehouseCreatedAtOperatorsInput | null;
}

export interface FilterCountProduct_Warehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProduct_WarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProduct_WarehouseEnum = "_ID_DESC" | "_ID_ASC";

export interface Product_WarehouseConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<Product_WarehouseEdge>;
}

export interface Product_WarehouseEdge {
  node: Product_Warehouse;
  cursor: string;
}

export interface Product_WarehousePagination {
  count: number | null;
  items: Array<Product_Warehouse>;
  pageInfo: PaginationInfo;
}

export interface FilterFindOneProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneProductOperatorsInput | null;
  OR: Array<FilterFindOneProductInput>;
  AND: Array<FilterFindOneProductInput>;
}

export interface FilterFindOneProductOperatorsInput {
  name: FilterFindOneProductNameOperatorsInput | null;
  code: FilterFindOneProductCodeOperatorsInput | null;
  _id: FilterFindOneProduct_idOperatorsInput | null;
  createdAt: FilterFindOneProductCreatedAtOperatorsInput | null;
}

export interface FilterFindOneProductNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneProductCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneProduct_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneProductCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneProductInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyProductOperatorsInput | null;
  OR: Array<FilterFindManyProductInput>;
  AND: Array<FilterFindManyProductInput>;
}

export interface FilterFindManyProductOperatorsInput {
  name: FilterFindManyProductNameOperatorsInput | null;
  code: FilterFindManyProductCodeOperatorsInput | null;
  _id: FilterFindManyProduct_idOperatorsInput | null;
  createdAt: FilterFindManyProductCreatedAtOperatorsInput | null;
}

export interface FilterFindManyProductNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyProductCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyProduct_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyProductCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyProductInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountProductOperatorsInput | null;
  OR: Array<FilterCountProductInput>;
  AND: Array<FilterCountProductInput>;
}

export interface FilterCountProductOperatorsInput {
  name: FilterCountProductNameOperatorsInput | null;
  code: FilterCountProductCodeOperatorsInput | null;
  _id: FilterCountProduct_idOperatorsInput | null;
  createdAt: FilterCountProductCreatedAtOperatorsInput | null;
}

export interface FilterCountProductNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountProductCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountProduct_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountProductCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionProductEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC"
  | "CODE_DESC"
  | "CODE_ASC";

export interface ProductConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<ProductEdge>;
}

export interface ProductEdge {
  node: Product;
  cursor: string;
}

export interface ProductPagination {
  count: number | null;
  items: Array<Product>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsPurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOnePurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOnePurchaseOperatorsInput | null;
  OR: Array<FilterFindOnePurchaseInput>;
  AND: Array<FilterFindOnePurchaseInput>;
}

export interface FilterFindOnePurchaseOperatorsInput {
  reference_no: FilterFindOnePurchaseReference_noOperatorsInput | null;
  document: FilterFindOnePurchaseDocumentOperatorsInput | null;
  note: FilterFindOnePurchaseNoteOperatorsInput | null;
  _id: FilterFindOnePurchase_idOperatorsInput | null;
  createdAt: FilterFindOnePurchaseCreatedAtOperatorsInput | null;
}

export interface FilterFindOnePurchaseReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOnePurchaseDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOnePurchaseNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOnePurchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOnePurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOnePurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyPurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyPurchaseOperatorsInput | null;
  OR: Array<FilterFindManyPurchaseInput>;
  AND: Array<FilterFindManyPurchaseInput>;
}

export interface FilterFindManyPurchaseOperatorsInput {
  reference_no: FilterFindManyPurchaseReference_noOperatorsInput | null;
  document: FilterFindManyPurchaseDocumentOperatorsInput | null;
  note: FilterFindManyPurchaseNoteOperatorsInput | null;
  _id: FilterFindManyPurchase_idOperatorsInput | null;
  createdAt: FilterFindManyPurchaseCreatedAtOperatorsInput | null;
}

export interface FilterFindManyPurchaseReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyPurchaseDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyPurchaseNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyPurchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyPurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyPurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountPurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountPurchaseOperatorsInput | null;
  OR: Array<FilterCountPurchaseInput>;
  AND: Array<FilterCountPurchaseInput>;
}

export interface FilterCountPurchaseOperatorsInput {
  reference_no: FilterCountPurchaseReference_noOperatorsInput | null;
  document: FilterCountPurchaseDocumentOperatorsInput | null;
  note: FilterCountPurchaseNoteOperatorsInput | null;
  _id: FilterCountPurchase_idOperatorsInput | null;
  createdAt: FilterCountPurchaseCreatedAtOperatorsInput | null;
}

export interface FilterCountPurchaseReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountPurchaseDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountPurchaseNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountPurchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountPurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionPurchaseEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "REFERENCE_NO_DESC"
  | "REFERENCE_NO_ASC"
  | "DOCUMENT_DESC"
  | "DOCUMENT_ASC"
  | "NOTE_DESC"
  | "NOTE_ASC";

export interface PurchaseConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<PurchaseEdge>;
}

export interface PurchaseEdge {
  node: Purchase;
  cursor: string;
}

export interface PurchasePagination {
  count: number | null;
  items: Array<Purchase>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsQuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneQuotationOperatorsInput | null;
  OR: Array<FilterFindOneQuotationInput>;
  AND: Array<FilterFindOneQuotationInput>;
}

export interface FilterFindOneQuotationOperatorsInput {
  reference_no: FilterFindOneQuotationReference_noOperatorsInput | null;
  document: FilterFindOneQuotationDocumentOperatorsInput | null;
  note: FilterFindOneQuotationNoteOperatorsInput | null;
  _id: FilterFindOneQuotation_idOperatorsInput | null;
  createdAt: FilterFindOneQuotationCreatedAtOperatorsInput | null;
}

export interface FilterFindOneQuotationReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneQuotationDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneQuotationNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneQuotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneQuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneQuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyQuotationOperatorsInput | null;
  OR: Array<FilterFindManyQuotationInput>;
  AND: Array<FilterFindManyQuotationInput>;
}

export interface FilterFindManyQuotationOperatorsInput {
  reference_no: FilterFindManyQuotationReference_noOperatorsInput | null;
  document: FilterFindManyQuotationDocumentOperatorsInput | null;
  note: FilterFindManyQuotationNoteOperatorsInput | null;
  _id: FilterFindManyQuotation_idOperatorsInput | null;
  createdAt: FilterFindManyQuotationCreatedAtOperatorsInput | null;
}

export interface FilterFindManyQuotationReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyQuotationDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyQuotationNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyQuotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyQuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyQuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountQuotationOperatorsInput | null;
  OR: Array<FilterCountQuotationInput>;
  AND: Array<FilterCountQuotationInput>;
}

export interface FilterCountQuotationOperatorsInput {
  reference_no: FilterCountQuotationReference_noOperatorsInput | null;
  document: FilterCountQuotationDocumentOperatorsInput | null;
  note: FilterCountQuotationNoteOperatorsInput | null;
  _id: FilterCountQuotation_idOperatorsInput | null;
  createdAt: FilterCountQuotationCreatedAtOperatorsInput | null;
}

export interface FilterCountQuotationReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountQuotationDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountQuotationNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountQuotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountQuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionQuotationEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "REFERENCE_NO_DESC"
  | "REFERENCE_NO_ASC"
  | "DOCUMENT_DESC"
  | "DOCUMENT_ASC"
  | "NOTE_DESC"
  | "NOTE_ASC";

export interface QuotationConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<QuotationEdge>;
}

export interface QuotationEdge {
  node: Quotation;
  cursor: string;
}

export interface QuotationPagination {
  count: number | null;
  items: Array<Quotation>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "RETURN_NOTE_ASC"
  | "RETURN_NOTE_DESC"
  | "STAFF_NOTE_ASC"
  | "STAFF_NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneReturnOperatorsInput | null;
  OR: Array<FilterFindOneReturnInput>;
  AND: Array<FilterFindOneReturnInput>;
}

export interface FilterFindOneReturnOperatorsInput {
  reference_no: FilterFindOneReturnReference_noOperatorsInput | null;
  document: FilterFindOneReturnDocumentOperatorsInput | null;
  return_note: FilterFindOneReturnReturn_noteOperatorsInput | null;
  staff_note: FilterFindOneReturnStaff_noteOperatorsInput | null;
  _id: FilterFindOneReturn_idOperatorsInput | null;
  createdAt: FilterFindOneReturnCreatedAtOperatorsInput | null;
}

export interface FilterFindOneReturnReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneReturnDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneReturnReturn_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneReturnStaff_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneReturn_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "RETURN_NOTE_ASC"
  | "RETURN_NOTE_DESC"
  | "STAFF_NOTE_ASC"
  | "STAFF_NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyReturnOperatorsInput | null;
  OR: Array<FilterFindManyReturnInput>;
  AND: Array<FilterFindManyReturnInput>;
}

export interface FilterFindManyReturnOperatorsInput {
  reference_no: FilterFindManyReturnReference_noOperatorsInput | null;
  document: FilterFindManyReturnDocumentOperatorsInput | null;
  return_note: FilterFindManyReturnReturn_noteOperatorsInput | null;
  staff_note: FilterFindManyReturnStaff_noteOperatorsInput | null;
  _id: FilterFindManyReturn_idOperatorsInput | null;
  createdAt: FilterFindManyReturnCreatedAtOperatorsInput | null;
}

export interface FilterFindManyReturnReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyReturnDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyReturnReturn_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyReturnStaff_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyReturn_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "RETURN_NOTE_ASC"
  | "RETURN_NOTE_DESC"
  | "STAFF_NOTE_ASC"
  | "STAFF_NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountReturnOperatorsInput | null;
  OR: Array<FilterCountReturnInput>;
  AND: Array<FilterCountReturnInput>;
}

export interface FilterCountReturnOperatorsInput {
  reference_no: FilterCountReturnReference_noOperatorsInput | null;
  document: FilterCountReturnDocumentOperatorsInput | null;
  return_note: FilterCountReturnReturn_noteOperatorsInput | null;
  staff_note: FilterCountReturnStaff_noteOperatorsInput | null;
  _id: FilterCountReturn_idOperatorsInput | null;
  createdAt: FilterCountReturnCreatedAtOperatorsInput | null;
}

export interface FilterCountReturnReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountReturnDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountReturnReturn_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountReturnStaff_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountReturn_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionReturnEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "REFERENCE_NO_DESC"
  | "REFERENCE_NO_ASC"
  | "DOCUMENT_DESC"
  | "DOCUMENT_ASC"
  | "RETURN_NOTE_DESC"
  | "RETURN_NOTE_ASC"
  | "STAFF_NOTE_DESC"
  | "STAFF_NOTE_ASC";

export interface ReturnConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<ReturnEdge>;
}

export interface ReturnEdge {
  node: Return;
  cursor: string;
}

export interface ReturnPagination {
  count: number | null;
  items: Array<Return>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsRoleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "DESCRIPTION_ASC"
  | "DESCRIPTION_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneRoleOperatorsInput | null;
  OR: Array<FilterFindOneRoleInput>;
  AND: Array<FilterFindOneRoleInput>;
}

export interface FilterFindOneRoleOperatorsInput {
  description: FilterFindOneRoleDescriptionOperatorsInput | null;
  _id: FilterFindOneRole_idOperatorsInput | null;
  createdAt: FilterFindOneRoleCreatedAtOperatorsInput | null;
}

export interface FilterFindOneRoleDescriptionOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneRole_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneRoleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneRoleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "DESCRIPTION_ASC"
  | "DESCRIPTION_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyRoleOperatorsInput | null;
  OR: Array<FilterFindManyRoleInput>;
  AND: Array<FilterFindManyRoleInput>;
}

export interface FilterFindManyRoleOperatorsInput {
  description: FilterFindManyRoleDescriptionOperatorsInput | null;
  _id: FilterFindManyRole_idOperatorsInput | null;
  createdAt: FilterFindManyRoleCreatedAtOperatorsInput | null;
}

export interface FilterFindManyRoleDescriptionOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyRole_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyRoleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyRoleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "DESCRIPTION_ASC"
  | "DESCRIPTION_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountRoleOperatorsInput | null;
  OR: Array<FilterCountRoleInput>;
  AND: Array<FilterCountRoleInput>;
}

export interface FilterCountRoleOperatorsInput {
  description: FilterCountRoleDescriptionOperatorsInput | null;
  _id: FilterCountRole_idOperatorsInput | null;
  createdAt: FilterCountRoleCreatedAtOperatorsInput | null;
}

export interface FilterCountRoleDescriptionOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountRole_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountRoleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionRoleEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "DESCRIPTION_DESC"
  | "DESCRIPTION_ASC";

export interface RoleConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<RoleEdge>;
}

export interface RoleEdge {
  node: Role;
  cursor: string;
}

export interface RolePagination {
  count: number | null;
  items: Array<Role>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsSupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "COMPANY_NAME_ASC"
  | "COMPANY_NAME_DESC"
  | "VAT_NUMBER_ASC"
  | "VAT_NUMBER_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneSupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneSupplierOperatorsInput | null;
  OR: Array<FilterFindOneSupplierInput>;
  AND: Array<FilterFindOneSupplierInput>;
}

export interface FilterFindOneSupplierOperatorsInput {
  name: FilterFindOneSupplierNameOperatorsInput | null;
  image: FilterFindOneSupplierImageOperatorsInput | null;
  company_name: FilterFindOneSupplierCompany_nameOperatorsInput | null;
  vat_number: FilterFindOneSupplierVat_numberOperatorsInput | null;
  email: FilterFindOneSupplierEmailOperatorsInput | null;
  phone_number: FilterFindOneSupplierPhone_numberOperatorsInput | null;
  address: FilterFindOneSupplierAddressOperatorsInput | null;
  _id: FilterFindOneSupplier_idOperatorsInput | null;
  createdAt: FilterFindOneSupplierCreatedAtOperatorsInput | null;
}

export interface FilterFindOneSupplierNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneSupplierImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneSupplierCompany_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneSupplierVat_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindOneSupplierEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneSupplierPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindOneSupplierAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneSupplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneSupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneSupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "COMPANY_NAME_ASC"
  | "COMPANY_NAME_DESC"
  | "VAT_NUMBER_ASC"
  | "VAT_NUMBER_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManySupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManySupplierOperatorsInput | null;
  OR: Array<FilterFindManySupplierInput>;
  AND: Array<FilterFindManySupplierInput>;
}

export interface FilterFindManySupplierOperatorsInput {
  name: FilterFindManySupplierNameOperatorsInput | null;
  image: FilterFindManySupplierImageOperatorsInput | null;
  company_name: FilterFindManySupplierCompany_nameOperatorsInput | null;
  vat_number: FilterFindManySupplierVat_numberOperatorsInput | null;
  email: FilterFindManySupplierEmailOperatorsInput | null;
  phone_number: FilterFindManySupplierPhone_numberOperatorsInput | null;
  address: FilterFindManySupplierAddressOperatorsInput | null;
  _id: FilterFindManySupplier_idOperatorsInput | null;
  createdAt: FilterFindManySupplierCreatedAtOperatorsInput | null;
}

export interface FilterFindManySupplierNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManySupplierImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManySupplierCompany_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManySupplierVat_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindManySupplierEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManySupplierPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindManySupplierAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManySupplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManySupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManySupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "COMPANY_NAME_ASC"
  | "COMPANY_NAME_DESC"
  | "VAT_NUMBER_ASC"
  | "VAT_NUMBER_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountSupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountSupplierOperatorsInput | null;
  OR: Array<FilterCountSupplierInput>;
  AND: Array<FilterCountSupplierInput>;
}

export interface FilterCountSupplierOperatorsInput {
  name: FilterCountSupplierNameOperatorsInput | null;
  image: FilterCountSupplierImageOperatorsInput | null;
  company_name: FilterCountSupplierCompany_nameOperatorsInput | null;
  vat_number: FilterCountSupplierVat_numberOperatorsInput | null;
  email: FilterCountSupplierEmailOperatorsInput | null;
  phone_number: FilterCountSupplierPhone_numberOperatorsInput | null;
  address: FilterCountSupplierAddressOperatorsInput | null;
  _id: FilterCountSupplier_idOperatorsInput | null;
  createdAt: FilterCountSupplierCreatedAtOperatorsInput | null;
}

export interface FilterCountSupplierNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountSupplierImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountSupplierCompany_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountSupplierVat_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterCountSupplierEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountSupplierPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterCountSupplierAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountSupplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountSupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionSupplierEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC"
  | "IMAGE_DESC"
  | "IMAGE_ASC"
  | "COMPANY_NAME_DESC"
  | "COMPANY_NAME_ASC"
  | "VAT_NUMBER_DESC"
  | "VAT_NUMBER_ASC"
  | "EMAIL_DESC"
  | "EMAIL_ASC"
  | "PHONE_NUMBER_DESC"
  | "PHONE_NUMBER_ASC"
  | "ADDRESS_DESC"
  | "ADDRESS_ASC";

export interface SupplierConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<SupplierEdge>;
}

export interface SupplierEdge {
  node: Supplier;
  cursor: string;
}

export interface SupplierPagination {
  count: number | null;
  items: Array<Supplier>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsTaxInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneTaxOperatorsInput | null;
  OR: Array<FilterFindOneTaxInput>;
  AND: Array<FilterFindOneTaxInput>;
}

export interface FilterFindOneTaxOperatorsInput {
  name: FilterFindOneTaxNameOperatorsInput | null;
  _id: FilterFindOneTax_idOperatorsInput | null;
  createdAt: FilterFindOneTaxCreatedAtOperatorsInput | null;
}

export interface FilterFindOneTaxNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneTax_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneTaxCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneTaxInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyTaxOperatorsInput | null;
  OR: Array<FilterFindManyTaxInput>;
  AND: Array<FilterFindManyTaxInput>;
}

export interface FilterFindManyTaxOperatorsInput {
  name: FilterFindManyTaxNameOperatorsInput | null;
  _id: FilterFindManyTax_idOperatorsInput | null;
  createdAt: FilterFindManyTaxCreatedAtOperatorsInput | null;
}

export interface FilterFindManyTaxNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyTax_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyTaxCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyTaxInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountTaxOperatorsInput | null;
  OR: Array<FilterCountTaxInput>;
  AND: Array<FilterCountTaxInput>;
}

export interface FilterCountTaxOperatorsInput {
  name: FilterCountTaxNameOperatorsInput | null;
  _id: FilterCountTax_idOperatorsInput | null;
  createdAt: FilterCountTaxCreatedAtOperatorsInput | null;
}

export interface FilterCountTaxNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountTax_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountTaxCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionTaxEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC";

export interface TaxConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<TaxEdge>;
}

export interface TaxEdge {
  node: Tax;
  cursor: string;
}

export interface TaxPagination {
  count: number | null;
  items: Array<Tax>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsTransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneTransferOperatorsInput | null;
  OR: Array<FilterFindOneTransferInput>;
  AND: Array<FilterFindOneTransferInput>;
}

export interface FilterFindOneTransferOperatorsInput {
  reference_no: FilterFindOneTransferReference_noOperatorsInput | null;
  document: FilterFindOneTransferDocumentOperatorsInput | null;
  note: FilterFindOneTransferNoteOperatorsInput | null;
  _id: FilterFindOneTransfer_idOperatorsInput | null;
  createdAt: FilterFindOneTransferCreatedAtOperatorsInput | null;
}

export interface FilterFindOneTransferReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneTransferDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneTransferNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneTransfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneTransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneTransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyTransferOperatorsInput | null;
  OR: Array<FilterFindManyTransferInput>;
  AND: Array<FilterFindManyTransferInput>;
}

export interface FilterFindManyTransferOperatorsInput {
  reference_no: FilterFindManyTransferReference_noOperatorsInput | null;
  document: FilterFindManyTransferDocumentOperatorsInput | null;
  note: FilterFindManyTransferNoteOperatorsInput | null;
  _id: FilterFindManyTransfer_idOperatorsInput | null;
  createdAt: FilterFindManyTransferCreatedAtOperatorsInput | null;
}

export interface FilterFindManyTransferReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyTransferDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyTransferNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyTransfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyTransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyTransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountTransferOperatorsInput | null;
  OR: Array<FilterCountTransferInput>;
  AND: Array<FilterCountTransferInput>;
}

export interface FilterCountTransferOperatorsInput {
  reference_no: FilterCountTransferReference_noOperatorsInput | null;
  document: FilterCountTransferDocumentOperatorsInput | null;
  note: FilterCountTransferNoteOperatorsInput | null;
  _id: FilterCountTransfer_idOperatorsInput | null;
  createdAt: FilterCountTransferCreatedAtOperatorsInput | null;
}

export interface FilterCountTransferReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountTransferDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountTransferNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountTransfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountTransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionTransferEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "REFERENCE_NO_DESC"
  | "REFERENCE_NO_ASC"
  | "DOCUMENT_DESC"
  | "DOCUMENT_ASC"
  | "NOTE_DESC"
  | "NOTE_ASC";

export interface TransferConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<TransferEdge>;
}

export interface TransferEdge {
  node: Transfer;
  cursor: string;
}

export interface TransferPagination {
  count: number | null;
  items: Array<Transfer>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsUnitInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "UNIT_NAME_ASC"
  | "UNIT_NAME_DESC"
  | "UNIT_CODE_ASC"
  | "UNIT_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneUnitOperatorsInput | null;
  OR: Array<FilterFindOneUnitInput>;
  AND: Array<FilterFindOneUnitInput>;
}

export interface FilterFindOneUnitOperatorsInput {
  unit_name: FilterFindOneUnitUnit_nameOperatorsInput | null;
  unit_code: FilterFindOneUnitUnit_codeOperatorsInput | null;
  _id: FilterFindOneUnit_idOperatorsInput | null;
  createdAt: FilterFindOneUnitCreatedAtOperatorsInput | null;
}

export interface FilterFindOneUnitUnit_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneUnitUnit_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneUnit_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneUnitCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneUnitInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "UNIT_NAME_ASC"
  | "UNIT_NAME_DESC"
  | "UNIT_CODE_ASC"
  | "UNIT_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyUnitOperatorsInput | null;
  OR: Array<FilterFindManyUnitInput>;
  AND: Array<FilterFindManyUnitInput>;
}

export interface FilterFindManyUnitOperatorsInput {
  unit_name: FilterFindManyUnitUnit_nameOperatorsInput | null;
  unit_code: FilterFindManyUnitUnit_codeOperatorsInput | null;
  _id: FilterFindManyUnit_idOperatorsInput | null;
  createdAt: FilterFindManyUnitCreatedAtOperatorsInput | null;
}

export interface FilterFindManyUnitUnit_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyUnitUnit_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyUnit_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyUnitCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyUnitInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "UNIT_NAME_ASC"
  | "UNIT_NAME_DESC"
  | "UNIT_CODE_ASC"
  | "UNIT_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountUnitOperatorsInput | null;
  OR: Array<FilterCountUnitInput>;
  AND: Array<FilterCountUnitInput>;
}

export interface FilterCountUnitOperatorsInput {
  unit_name: FilterCountUnitUnit_nameOperatorsInput | null;
  unit_code: FilterCountUnitUnit_codeOperatorsInput | null;
  _id: FilterCountUnit_idOperatorsInput | null;
  createdAt: FilterCountUnitCreatedAtOperatorsInput | null;
}

export interface FilterCountUnitUnit_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountUnitUnit_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountUnit_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountUnitCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionUnitEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "UNIT_NAME_DESC"
  | "UNIT_NAME_ASC"
  | "UNIT_CODE_DESC"
  | "UNIT_CODE_ASC";

export interface UnitConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<UnitEdge>;
}

export interface UnitEdge {
  node: Unit;
  cursor: string;
}

export interface UnitPagination {
  count: number | null;
  items: Array<Unit>;
  pageInfo: PaginationInfo;
}

export type SortFindByIdsUserInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindOneUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneUserOperatorsInput | null;
  OR: Array<FilterFindOneUserInput>;
  AND: Array<FilterFindOneUserInput>;
}

export interface FilterFindOneUserOperatorsInput {
  _id: FilterFindOneUser_idOperatorsInput | null;
  createdAt: FilterFindOneUserCreatedAtOperatorsInput | null;
}

export interface FilterFindOneUser_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneUserCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneUserInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyUserOperatorsInput | null;
  OR: Array<FilterFindManyUserInput>;
  AND: Array<FilterFindManyUserInput>;
}

export interface FilterFindManyUserOperatorsInput {
  _id: FilterFindManyUser_idOperatorsInput | null;
  createdAt: FilterFindManyUserCreatedAtOperatorsInput | null;
}

export interface FilterFindManyUser_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyUserCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyUserInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountUserOperatorsInput | null;
  OR: Array<FilterCountUserInput>;
  AND: Array<FilterCountUserInput>;
}

export interface FilterCountUserOperatorsInput {
  _id: FilterCountUser_idOperatorsInput | null;
  createdAt: FilterCountUserCreatedAtOperatorsInput | null;
}

export interface FilterCountUser_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountUserCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionUserEnum = "_ID_DESC" | "_ID_ASC";

export interface UserConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<UserEdge>;
}

export interface UserEdge {
  node: User;
  cursor: string;
}

export interface UserPagination {
  count: number | null;
  items: Array<User>;
  pageInfo: PaginationInfo;
}

export interface FilterFindOneValueInput {
  name: string | null;
  attribute: MongoID | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneValueOperatorsInput | null;
  OR: Array<FilterFindOneValueInput>;
  AND: Array<FilterFindOneValueInput>;
}

export interface FilterFindOneValueOperatorsInput {
  name: FilterFindOneValueNameOperatorsInput | null;
  _id: FilterFindOneValue_idOperatorsInput | null;
  createdAt: FilterFindOneValueCreatedAtOperatorsInput | null;
}

export interface FilterFindOneValueNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneValue_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneValueCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneValueInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyValueInput {
  name: string | null;
  attribute: MongoID | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyValueOperatorsInput | null;
  OR: Array<FilterFindManyValueInput>;
  AND: Array<FilterFindManyValueInput>;
}

export interface FilterFindManyValueOperatorsInput {
  name: FilterFindManyValueNameOperatorsInput | null;
  _id: FilterFindManyValue_idOperatorsInput | null;
  createdAt: FilterFindManyValueCreatedAtOperatorsInput | null;
}

export interface FilterFindManyValueNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyValue_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyValueCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyValueInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountValueInput {
  name: string | null;
  attribute: MongoID | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountValueOperatorsInput | null;
  OR: Array<FilterCountValueInput>;
  AND: Array<FilterCountValueInput>;
}

export interface FilterCountValueOperatorsInput {
  name: FilterCountValueNameOperatorsInput | null;
  _id: FilterCountValue_idOperatorsInput | null;
  createdAt: FilterCountValueCreatedAtOperatorsInput | null;
}

export interface FilterCountValueNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountValue_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountValueCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionValueEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC";

export interface ValueConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<ValueEdge>;
}

export interface ValueEdge {
  node: Value;
  cursor: string;
}

export interface ValuePagination {
  count: number | null;
  items: Array<Value>;
  pageInfo: PaginationInfo;
}

export interface FilterFindOneWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindOneWarehouseOperatorsInput | null;
  OR: Array<FilterFindOneWarehouseInput>;
  AND: Array<FilterFindOneWarehouseInput>;
}

export interface FilterFindOneWarehouseOperatorsInput {
  name: FilterFindOneWarehouseNameOperatorsInput | null;
  email: FilterFindOneWarehouseEmailOperatorsInput | null;
  address: FilterFindOneWarehouseAddressOperatorsInput | null;
  phone: FilterFindOneWarehousePhoneOperatorsInput | null;
  _id: FilterFindOneWarehouse_idOperatorsInput | null;
  createdAt: FilterFindOneWarehouseCreatedAtOperatorsInput | null;
}

export interface FilterFindOneWarehouseNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneWarehouseEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneWarehouseAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindOneWarehousePhoneOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindOneWarehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindOneWarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindOneWarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "PHONE_ASC"
  | "PHONE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterFindManyWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterFindManyWarehouseOperatorsInput | null;
  OR: Array<FilterFindManyWarehouseInput>;
  AND: Array<FilterFindManyWarehouseInput>;
}

export interface FilterFindManyWarehouseOperatorsInput {
  name: FilterFindManyWarehouseNameOperatorsInput | null;
  email: FilterFindManyWarehouseEmailOperatorsInput | null;
  address: FilterFindManyWarehouseAddressOperatorsInput | null;
  phone: FilterFindManyWarehousePhoneOperatorsInput | null;
  _id: FilterFindManyWarehouse_idOperatorsInput | null;
  createdAt: FilterFindManyWarehouseCreatedAtOperatorsInput | null;
}

export interface FilterFindManyWarehouseNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyWarehouseEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyWarehouseAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterFindManyWarehousePhoneOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterFindManyWarehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterFindManyWarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortFindManyWarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "PHONE_ASC"
  | "PHONE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface FilterCountWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterCountWarehouseOperatorsInput | null;
  OR: Array<FilterCountWarehouseInput>;
  AND: Array<FilterCountWarehouseInput>;
}

export interface FilterCountWarehouseOperatorsInput {
  name: FilterCountWarehouseNameOperatorsInput | null;
  email: FilterCountWarehouseEmailOperatorsInput | null;
  address: FilterCountWarehouseAddressOperatorsInput | null;
  phone: FilterCountWarehousePhoneOperatorsInput | null;
  _id: FilterCountWarehouse_idOperatorsInput | null;
  createdAt: FilterCountWarehouseCreatedAtOperatorsInput | null;
}

export interface FilterCountWarehouseNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountWarehouseEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountWarehouseAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterCountWarehousePhoneOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterCountWarehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterCountWarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortConnectionWarehouseEnum =
  | "_ID_DESC"
  | "_ID_ASC"
  | "NAME_DESC"
  | "NAME_ASC"
  | "EMAIL_DESC"
  | "EMAIL_ASC"
  | "ADDRESS_DESC"
  | "ADDRESS_ASC"
  | "PHONE_DESC"
  | "PHONE_ASC";

export interface WarehouseConnection {
  count: number;
  pageInfo: PageInfo;
  edges: Array<WarehouseEdge>;
}

export interface WarehouseEdge {
  node: Warehouse;
  cursor: string;
}

export interface WarehousePagination {
  count: number | null;
  items: Array<Warehouse>;
  pageInfo: PaginationInfo;
}

export interface Mutation {
  accountCreateOne: CreateOneAccountPayload | null;
  accountCreateMany: CreateManyAccountPayload | null;
  accountUpdateById: UpdateByIdAccountPayload | null;
  accountUpdateOne: UpdateOneAccountPayload | null;
  accountUpdateMany: UpdateManyAccountPayload | null;
  accountRemoveById: RemoveByIdAccountPayload | null;
  accountRemoveOne: RemoveOneAccountPayload | null;
  accountRemoveMany: RemoveManyAccountPayload | null;
  adjustmentCreateOne: CreateOneAdjustmentPayload | null;
  adjustmentCreateMany: CreateManyAdjustmentPayload | null;
  adjustmentUpdateById: UpdateByIdAdjustmentPayload | null;
  adjustmentUpdateOne: UpdateOneAdjustmentPayload | null;
  adjustmentUpdateMany: UpdateManyAdjustmentPayload | null;
  adjustmentRemoveById: RemoveByIdAdjustmentPayload | null;
  adjustmentRemoveOne: RemoveOneAdjustmentPayload | null;
  adjustmentRemoveMany: RemoveManyAdjustmentPayload | null;
  attributeCreateOne: CreateOneAttributePayload | null;
  attributeCreateMany: CreateManyAttributePayload | null;
  attributeUpdateById: UpdateByIdAttributePayload | null;
  attributeUpdateOne: UpdateOneAttributePayload | null;
  attributeUpdateMany: UpdateManyAttributePayload | null;
  attributeRemoveById: RemoveByIdAttributePayload | null;
  attributeRemoveOne: RemoveOneAttributePayload | null;
  attributeRemoveMany: RemoveManyAttributePayload | null;
  brandCreateOne: CreateOneBrandPayload | null;
  brandCreateMany: CreateManyBrandPayload | null;
  brandUpdateById: UpdateByIdBrandPayload | null;
  brandUpdateOne: UpdateOneBrandPayload | null;
  brandUpdateMany: UpdateManyBrandPayload | null;
  brandRemoveById: RemoveByIdBrandPayload | null;
  brandRemoveOne: RemoveOneBrandPayload | null;
  brandRemoveMany: RemoveManyBrandPayload | null;
  categoryCreateOne: CreateOneCategoryPayload | null;
  categoryCreateMany: CreateManyCategoryPayload | null;
  categoryUpdateById: UpdateByIdCategoryPayload | null;
  categoryUpdateOne: UpdateOneCategoryPayload | null;
  categoryUpdateMany: UpdateManyCategoryPayload | null;
  categoryRemoveById: RemoveByIdCategoryPayload | null;
  categoryRemoveOne: RemoveOneCategoryPayload | null;
  categoryRemoveMany: RemoveManyCategoryPayload | null;
  couponCreateOne: CreateOneCouponPayload | null;
  couponCreateMany: CreateManyCouponPayload | null;
  couponUpdateById: UpdateByIdCouponPayload | null;
  couponUpdateOne: UpdateOneCouponPayload | null;
  couponUpdateMany: UpdateManyCouponPayload | null;
  couponRemoveById: RemoveByIdCouponPayload | null;
  couponRemoveOne: RemoveOneCouponPayload | null;
  couponRemoveMany: RemoveManyCouponPayload | null;
  customerCreateOne: CreateOneCustomerPayload | null;
  customerCreateMany: CreateManyCustomerPayload | null;
  customerUpdateById: UpdateByIdCustomerPayload | null;
  customerUpdateOne: UpdateOneCustomerPayload | null;
  customerUpdateMany: UpdateManyCustomerPayload | null;
  customerRemoveById: RemoveByIdCustomerPayload | null;
  customerRemoveOne: RemoveOneCustomerPayload | null;
  customerRemoveMany: RemoveManyCustomerPayload | null;
  customerGroupCreateOne: CreateOneCustomer_GroupPayload | null;
  customerGroupCreateMany: CreateManyCustomer_GroupPayload | null;
  customerGroupUpdateById: UpdateByIdCustomer_GroupPayload | null;
  customerGroupUpdateOne: UpdateOneCustomer_GroupPayload | null;
  customerGroupUpdateMany: UpdateManyCustomer_GroupPayload | null;
  customerGroupRemoveById: RemoveByIdCustomer_GroupPayload | null;
  customerGroupRemoveOne: RemoveOneCustomer_GroupPayload | null;
  customerGroupRemoveMany: RemoveManyCustomer_GroupPayload | null;
  departmentCreateOne: CreateOneDepartmentPayload | null;
  departmentCreateMany: CreateManyDepartmentPayload | null;
  departmentUpdateById: UpdateByIdDepartmentPayload | null;
  departmentUpdateOne: UpdateOneDepartmentPayload | null;
  departmentUpdateMany: UpdateManyDepartmentPayload | null;
  departmentRemoveById: RemoveByIdDepartmentPayload | null;
  departmentRemoveOne: RemoveOneDepartmentPayload | null;
  departmentRemoveMany: RemoveManyDepartmentPayload | null;
  EmployeeCreateOne: CreateOneEmployeePayload | null;
  EmployeeCreateMany: CreateManyEmployeePayload | null;
  EmployeeUpdateById: UpdateByIdEmployeePayload | null;
  EmployeeUpdateOne: UpdateOneEmployeePayload | null;
  EmployeeUpdateMany: UpdateManyEmployeePayload | null;
  EmployeeRemoveById: RemoveByIdEmployeePayload | null;
  EmployeeRemoveOne: RemoveOneEmployeePayload | null;
  EmployeeRemoveMany: RemoveManyEmployeePayload | null;
  productAdjustmentCreateOne: CreateOneProduct_AdjustmentPayload | null;
  productAdjustmentCreateMany: CreateManyProduct_AdjustmentPayload | null;
  productAdjustmentUpdateById: UpdateByIdProduct_AdjustmentPayload | null;
  productAdjustmentUpdateOne: UpdateOneProduct_AdjustmentPayload | null;
  productAdjustmentUpdateMany: UpdateManyProduct_AdjustmentPayload | null;
  productAdjustmentRemoveById: RemoveByIdProduct_AdjustmentPayload | null;
  productAdjustmentRemoveOne: RemoveOneProduct_AdjustmentPayload | null;
  productAdjustmentRemoveMany: RemoveManyProduct_AdjustmentPayload | null;
  productPurchaseCreateOne: CreateOneProduct_PurchasePayload | null;
  productPurchaseCreateMany: CreateManyProduct_PurchasePayload | null;
  productPurchaseUpdateById: UpdateByIdProduct_PurchasePayload | null;
  productPurchaseUpdateOne: UpdateOneProduct_PurchasePayload | null;
  productPurchaseUpdateMany: UpdateManyProduct_PurchasePayload | null;
  productPurchaseRemoveById: RemoveByIdProduct_PurchasePayload | null;
  productPurchaseRemoveOne: RemoveOneProduct_PurchasePayload | null;
  productPurchaseRemoveMany: RemoveManyProduct_PurchasePayload | null;
  productQuotationCreateOne: CreateOneProduct_QuotationPayload | null;
  productQuotationCreateMany: CreateManyProduct_QuotationPayload | null;
  productQuotationUpdateById: UpdateByIdProduct_QuotationPayload | null;
  productQuotationUpdateOne: UpdateOneProduct_QuotationPayload | null;
  productQuotationUpdateMany: UpdateManyProduct_QuotationPayload | null;
  productQuotationRemoveById: RemoveByIdProduct_QuotationPayload | null;
  productQuotationRemoveOne: RemoveOneProduct_QuotationPayload | null;
  productQuotationRemoveMany: RemoveManyProduct_QuotationPayload | null;
  productReturnCreateOne: CreateOneProduct_ReturnPayload | null;
  productReturnCreateMany: CreateManyProduct_ReturnPayload | null;
  productReturnUpdateById: UpdateByIdProduct_ReturnPayload | null;
  productReturnUpdateOne: UpdateOneProduct_ReturnPayload | null;
  productReturnUpdateMany: UpdateManyProduct_ReturnPayload | null;
  productReturnRemoveById: RemoveByIdProduct_ReturnPayload | null;
  productReturnRemoveOne: RemoveOneProduct_ReturnPayload | null;
  productReturnRemoveMany: RemoveManyProduct_ReturnPayload | null;
  productSaleCreateOne: CreateOneProduct_SalePayload | null;
  productSaleCreateMany: CreateManyProduct_SalePayload | null;
  productSaleUpdateById: UpdateByIdProduct_SalePayload | null;
  productSaleUpdateOne: UpdateOneProduct_SalePayload | null;
  productSaleUpdateMany: UpdateManyProduct_SalePayload | null;
  productSaleRemoveById: RemoveByIdProduct_SalePayload | null;
  productSaleRemoveOne: RemoveOneProduct_SalePayload | null;
  productSaleRemoveMany: RemoveManyProduct_SalePayload | null;
  productSupplierCreateOne: CreateOneProduct_SupplierPayload | null;
  productSupplierCreateMany: CreateManyProduct_SupplierPayload | null;
  productSupplierUpdateById: UpdateByIdProduct_SupplierPayload | null;
  productSupplierUpdateOne: UpdateOneProduct_SupplierPayload | null;
  productSupplierUpdateMany: UpdateManyProduct_SupplierPayload | null;
  productSupplierRemoveById: RemoveByIdProduct_SupplierPayload | null;
  productSupplierRemoveOne: RemoveOneProduct_SupplierPayload | null;
  productSupplierRemoveMany: RemoveManyProduct_SupplierPayload | null;
  ProductTransferCreateOne: CreateOneProduct_TransferPayload | null;
  ProductTransferCreateMany: CreateManyProduct_TransferPayload | null;
  ProductTransferUpdateById: UpdateByIdProduct_TransferPayload | null;
  ProductTransferUpdateOne: UpdateOneProduct_TransferPayload | null;
  ProductTransferUpdateMany: UpdateManyProduct_TransferPayload | null;
  ProductTransferRemoveById: RemoveByIdProduct_TransferPayload | null;
  ProductTransferRemoveOne: RemoveOneProduct_TransferPayload | null;
  ProductTransferRemoveMany: RemoveManyProduct_TransferPayload | null;
  productVariantCreateOne: CreateOneProduct_VariantPayload | null;
  productVariantCreateMany: CreateManyProduct_VariantPayload | null;
  productVariantUpdateById: UpdateByIdProduct_VariantPayload | null;
  productVariantUpdateOne: UpdateOneProduct_VariantPayload | null;
  productVariantUpdateMany: UpdateManyProduct_VariantPayload | null;
  productVariantRemoveById: RemoveByIdProduct_VariantPayload | null;
  productVariantRemoveOne: RemoveOneProduct_VariantPayload | null;
  productVariantRemoveMany: RemoveManyProduct_VariantPayload | null;
  productWarehouseCreateOne: CreateOneProduct_WarehousePayload | null;
  productWarehouseCreateMany: CreateManyProduct_WarehousePayload | null;
  productWarehouseUpdateById: UpdateByIdProduct_WarehousePayload | null;
  productWarehouseUpdateOne: UpdateOneProduct_WarehousePayload | null;
  productWarehouseUpdateMany: UpdateManyProduct_WarehousePayload | null;
  productWarehouseRemoveById: RemoveByIdProduct_WarehousePayload | null;
  productWarehouseRemoveOne: RemoveOneProduct_WarehousePayload | null;
  productWarehouseRemoveMany: RemoveManyProduct_WarehousePayload | null;
  productCreateOne: CreateOneProductPayload | null;
  productCreateMany: CreateManyProductPayload | null;
  productUpdateById: UpdateByIdProductPayload | null;
  productUpdateOne: UpdateOneProductPayload | null;
  productUpdateMany: UpdateManyProductPayload | null;
  productRemoveById: RemoveByIdProductPayload | null;
  productRemoveOne: RemoveOneProductPayload | null;
  productRemoveMany: RemoveManyProductPayload | null;
  purchaseCreateOne: CreateOnePurchasePayload | null;
  purchaseCreateMany: CreateManyPurchasePayload | null;
  purchaseUpdateById: UpdateByIdPurchasePayload | null;
  purchaseUpdateOne: UpdateOnePurchasePayload | null;
  purchaseUpdateMany: UpdateManyPurchasePayload | null;
  purchaseRemoveById: RemoveByIdPurchasePayload | null;
  purchaseRemoveOne: RemoveOnePurchasePayload | null;
  purchaseRemoveMany: RemoveManyPurchasePayload | null;
  returnCreateOne: CreateOneReturnPayload | null;
  returnCreateMany: CreateManyReturnPayload | null;
  returnUpdateById: UpdateByIdReturnPayload | null;
  returnUpdateOne: UpdateOneReturnPayload | null;
  returnUpdateMany: UpdateManyReturnPayload | null;
  returnRemoveById: RemoveByIdReturnPayload | null;
  returnRemoveOne: RemoveOneReturnPayload | null;
  returnRemoveMany: RemoveManyReturnPayload | null;
  quotationCreateOne: CreateOneQuotationPayload | null;
  quotationCreateMany: CreateManyQuotationPayload | null;
  quotationUpdateById: UpdateByIdQuotationPayload | null;
  quotationUpdateOne: UpdateOneQuotationPayload | null;
  quotationUpdateMany: UpdateManyQuotationPayload | null;
  quotationRemoveById: RemoveByIdQuotationPayload | null;
  quotationRemoveOne: RemoveOneQuotationPayload | null;
  quotationRemoveMany: RemoveManyQuotationPayload | null;
  roleCreateOne: CreateOneRolePayload | null;
  roleCreateMany: CreateManyRolePayload | null;
  roleUpdateById: UpdateByIdRolePayload | null;
  roleUpdateOne: UpdateOneRolePayload | null;
  roleUpdateMany: UpdateManyRolePayload | null;
  roleRemoveById: RemoveByIdRolePayload | null;
  roleRemoveOne: RemoveOneRolePayload | null;
  roleRemoveMany: RemoveManyRolePayload | null;
  supplierCreateOne: CreateOneSupplierPayload | null;
  supplierCreateMany: CreateManySupplierPayload | null;
  supplierUpdateById: UpdateByIdSupplierPayload | null;
  supplierUpdateOne: UpdateOneSupplierPayload | null;
  supplierUpdateMany: UpdateManySupplierPayload | null;
  supplierRemoveById: RemoveByIdSupplierPayload | null;
  supplierRemoveOne: RemoveOneSupplierPayload | null;
  supplierRemoveMany: RemoveManySupplierPayload | null;
  taxCreateOne: CreateOneTaxPayload | null;
  taxCreateMany: CreateManyTaxPayload | null;
  taxUpdateById: UpdateByIdTaxPayload | null;
  taxUpdateOne: UpdateOneTaxPayload | null;
  taxUpdateMany: UpdateManyTaxPayload | null;
  taxRemoveById: RemoveByIdTaxPayload | null;
  taxRemoveOne: RemoveOneTaxPayload | null;
  taxRemoveMany: RemoveManyTaxPayload | null;
  transferCreateOne: CreateOneTransferPayload | null;
  transferCreateMany: CreateManyTransferPayload | null;
  transferUpdateById: UpdateByIdTransferPayload | null;
  transferUpdateOne: UpdateOneTransferPayload | null;
  transferUpdateMany: UpdateManyTransferPayload | null;
  transferRemoveById: RemoveByIdTransferPayload | null;
  transferRemoveOne: RemoveOneTransferPayload | null;
  transferRemoveMany: RemoveManyTransferPayload | null;
  unitCreateOne: CreateOneUnitPayload | null;
  unitCreateMany: CreateManyUnitPayload | null;
  unitUpdateById: UpdateByIdUnitPayload | null;
  unitUpdateOne: UpdateOneUnitPayload | null;
  unitUpdateMany: UpdateManyUnitPayload | null;
  unitRemoveById: RemoveByIdUnitPayload | null;
  unitRemoveOne: RemoveOneUnitPayload | null;
  unitRemoveMany: RemoveManyUnitPayload | null;
  userCreateOne: CreateOneUserPayload | null;
  userCreateMany: CreateManyUserPayload | null;
  userUpdateById: UpdateByIdUserPayload | null;
  userUpdateOne: UpdateOneUserPayload | null;
  userUpdateMany: UpdateManyUserPayload | null;
  userRemoveById: RemoveByIdUserPayload | null;
  userRemoveOne: RemoveOneUserPayload | null;
  userRemoveMany: RemoveManyUserPayload | null;
  valueCreateOne: CreateOneValuePayload | null;
  valueCreateMany: CreateManyValuePayload | null;
  valueUpdateById: UpdateByIdValuePayload | null;
  valueUpdateOne: UpdateOneValuePayload | null;
  valueUpdateMany: UpdateManyValuePayload | null;
  valueRemoveById: RemoveByIdValuePayload | null;
  valueRemoveOne: RemoveOneValuePayload | null;
  valueRemoveMany: RemoveManyValuePayload | null;
  warehouseCreateOne: CreateOneWarehousePayload | null;
  warehouseCreateMany: CreateManyWarehousePayload | null;
  warehouseUpdateById: UpdateByIdWarehousePayload | null;
  warehouseUpdateOne: UpdateOneWarehousePayload | null;
  warehouseUpdateMany: UpdateManyWarehousePayload | null;
  warehouseRemoveById: RemoveByIdWarehousePayload | null;
  warehouseRemoveOne: RemoveOneWarehousePayload | null;
  warehouseRemoveMany: RemoveManyWarehousePayload | null;
}

export interface AccountCreateOneMutationArgs {
  record: CreateOneAccountInput;
}

export interface AccountCreateManyMutationArgs {
  records: Array<CreateManyAccountInput>;
}

export interface AccountUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdAccountInput;
}

export interface AccountUpdateOneMutationArgs {
  record: UpdateOneAccountInput;
  filter: FilterUpdateOneAccountInput | null;
  sort: SortUpdateOneAccountInput | null;
  skip: number | null;
}

export interface AccountUpdateManyMutationArgs {
  record: UpdateManyAccountInput;
  filter: FilterUpdateManyAccountInput | null;
  sort: SortUpdateManyAccountInput | null;
  skip: number | null;
  limit: number | null;
}

export interface AccountRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface AccountRemoveOneMutationArgs {
  filter: FilterRemoveOneAccountInput | null;
  sort: SortRemoveOneAccountInput | null;
}

export interface AccountRemoveManyMutationArgs {
  filter: FilterRemoveManyAccountInput;
  limit: number | null;
}

export interface AdjustmentCreateOneMutationArgs {
  record: CreateOneAdjustmentInput;
}

export interface AdjustmentCreateManyMutationArgs {
  records: Array<CreateManyAdjustmentInput>;
}

export interface AdjustmentUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdAdjustmentInput;
}

export interface AdjustmentUpdateOneMutationArgs {
  record: UpdateOneAdjustmentInput;
  filter: FilterUpdateOneAdjustmentInput | null;
  sort: SortUpdateOneAdjustmentInput | null;
  skip: number | null;
}

export interface AdjustmentUpdateManyMutationArgs {
  record: UpdateManyAdjustmentInput;
  filter: FilterUpdateManyAdjustmentInput | null;
  sort: SortUpdateManyAdjustmentInput | null;
  skip: number | null;
  limit: number | null;
}

export interface AdjustmentRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface AdjustmentRemoveOneMutationArgs {
  filter: FilterRemoveOneAdjustmentInput | null;
  sort: SortRemoveOneAdjustmentInput | null;
}

export interface AdjustmentRemoveManyMutationArgs {
  filter: FilterRemoveManyAdjustmentInput;
  limit: number | null;
}

export interface AttributeCreateOneMutationArgs {
  record: CreateOneAttributeInput;
}

export interface AttributeCreateManyMutationArgs {
  records: Array<CreateManyAttributeInput>;
}

export interface AttributeUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdAttributeInput;
}

export interface AttributeUpdateOneMutationArgs {
  record: UpdateOneAttributeInput;
  filter: FilterUpdateOneAttributeInput | null;
  sort: SortUpdateOneAttributeInput | null;
  skip: number | null;
}

export interface AttributeUpdateManyMutationArgs {
  record: UpdateManyAttributeInput;
  filter: FilterUpdateManyAttributeInput | null;
  sort: SortUpdateManyAttributeInput | null;
  skip: number | null;
  limit: number | null;
}

export interface AttributeRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface AttributeRemoveOneMutationArgs {
  filter: FilterRemoveOneAttributeInput | null;
  sort: SortRemoveOneAttributeInput | null;
}

export interface AttributeRemoveManyMutationArgs {
  filter: FilterRemoveManyAttributeInput;
  limit: number | null;
}

export interface BrandCreateOneMutationArgs {
  record: CreateOneBrandInput;
}

export interface BrandCreateManyMutationArgs {
  records: Array<CreateManyBrandInput>;
}

export interface BrandUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdBrandInput;
}

export interface BrandUpdateOneMutationArgs {
  record: UpdateOneBrandInput;
  filter: FilterUpdateOneBrandInput | null;
  sort: SortUpdateOneBrandInput | null;
  skip: number | null;
}

export interface BrandUpdateManyMutationArgs {
  record: UpdateManyBrandInput;
  filter: FilterUpdateManyBrandInput | null;
  sort: SortUpdateManyBrandInput | null;
  skip: number | null;
  limit: number | null;
}

export interface BrandRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface BrandRemoveOneMutationArgs {
  filter: FilterRemoveOneBrandInput | null;
  sort: SortRemoveOneBrandInput | null;
}

export interface BrandRemoveManyMutationArgs {
  filter: FilterRemoveManyBrandInput;
  limit: number | null;
}

export interface CategoryCreateOneMutationArgs {
  record: CreateOneCategoryInput;
}

export interface CategoryCreateManyMutationArgs {
  records: Array<CreateManyCategoryInput>;
}

export interface CategoryUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdCategoryInput;
}

export interface CategoryUpdateOneMutationArgs {
  record: UpdateOneCategoryInput;
  filter: FilterUpdateOneCategoryInput | null;
  sort: SortUpdateOneCategoryInput | null;
  skip: number | null;
}

export interface CategoryUpdateManyMutationArgs {
  record: UpdateManyCategoryInput;
  filter: FilterUpdateManyCategoryInput | null;
  sort: SortUpdateManyCategoryInput | null;
  skip: number | null;
  limit: number | null;
}

export interface CategoryRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface CategoryRemoveOneMutationArgs {
  filter: FilterRemoveOneCategoryInput | null;
  sort: SortRemoveOneCategoryInput | null;
}

export interface CategoryRemoveManyMutationArgs {
  filter: FilterRemoveManyCategoryInput;
  limit: number | null;
}

export interface CouponCreateOneMutationArgs {
  record: CreateOneCouponInput;
}

export interface CouponCreateManyMutationArgs {
  records: Array<CreateManyCouponInput>;
}

export interface CouponUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdCouponInput;
}

export interface CouponUpdateOneMutationArgs {
  record: UpdateOneCouponInput;
  filter: FilterUpdateOneCouponInput | null;
  sort: SortUpdateOneCouponInput | null;
  skip: number | null;
}

export interface CouponUpdateManyMutationArgs {
  record: UpdateManyCouponInput;
  filter: FilterUpdateManyCouponInput | null;
  sort: SortUpdateManyCouponInput | null;
  skip: number | null;
  limit: number | null;
}

export interface CouponRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface CouponRemoveOneMutationArgs {
  filter: FilterRemoveOneCouponInput | null;
  sort: SortRemoveOneCouponInput | null;
}

export interface CouponRemoveManyMutationArgs {
  filter: FilterRemoveManyCouponInput;
  limit: number | null;
}

export interface CustomerCreateOneMutationArgs {
  record: CreateOneCustomerInput;
}

export interface CustomerCreateManyMutationArgs {
  records: Array<CreateManyCustomerInput>;
}

export interface CustomerUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdCustomerInput;
}

export interface CustomerUpdateOneMutationArgs {
  record: UpdateOneCustomerInput;
  filter: FilterUpdateOneCustomerInput | null;
  sort: SortUpdateOneCustomerInput | null;
  skip: number | null;
}

export interface CustomerUpdateManyMutationArgs {
  record: UpdateManyCustomerInput;
  filter: FilterUpdateManyCustomerInput | null;
  sort: SortUpdateManyCustomerInput | null;
  skip: number | null;
  limit: number | null;
}

export interface CustomerRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface CustomerRemoveOneMutationArgs {
  filter: FilterRemoveOneCustomerInput | null;
  sort: SortRemoveOneCustomerInput | null;
}

export interface CustomerRemoveManyMutationArgs {
  filter: FilterRemoveManyCustomerInput;
  limit: number | null;
}

export interface CustomerGroupCreateOneMutationArgs {
  record: CreateOneCustomer_GroupInput;
}

export interface CustomerGroupCreateManyMutationArgs {
  records: Array<CreateManyCustomer_GroupInput>;
}

export interface CustomerGroupUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdCustomer_GroupInput;
}

export interface CustomerGroupUpdateOneMutationArgs {
  record: UpdateOneCustomer_GroupInput;
  filter: FilterUpdateOneCustomer_GroupInput | null;
  sort: SortUpdateOneCustomer_GroupInput | null;
  skip: number | null;
}

export interface CustomerGroupUpdateManyMutationArgs {
  record: UpdateManyCustomer_GroupInput;
  filter: FilterUpdateManyCustomer_GroupInput | null;
  sort: SortUpdateManyCustomer_GroupInput | null;
  skip: number | null;
  limit: number | null;
}

export interface CustomerGroupRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface CustomerGroupRemoveOneMutationArgs {
  filter: FilterRemoveOneCustomer_GroupInput | null;
  sort: SortRemoveOneCustomer_GroupInput | null;
}

export interface CustomerGroupRemoveManyMutationArgs {
  filter: FilterRemoveManyCustomer_GroupInput;
  limit: number | null;
}

export interface DepartmentCreateOneMutationArgs {
  record: CreateOneDepartmentInput;
}

export interface DepartmentCreateManyMutationArgs {
  records: Array<CreateManyDepartmentInput>;
}

export interface DepartmentUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdDepartmentInput;
}

export interface DepartmentUpdateOneMutationArgs {
  record: UpdateOneDepartmentInput;
  filter: FilterUpdateOneDepartmentInput | null;
  sort: SortUpdateOneDepartmentInput | null;
  skip: number | null;
}

export interface DepartmentUpdateManyMutationArgs {
  record: UpdateManyDepartmentInput;
  filter: FilterUpdateManyDepartmentInput | null;
  sort: SortUpdateManyDepartmentInput | null;
  skip: number | null;
  limit: number | null;
}

export interface DepartmentRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface DepartmentRemoveOneMutationArgs {
  filter: FilterRemoveOneDepartmentInput | null;
  sort: SortRemoveOneDepartmentInput | null;
}

export interface DepartmentRemoveManyMutationArgs {
  filter: FilterRemoveManyDepartmentInput;
  limit: number | null;
}

export interface EmployeeCreateOneMutationArgs {
  record: CreateOneEmployeeInput;
}

export interface EmployeeCreateManyMutationArgs {
  records: Array<CreateManyEmployeeInput>;
}

export interface EmployeeUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdEmployeeInput;
}

export interface EmployeeUpdateOneMutationArgs {
  record: UpdateOneEmployeeInput;
  filter: FilterUpdateOneEmployeeInput | null;
  sort: SortUpdateOneEmployeeInput | null;
  skip: number | null;
}

export interface EmployeeUpdateManyMutationArgs {
  record: UpdateManyEmployeeInput;
  filter: FilterUpdateManyEmployeeInput | null;
  sort: SortUpdateManyEmployeeInput | null;
  skip: number | null;
  limit: number | null;
}

export interface EmployeeRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface EmployeeRemoveOneMutationArgs {
  filter: FilterRemoveOneEmployeeInput | null;
  sort: SortRemoveOneEmployeeInput | null;
}

export interface EmployeeRemoveManyMutationArgs {
  filter: FilterRemoveManyEmployeeInput;
  limit: number | null;
}

export interface ProductAdjustmentCreateOneMutationArgs {
  record: CreateOneProduct_AdjustmentInput;
}

export interface ProductAdjustmentCreateManyMutationArgs {
  records: Array<CreateManyProduct_AdjustmentInput>;
}

export interface ProductAdjustmentUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProduct_AdjustmentInput;
}

export interface ProductAdjustmentUpdateOneMutationArgs {
  record: UpdateOneProduct_AdjustmentInput;
  filter: FilterUpdateOneProduct_AdjustmentInput | null;
  sort: SortUpdateOneProduct_AdjustmentInput | null;
  skip: number | null;
}

export interface ProductAdjustmentUpdateManyMutationArgs {
  record: UpdateManyProduct_AdjustmentInput;
  filter: FilterUpdateManyProduct_AdjustmentInput | null;
  sort: SortUpdateManyProduct_AdjustmentInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductAdjustmentRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductAdjustmentRemoveOneMutationArgs {
  filter: FilterRemoveOneProduct_AdjustmentInput | null;
  sort: SortRemoveOneProduct_AdjustmentInput | null;
}

export interface ProductAdjustmentRemoveManyMutationArgs {
  filter: FilterRemoveManyProduct_AdjustmentInput;
  limit: number | null;
}

export interface ProductPurchaseCreateOneMutationArgs {
  record: CreateOneProduct_PurchaseInput;
}

export interface ProductPurchaseCreateManyMutationArgs {
  records: Array<CreateManyProduct_PurchaseInput>;
}

export interface ProductPurchaseUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProduct_PurchaseInput;
}

export interface ProductPurchaseUpdateOneMutationArgs {
  record: UpdateOneProduct_PurchaseInput;
  filter: FilterUpdateOneProduct_PurchaseInput | null;
  sort: SortUpdateOneProduct_PurchaseInput | null;
  skip: number | null;
}

export interface ProductPurchaseUpdateManyMutationArgs {
  record: UpdateManyProduct_PurchaseInput;
  filter: FilterUpdateManyProduct_PurchaseInput | null;
  sort: SortUpdateManyProduct_PurchaseInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductPurchaseRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductPurchaseRemoveOneMutationArgs {
  filter: FilterRemoveOneProduct_PurchaseInput | null;
  sort: SortRemoveOneProduct_PurchaseInput | null;
}

export interface ProductPurchaseRemoveManyMutationArgs {
  filter: FilterRemoveManyProduct_PurchaseInput;
  limit: number | null;
}

export interface ProductQuotationCreateOneMutationArgs {
  record: CreateOneProduct_QuotationInput;
}

export interface ProductQuotationCreateManyMutationArgs {
  records: Array<CreateManyProduct_QuotationInput>;
}

export interface ProductQuotationUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProduct_QuotationInput;
}

export interface ProductQuotationUpdateOneMutationArgs {
  record: UpdateOneProduct_QuotationInput;
  filter: FilterUpdateOneProduct_QuotationInput | null;
  sort: SortUpdateOneProduct_QuotationInput | null;
  skip: number | null;
}

export interface ProductQuotationUpdateManyMutationArgs {
  record: UpdateManyProduct_QuotationInput;
  filter: FilterUpdateManyProduct_QuotationInput | null;
  sort: SortUpdateManyProduct_QuotationInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductQuotationRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductQuotationRemoveOneMutationArgs {
  filter: FilterRemoveOneProduct_QuotationInput | null;
  sort: SortRemoveOneProduct_QuotationInput | null;
}

export interface ProductQuotationRemoveManyMutationArgs {
  filter: FilterRemoveManyProduct_QuotationInput;
  limit: number | null;
}

export interface ProductReturnCreateOneMutationArgs {
  record: CreateOneProduct_ReturnInput;
}

export interface ProductReturnCreateManyMutationArgs {
  records: Array<CreateManyProduct_ReturnInput>;
}

export interface ProductReturnUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProduct_ReturnInput;
}

export interface ProductReturnUpdateOneMutationArgs {
  record: UpdateOneProduct_ReturnInput;
  filter: FilterUpdateOneProduct_ReturnInput | null;
  sort: SortUpdateOneProduct_ReturnInput | null;
  skip: number | null;
}

export interface ProductReturnUpdateManyMutationArgs {
  record: UpdateManyProduct_ReturnInput;
  filter: FilterUpdateManyProduct_ReturnInput | null;
  sort: SortUpdateManyProduct_ReturnInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductReturnRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductReturnRemoveOneMutationArgs {
  filter: FilterRemoveOneProduct_ReturnInput | null;
  sort: SortRemoveOneProduct_ReturnInput | null;
}

export interface ProductReturnRemoveManyMutationArgs {
  filter: FilterRemoveManyProduct_ReturnInput;
  limit: number | null;
}

export interface ProductSaleCreateOneMutationArgs {
  record: CreateOneProduct_SaleInput;
}

export interface ProductSaleCreateManyMutationArgs {
  records: Array<CreateManyProduct_SaleInput>;
}

export interface ProductSaleUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProduct_SaleInput;
}

export interface ProductSaleUpdateOneMutationArgs {
  record: UpdateOneProduct_SaleInput;
  filter: FilterUpdateOneProduct_SaleInput | null;
  sort: SortUpdateOneProduct_SaleInput | null;
  skip: number | null;
}

export interface ProductSaleUpdateManyMutationArgs {
  record: UpdateManyProduct_SaleInput;
  filter: FilterUpdateManyProduct_SaleInput | null;
  sort: SortUpdateManyProduct_SaleInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductSaleRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductSaleRemoveOneMutationArgs {
  filter: FilterRemoveOneProduct_SaleInput | null;
  sort: SortRemoveOneProduct_SaleInput | null;
}

export interface ProductSaleRemoveManyMutationArgs {
  filter: FilterRemoveManyProduct_SaleInput;
  limit: number | null;
}

export interface ProductSupplierCreateOneMutationArgs {
  record: CreateOneProduct_SupplierInput;
}

export interface ProductSupplierCreateManyMutationArgs {
  records: Array<CreateManyProduct_SupplierInput>;
}

export interface ProductSupplierUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProduct_SupplierInput;
}

export interface ProductSupplierUpdateOneMutationArgs {
  record: UpdateOneProduct_SupplierInput;
  filter: FilterUpdateOneProduct_SupplierInput | null;
  sort: SortUpdateOneProduct_SupplierInput | null;
  skip: number | null;
}

export interface ProductSupplierUpdateManyMutationArgs {
  record: UpdateManyProduct_SupplierInput;
  filter: FilterUpdateManyProduct_SupplierInput | null;
  sort: SortUpdateManyProduct_SupplierInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductSupplierRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductSupplierRemoveOneMutationArgs {
  filter: FilterRemoveOneProduct_SupplierInput | null;
  sort: SortRemoveOneProduct_SupplierInput | null;
}

export interface ProductSupplierRemoveManyMutationArgs {
  filter: FilterRemoveManyProduct_SupplierInput;
  limit: number | null;
}

export interface ProductTransferCreateOneMutationArgs {
  record: CreateOneProduct_TransferInput;
}

export interface ProductTransferCreateManyMutationArgs {
  records: Array<CreateManyProduct_TransferInput>;
}

export interface ProductTransferUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProduct_TransferInput;
}

export interface ProductTransferUpdateOneMutationArgs {
  record: UpdateOneProduct_TransferInput;
  filter: FilterUpdateOneProduct_TransferInput | null;
  sort: SortUpdateOneProduct_TransferInput | null;
  skip: number | null;
}

export interface ProductTransferUpdateManyMutationArgs {
  record: UpdateManyProduct_TransferInput;
  filter: FilterUpdateManyProduct_TransferInput | null;
  sort: SortUpdateManyProduct_TransferInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductTransferRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductTransferRemoveOneMutationArgs {
  filter: FilterRemoveOneProduct_TransferInput | null;
  sort: SortRemoveOneProduct_TransferInput | null;
}

export interface ProductTransferRemoveManyMutationArgs {
  filter: FilterRemoveManyProduct_TransferInput;
  limit: number | null;
}

export interface ProductVariantCreateOneMutationArgs {
  record: CreateOneProduct_VariantInput;
}

export interface ProductVariantCreateManyMutationArgs {
  records: Array<CreateManyProduct_VariantInput>;
}

export interface ProductVariantUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProduct_VariantInput;
}

export interface ProductVariantUpdateOneMutationArgs {
  record: UpdateOneProduct_VariantInput;
  filter: FilterUpdateOneProduct_VariantInput | null;
  sort: SortUpdateOneProduct_VariantInput | null;
  skip: number | null;
}

export interface ProductVariantUpdateManyMutationArgs {
  record: UpdateManyProduct_VariantInput;
  filter: FilterUpdateManyProduct_VariantInput | null;
  sort: SortUpdateManyProduct_VariantInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductVariantRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductVariantRemoveOneMutationArgs {
  filter: FilterRemoveOneProduct_VariantInput | null;
  sort: SortRemoveOneProduct_VariantInput | null;
}

export interface ProductVariantRemoveManyMutationArgs {
  filter: FilterRemoveManyProduct_VariantInput;
  limit: number | null;
}

export interface ProductWarehouseCreateOneMutationArgs {
  record: CreateOneProduct_WarehouseInput;
}

export interface ProductWarehouseCreateManyMutationArgs {
  records: Array<CreateManyProduct_WarehouseInput>;
}

export interface ProductWarehouseUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProduct_WarehouseInput;
}

export interface ProductWarehouseUpdateOneMutationArgs {
  record: UpdateOneProduct_WarehouseInput;
  filter: FilterUpdateOneProduct_WarehouseInput | null;
  sort: SortUpdateOneProduct_WarehouseInput | null;
  skip: number | null;
}

export interface ProductWarehouseUpdateManyMutationArgs {
  record: UpdateManyProduct_WarehouseInput;
  filter: FilterUpdateManyProduct_WarehouseInput | null;
  sort: SortUpdateManyProduct_WarehouseInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductWarehouseRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductWarehouseRemoveOneMutationArgs {
  filter: FilterRemoveOneProduct_WarehouseInput | null;
  sort: SortRemoveOneProduct_WarehouseInput | null;
}

export interface ProductWarehouseRemoveManyMutationArgs {
  filter: FilterRemoveManyProduct_WarehouseInput;
  limit: number | null;
}

export interface ProductCreateOneMutationArgs {
  record: CreateOneProductInput;
}

export interface ProductCreateManyMutationArgs {
  records: Array<CreateManyProductInput>;
}

export interface ProductUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdProductInput;
}

export interface ProductUpdateOneMutationArgs {
  record: UpdateOneProductInput;
  filter: FilterUpdateOneProductInput | null;
  sort: SortUpdateOneProductInput | null;
  skip: number | null;
}

export interface ProductUpdateManyMutationArgs {
  record: UpdateManyProductInput;
  filter: FilterUpdateManyProductInput | null;
  sort: SortUpdateManyProductInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ProductRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ProductRemoveOneMutationArgs {
  filter: FilterRemoveOneProductInput | null;
  sort: SortRemoveOneProductInput | null;
}

export interface ProductRemoveManyMutationArgs {
  filter: FilterRemoveManyProductInput;
  limit: number | null;
}

export interface PurchaseCreateOneMutationArgs {
  record: CreateOnePurchaseInput;
}

export interface PurchaseCreateManyMutationArgs {
  records: Array<CreateManyPurchaseInput>;
}

export interface PurchaseUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdPurchaseInput;
}

export interface PurchaseUpdateOneMutationArgs {
  record: UpdateOnePurchaseInput;
  filter: FilterUpdateOnePurchaseInput | null;
  sort: SortUpdateOnePurchaseInput | null;
  skip: number | null;
}

export interface PurchaseUpdateManyMutationArgs {
  record: UpdateManyPurchaseInput;
  filter: FilterUpdateManyPurchaseInput | null;
  sort: SortUpdateManyPurchaseInput | null;
  skip: number | null;
  limit: number | null;
}

export interface PurchaseRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface PurchaseRemoveOneMutationArgs {
  filter: FilterRemoveOnePurchaseInput | null;
  sort: SortRemoveOnePurchaseInput | null;
}

export interface PurchaseRemoveManyMutationArgs {
  filter: FilterRemoveManyPurchaseInput;
  limit: number | null;
}

export interface ReturnCreateOneMutationArgs {
  record: CreateOneReturnInput;
}

export interface ReturnCreateManyMutationArgs {
  records: Array<CreateManyReturnInput>;
}

export interface ReturnUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdReturnInput;
}

export interface ReturnUpdateOneMutationArgs {
  record: UpdateOneReturnInput;
  filter: FilterUpdateOneReturnInput | null;
  sort: SortUpdateOneReturnInput | null;
  skip: number | null;
}

export interface ReturnUpdateManyMutationArgs {
  record: UpdateManyReturnInput;
  filter: FilterUpdateManyReturnInput | null;
  sort: SortUpdateManyReturnInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ReturnRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ReturnRemoveOneMutationArgs {
  filter: FilterRemoveOneReturnInput | null;
  sort: SortRemoveOneReturnInput | null;
}

export interface ReturnRemoveManyMutationArgs {
  filter: FilterRemoveManyReturnInput;
  limit: number | null;
}

export interface QuotationCreateOneMutationArgs {
  record: CreateOneQuotationInput;
}

export interface QuotationCreateManyMutationArgs {
  records: Array<CreateManyQuotationInput>;
}

export interface QuotationUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdQuotationInput;
}

export interface QuotationUpdateOneMutationArgs {
  record: UpdateOneQuotationInput;
  filter: FilterUpdateOneQuotationInput | null;
  sort: SortUpdateOneQuotationInput | null;
  skip: number | null;
}

export interface QuotationUpdateManyMutationArgs {
  record: UpdateManyQuotationInput;
  filter: FilterUpdateManyQuotationInput | null;
  sort: SortUpdateManyQuotationInput | null;
  skip: number | null;
  limit: number | null;
}

export interface QuotationRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface QuotationRemoveOneMutationArgs {
  filter: FilterRemoveOneQuotationInput | null;
  sort: SortRemoveOneQuotationInput | null;
}

export interface QuotationRemoveManyMutationArgs {
  filter: FilterRemoveManyQuotationInput;
  limit: number | null;
}

export interface RoleCreateOneMutationArgs {
  record: CreateOneRoleInput;
}

export interface RoleCreateManyMutationArgs {
  records: Array<CreateManyRoleInput>;
}

export interface RoleUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdRoleInput;
}

export interface RoleUpdateOneMutationArgs {
  record: UpdateOneRoleInput;
  filter: FilterUpdateOneRoleInput | null;
  sort: SortUpdateOneRoleInput | null;
  skip: number | null;
}

export interface RoleUpdateManyMutationArgs {
  record: UpdateManyRoleInput;
  filter: FilterUpdateManyRoleInput | null;
  sort: SortUpdateManyRoleInput | null;
  skip: number | null;
  limit: number | null;
}

export interface RoleRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface RoleRemoveOneMutationArgs {
  filter: FilterRemoveOneRoleInput | null;
  sort: SortRemoveOneRoleInput | null;
}

export interface RoleRemoveManyMutationArgs {
  filter: FilterRemoveManyRoleInput;
  limit: number | null;
}

export interface SupplierCreateOneMutationArgs {
  record: CreateOneSupplierInput;
}

export interface SupplierCreateManyMutationArgs {
  records: Array<CreateManySupplierInput>;
}

export interface SupplierUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdSupplierInput;
}

export interface SupplierUpdateOneMutationArgs {
  record: UpdateOneSupplierInput;
  filter: FilterUpdateOneSupplierInput | null;
  sort: SortUpdateOneSupplierInput | null;
  skip: number | null;
}

export interface SupplierUpdateManyMutationArgs {
  record: UpdateManySupplierInput;
  filter: FilterUpdateManySupplierInput | null;
  sort: SortUpdateManySupplierInput | null;
  skip: number | null;
  limit: number | null;
}

export interface SupplierRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface SupplierRemoveOneMutationArgs {
  filter: FilterRemoveOneSupplierInput | null;
  sort: SortRemoveOneSupplierInput | null;
}

export interface SupplierRemoveManyMutationArgs {
  filter: FilterRemoveManySupplierInput;
  limit: number | null;
}

export interface TaxCreateOneMutationArgs {
  record: CreateOneTaxInput;
}

export interface TaxCreateManyMutationArgs {
  records: Array<CreateManyTaxInput>;
}

export interface TaxUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdTaxInput;
}

export interface TaxUpdateOneMutationArgs {
  record: UpdateOneTaxInput;
  filter: FilterUpdateOneTaxInput | null;
  sort: SortUpdateOneTaxInput | null;
  skip: number | null;
}

export interface TaxUpdateManyMutationArgs {
  record: UpdateManyTaxInput;
  filter: FilterUpdateManyTaxInput | null;
  sort: SortUpdateManyTaxInput | null;
  skip: number | null;
  limit: number | null;
}

export interface TaxRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface TaxRemoveOneMutationArgs {
  filter: FilterRemoveOneTaxInput | null;
  sort: SortRemoveOneTaxInput | null;
}

export interface TaxRemoveManyMutationArgs {
  filter: FilterRemoveManyTaxInput;
  limit: number | null;
}

export interface TransferCreateOneMutationArgs {
  record: CreateOneTransferInput;
}

export interface TransferCreateManyMutationArgs {
  records: Array<CreateManyTransferInput>;
}

export interface TransferUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdTransferInput;
}

export interface TransferUpdateOneMutationArgs {
  record: UpdateOneTransferInput;
  filter: FilterUpdateOneTransferInput | null;
  sort: SortUpdateOneTransferInput | null;
  skip: number | null;
}

export interface TransferUpdateManyMutationArgs {
  record: UpdateManyTransferInput;
  filter: FilterUpdateManyTransferInput | null;
  sort: SortUpdateManyTransferInput | null;
  skip: number | null;
  limit: number | null;
}

export interface TransferRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface TransferRemoveOneMutationArgs {
  filter: FilterRemoveOneTransferInput | null;
  sort: SortRemoveOneTransferInput | null;
}

export interface TransferRemoveManyMutationArgs {
  filter: FilterRemoveManyTransferInput;
  limit: number | null;
}

export interface UnitCreateOneMutationArgs {
  record: CreateOneUnitInput;
}

export interface UnitCreateManyMutationArgs {
  records: Array<CreateManyUnitInput>;
}

export interface UnitUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdUnitInput;
}

export interface UnitUpdateOneMutationArgs {
  record: UpdateOneUnitInput;
  filter: FilterUpdateOneUnitInput | null;
  sort: SortUpdateOneUnitInput | null;
  skip: number | null;
}

export interface UnitUpdateManyMutationArgs {
  record: UpdateManyUnitInput;
  filter: FilterUpdateManyUnitInput | null;
  sort: SortUpdateManyUnitInput | null;
  skip: number | null;
  limit: number | null;
}

export interface UnitRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface UnitRemoveOneMutationArgs {
  filter: FilterRemoveOneUnitInput | null;
  sort: SortRemoveOneUnitInput | null;
}

export interface UnitRemoveManyMutationArgs {
  filter: FilterRemoveManyUnitInput;
  limit: number | null;
}

export interface UserCreateOneMutationArgs {
  record: CreateOneUserInput;
}

export interface UserCreateManyMutationArgs {
  records: Array<CreateManyUserInput>;
}

export interface UserUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdUserInput;
}

export interface UserUpdateOneMutationArgs {
  record: UpdateOneUserInput;
  filter: FilterUpdateOneUserInput | null;
  sort: SortUpdateOneUserInput | null;
  skip: number | null;
}

export interface UserUpdateManyMutationArgs {
  record: UpdateManyUserInput;
  filter: FilterUpdateManyUserInput | null;
  sort: SortUpdateManyUserInput | null;
  skip: number | null;
  limit: number | null;
}

export interface UserRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface UserRemoveOneMutationArgs {
  filter: FilterRemoveOneUserInput | null;
  sort: SortRemoveOneUserInput | null;
}

export interface UserRemoveManyMutationArgs {
  filter: FilterRemoveManyUserInput;
  limit: number | null;
}

export interface ValueCreateOneMutationArgs {
  record: CreateOneValueInput;
}

export interface ValueCreateManyMutationArgs {
  records: Array<CreateManyValueInput>;
}

export interface ValueUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdValueInput;
}

export interface ValueUpdateOneMutationArgs {
  record: UpdateOneValueInput;
  filter: FilterUpdateOneValueInput | null;
  sort: SortUpdateOneValueInput | null;
  skip: number | null;
}

export interface ValueUpdateManyMutationArgs {
  record: UpdateManyValueInput;
  filter: FilterUpdateManyValueInput | null;
  sort: SortUpdateManyValueInput | null;
  skip: number | null;
  limit: number | null;
}

export interface ValueRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface ValueRemoveOneMutationArgs {
  filter: FilterRemoveOneValueInput | null;
  sort: SortRemoveOneValueInput | null;
}

export interface ValueRemoveManyMutationArgs {
  filter: FilterRemoveManyValueInput;
  limit: number | null;
}

export interface WarehouseCreateOneMutationArgs {
  record: CreateOneWarehouseInput;
}

export interface WarehouseCreateManyMutationArgs {
  records: Array<CreateManyWarehouseInput>;
}

export interface WarehouseUpdateByIdMutationArgs {
  _id: MongoID;
  record: UpdateByIdWarehouseInput;
}

export interface WarehouseUpdateOneMutationArgs {
  record: UpdateOneWarehouseInput;
  filter: FilterUpdateOneWarehouseInput | null;
  sort: SortUpdateOneWarehouseInput | null;
  skip: number | null;
}

export interface WarehouseUpdateManyMutationArgs {
  record: UpdateManyWarehouseInput;
  filter: FilterUpdateManyWarehouseInput | null;
  sort: SortUpdateManyWarehouseInput | null;
  skip: number | null;
  limit: number | null;
}

export interface WarehouseRemoveByIdMutationArgs {
  _id: MongoID;
}

export interface WarehouseRemoveOneMutationArgs {
  filter: FilterRemoveOneWarehouseInput | null;
  sort: SortRemoveOneWarehouseInput | null;
}

export interface WarehouseRemoveManyMutationArgs {
  filter: FilterRemoveManyWarehouseInput;
  limit: number | null;
}

export interface CreateOneAccountInput {
  account_no: string;
  name: string;
  initial_balance: number;
  total_Balance: number;
  note: string | null;
  is_default: boolean;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneAccountPayload {
  recordId: MongoID | null;
  record: Account | null;
  error: ErrorInterface | null;
}

export interface ErrorInterface {
  message: string | null;
}

export interface CreateManyAccountInput {
  account_no: string;
  name: string;
  initial_balance: number;
  total_Balance: number;
  note: string | null;
  is_default: boolean;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyAccountPayload {
  recordIds: Array<MongoID>;
  records: Array<Account>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdAccountPayload {
  recordId: MongoID | null;
  record: Account | null;
  error: ErrorInterface | null;
}

export interface UpdateOneAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneAccountOperatorsInput | null;
  OR: Array<FilterUpdateOneAccountInput>;
  AND: Array<FilterUpdateOneAccountInput>;
}

export interface FilterUpdateOneAccountOperatorsInput {
  account_no: FilterUpdateOneAccountAccount_noOperatorsInput | null;
  name: FilterUpdateOneAccountNameOperatorsInput | null;
  note: FilterUpdateOneAccountNoteOperatorsInput | null;
  _id: FilterUpdateOneAccount_idOperatorsInput | null;
  createdAt: FilterUpdateOneAccountCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneAccountAccount_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAccountNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAccountNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAccount_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAccountCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneAccountInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ACCOUNT_NO_ASC"
  | "ACCOUNT_NO_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneAccountPayload {
  recordId: MongoID | null;
  record: Account | null;
  error: ErrorInterface | null;
}

export interface UpdateManyAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyAccountOperatorsInput | null;
  OR: Array<FilterUpdateManyAccountInput>;
  AND: Array<FilterUpdateManyAccountInput>;
}

export interface FilterUpdateManyAccountOperatorsInput {
  account_no: FilterUpdateManyAccountAccount_noOperatorsInput | null;
  name: FilterUpdateManyAccountNameOperatorsInput | null;
  note: FilterUpdateManyAccountNoteOperatorsInput | null;
  _id: FilterUpdateManyAccount_idOperatorsInput | null;
  createdAt: FilterUpdateManyAccountCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyAccountAccount_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAccountNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAccountNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAccount_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAccountCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyAccountInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ACCOUNT_NO_ASC"
  | "ACCOUNT_NO_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyAccountPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdAccountPayload {
  recordId: MongoID | null;
  record: Account | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneAccountOperatorsInput | null;
  OR: Array<FilterRemoveOneAccountInput>;
  AND: Array<FilterRemoveOneAccountInput>;
}

export interface FilterRemoveOneAccountOperatorsInput {
  account_no: FilterRemoveOneAccountAccount_noOperatorsInput | null;
  name: FilterRemoveOneAccountNameOperatorsInput | null;
  note: FilterRemoveOneAccountNoteOperatorsInput | null;
  _id: FilterRemoveOneAccount_idOperatorsInput | null;
  createdAt: FilterRemoveOneAccountCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneAccountAccount_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAccountNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAccountNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAccount_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAccountCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneAccountInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ACCOUNT_NO_ASC"
  | "ACCOUNT_NO_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneAccountPayload {
  recordId: MongoID | null;
  record: Account | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyAccountInput {
  account_no: string | null;
  name: string | null;
  initial_balance: number | null;
  total_Balance: number | null;
  note: string | null;
  is_default: boolean | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyAccountOperatorsInput | null;
  OR: Array<FilterRemoveManyAccountInput>;
  AND: Array<FilterRemoveManyAccountInput>;
}

export interface FilterRemoveManyAccountOperatorsInput {
  account_no: FilterRemoveManyAccountAccount_noOperatorsInput | null;
  name: FilterRemoveManyAccountNameOperatorsInput | null;
  note: FilterRemoveManyAccountNoteOperatorsInput | null;
  _id: FilterRemoveManyAccount_idOperatorsInput | null;
  createdAt: FilterRemoveManyAccountCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyAccountAccount_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAccountNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAccountNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAccount_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAccountCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyAccountPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneAdjustmentInput {
  reference_no: string;
  item: number;
  total_qty: number;
  total_discount: number;
  warehouse: MongoID;
  product_adjustments: Array<MongoID>;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneAdjustmentPayload {
  recordId: MongoID | null;
  record: Adjustment | null;
  error: ErrorInterface | null;
}

export interface CreateManyAdjustmentInput {
  reference_no: string;
  item: number;
  total_qty: number;
  total_discount: number;
  warehouse: MongoID;
  product_adjustments: Array<MongoID>;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyAdjustmentPayload {
  recordIds: Array<MongoID>;
  records: Array<Adjustment>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdAdjustmentPayload {
  recordId: MongoID | null;
  record: Adjustment | null;
  error: ErrorInterface | null;
}

export interface UpdateOneAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneAdjustmentOperatorsInput | null;
  OR: Array<FilterUpdateOneAdjustmentInput>;
  AND: Array<FilterUpdateOneAdjustmentInput>;
}

export interface FilterUpdateOneAdjustmentOperatorsInput {
  reference_no: FilterUpdateOneAdjustmentReference_noOperatorsInput | null;
  document: FilterUpdateOneAdjustmentDocumentOperatorsInput | null;
  note: FilterUpdateOneAdjustmentNoteOperatorsInput | null;
  _id: FilterUpdateOneAdjustment_idOperatorsInput | null;
  createdAt: FilterUpdateOneAdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneAdjustmentReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAdjustmentDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAdjustmentNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAdjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneAdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneAdjustmentPayload {
  recordId: MongoID | null;
  record: Adjustment | null;
  error: ErrorInterface | null;
}

export interface UpdateManyAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyAdjustmentOperatorsInput | null;
  OR: Array<FilterUpdateManyAdjustmentInput>;
  AND: Array<FilterUpdateManyAdjustmentInput>;
}

export interface FilterUpdateManyAdjustmentOperatorsInput {
  reference_no: FilterUpdateManyAdjustmentReference_noOperatorsInput | null;
  document: FilterUpdateManyAdjustmentDocumentOperatorsInput | null;
  note: FilterUpdateManyAdjustmentNoteOperatorsInput | null;
  _id: FilterUpdateManyAdjustment_idOperatorsInput | null;
  createdAt: FilterUpdateManyAdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyAdjustmentReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAdjustmentDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAdjustmentNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAdjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyAdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyAdjustmentPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdAdjustmentPayload {
  recordId: MongoID | null;
  record: Adjustment | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneAdjustmentOperatorsInput | null;
  OR: Array<FilterRemoveOneAdjustmentInput>;
  AND: Array<FilterRemoveOneAdjustmentInput>;
}

export interface FilterRemoveOneAdjustmentOperatorsInput {
  reference_no: FilterRemoveOneAdjustmentReference_noOperatorsInput | null;
  document: FilterRemoveOneAdjustmentDocumentOperatorsInput | null;
  note: FilterRemoveOneAdjustmentNoteOperatorsInput | null;
  _id: FilterRemoveOneAdjustment_idOperatorsInput | null;
  createdAt: FilterRemoveOneAdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneAdjustmentReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAdjustmentDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAdjustmentNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAdjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneAdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneAdjustmentPayload {
  recordId: MongoID | null;
  record: Adjustment | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyAdjustmentInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  warehouse: MongoID | null;
  product_adjustments: Array<MongoID> | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyAdjustmentOperatorsInput | null;
  OR: Array<FilterRemoveManyAdjustmentInput>;
  AND: Array<FilterRemoveManyAdjustmentInput>;
}

export interface FilterRemoveManyAdjustmentOperatorsInput {
  reference_no: FilterRemoveManyAdjustmentReference_noOperatorsInput | null;
  document: FilterRemoveManyAdjustmentDocumentOperatorsInput | null;
  note: FilterRemoveManyAdjustmentNoteOperatorsInput | null;
  _id: FilterRemoveManyAdjustment_idOperatorsInput | null;
  createdAt: FilterRemoveManyAdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyAdjustmentReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAdjustmentDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAdjustmentNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAdjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyAdjustmentPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneAttributeInput {
  name: string;
  values: Array<MongoID>;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneAttributePayload {
  recordId: MongoID | null;
  record: Attribute | null;
  error: ErrorInterface | null;
}

export interface CreateManyAttributeInput {
  name: string;
  values: Array<MongoID>;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyAttributePayload {
  recordIds: Array<MongoID>;
  records: Array<Attribute>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdAttributePayload {
  recordId: MongoID | null;
  record: Attribute | null;
  error: ErrorInterface | null;
}

export interface UpdateOneAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneAttributeOperatorsInput | null;
  OR: Array<FilterUpdateOneAttributeInput>;
  AND: Array<FilterUpdateOneAttributeInput>;
}

export interface FilterUpdateOneAttributeOperatorsInput {
  name: FilterUpdateOneAttributeNameOperatorsInput | null;
  _id: FilterUpdateOneAttribute_idOperatorsInput | null;
  createdAt: FilterUpdateOneAttributeCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneAttributeNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAttribute_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneAttributeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneAttributeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneAttributePayload {
  recordId: MongoID | null;
  record: Attribute | null;
  error: ErrorInterface | null;
}

export interface UpdateManyAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyAttributeOperatorsInput | null;
  OR: Array<FilterUpdateManyAttributeInput>;
  AND: Array<FilterUpdateManyAttributeInput>;
}

export interface FilterUpdateManyAttributeOperatorsInput {
  name: FilterUpdateManyAttributeNameOperatorsInput | null;
  _id: FilterUpdateManyAttribute_idOperatorsInput | null;
  createdAt: FilterUpdateManyAttributeCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyAttributeNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAttribute_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyAttributeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyAttributeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyAttributePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdAttributePayload {
  recordId: MongoID | null;
  record: Attribute | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneAttributeOperatorsInput | null;
  OR: Array<FilterRemoveOneAttributeInput>;
  AND: Array<FilterRemoveOneAttributeInput>;
}

export interface FilterRemoveOneAttributeOperatorsInput {
  name: FilterRemoveOneAttributeNameOperatorsInput | null;
  _id: FilterRemoveOneAttribute_idOperatorsInput | null;
  createdAt: FilterRemoveOneAttributeCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneAttributeNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAttribute_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneAttributeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneAttributeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneAttributePayload {
  recordId: MongoID | null;
  record: Attribute | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyAttributeInput {
  name: string | null;
  values: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyAttributeOperatorsInput | null;
  OR: Array<FilterRemoveManyAttributeInput>;
  AND: Array<FilterRemoveManyAttributeInput>;
}

export interface FilterRemoveManyAttributeOperatorsInput {
  name: FilterRemoveManyAttributeNameOperatorsInput | null;
  _id: FilterRemoveManyAttribute_idOperatorsInput | null;
  createdAt: FilterRemoveManyAttributeCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyAttributeNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAttribute_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyAttributeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyAttributePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneBrandInput {
  name: string;
  image: string | null;
  products: Array<MongoID>;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneBrandPayload {
  recordId: MongoID | null;
  record: Brand | null;
  error: ErrorInterface | null;
}

export interface CreateManyBrandInput {
  name: string;
  image: string | null;
  products: Array<MongoID>;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyBrandPayload {
  recordIds: Array<MongoID>;
  records: Array<Brand>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdBrandPayload {
  recordId: MongoID | null;
  record: Brand | null;
  error: ErrorInterface | null;
}

export interface UpdateOneBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneBrandOperatorsInput | null;
  OR: Array<FilterUpdateOneBrandInput>;
  AND: Array<FilterUpdateOneBrandInput>;
}

export interface FilterUpdateOneBrandOperatorsInput {
  name: FilterUpdateOneBrandNameOperatorsInput | null;
  image: FilterUpdateOneBrandImageOperatorsInput | null;
  _id: FilterUpdateOneBrand_idOperatorsInput | null;
  createdAt: FilterUpdateOneBrandCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneBrandNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneBrandImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneBrand_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneBrandCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneBrandInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneBrandPayload {
  recordId: MongoID | null;
  record: Brand | null;
  error: ErrorInterface | null;
}

export interface UpdateManyBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyBrandOperatorsInput | null;
  OR: Array<FilterUpdateManyBrandInput>;
  AND: Array<FilterUpdateManyBrandInput>;
}

export interface FilterUpdateManyBrandOperatorsInput {
  name: FilterUpdateManyBrandNameOperatorsInput | null;
  image: FilterUpdateManyBrandImageOperatorsInput | null;
  _id: FilterUpdateManyBrand_idOperatorsInput | null;
  createdAt: FilterUpdateManyBrandCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyBrandNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyBrandImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyBrand_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyBrandCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyBrandInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyBrandPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdBrandPayload {
  recordId: MongoID | null;
  record: Brand | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneBrandOperatorsInput | null;
  OR: Array<FilterRemoveOneBrandInput>;
  AND: Array<FilterRemoveOneBrandInput>;
}

export interface FilterRemoveOneBrandOperatorsInput {
  name: FilterRemoveOneBrandNameOperatorsInput | null;
  image: FilterRemoveOneBrandImageOperatorsInput | null;
  _id: FilterRemoveOneBrand_idOperatorsInput | null;
  createdAt: FilterRemoveOneBrandCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneBrandNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneBrandImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneBrand_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneBrandCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneBrandInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneBrandPayload {
  recordId: MongoID | null;
  record: Brand | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyBrandInput {
  name: string | null;
  image: string | null;
  products: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyBrandOperatorsInput | null;
  OR: Array<FilterRemoveManyBrandInput>;
  AND: Array<FilterRemoveManyBrandInput>;
}

export interface FilterRemoveManyBrandOperatorsInput {
  name: FilterRemoveManyBrandNameOperatorsInput | null;
  image: FilterRemoveManyBrandImageOperatorsInput | null;
  _id: FilterRemoveManyBrand_idOperatorsInput | null;
  createdAt: FilterRemoveManyBrandCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyBrandNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyBrandImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyBrand_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyBrandCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyBrandPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneCategoryInput {
  name: string;
  image: string | null;
  variants: Array<MongoID>;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneCategoryPayload {
  recordId: MongoID | null;
  record: Category | null;
  error: ErrorInterface | null;
}

export interface CreateManyCategoryInput {
  name: string;
  image: string | null;
  variants: Array<MongoID>;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyCategoryPayload {
  recordIds: Array<MongoID>;
  records: Array<Category>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdCategoryPayload {
  recordId: MongoID | null;
  record: Category | null;
  error: ErrorInterface | null;
}

export interface UpdateOneCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneCategoryOperatorsInput | null;
  OR: Array<FilterUpdateOneCategoryInput>;
  AND: Array<FilterUpdateOneCategoryInput>;
}

export interface FilterUpdateOneCategoryOperatorsInput {
  name: FilterUpdateOneCategoryNameOperatorsInput | null;
  image: FilterUpdateOneCategoryImageOperatorsInput | null;
  _id: FilterUpdateOneCategory_idOperatorsInput | null;
  createdAt: FilterUpdateOneCategoryCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneCategoryNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCategoryImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCategory_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCategoryCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneCategoryInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneCategoryPayload {
  recordId: MongoID | null;
  record: Category | null;
  error: ErrorInterface | null;
}

export interface UpdateManyCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyCategoryOperatorsInput | null;
  OR: Array<FilterUpdateManyCategoryInput>;
  AND: Array<FilterUpdateManyCategoryInput>;
}

export interface FilterUpdateManyCategoryOperatorsInput {
  name: FilterUpdateManyCategoryNameOperatorsInput | null;
  image: FilterUpdateManyCategoryImageOperatorsInput | null;
  _id: FilterUpdateManyCategory_idOperatorsInput | null;
  createdAt: FilterUpdateManyCategoryCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyCategoryNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCategoryImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCategory_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCategoryCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyCategoryInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyCategoryPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdCategoryPayload {
  recordId: MongoID | null;
  record: Category | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneCategoryOperatorsInput | null;
  OR: Array<FilterRemoveOneCategoryInput>;
  AND: Array<FilterRemoveOneCategoryInput>;
}

export interface FilterRemoveOneCategoryOperatorsInput {
  name: FilterRemoveOneCategoryNameOperatorsInput | null;
  image: FilterRemoveOneCategoryImageOperatorsInput | null;
  _id: FilterRemoveOneCategory_idOperatorsInput | null;
  createdAt: FilterRemoveOneCategoryCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneCategoryNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCategoryImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCategory_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCategoryCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneCategoryInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneCategoryPayload {
  recordId: MongoID | null;
  record: Category | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyCategoryInput {
  name: string | null;
  image: string | null;
  variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyCategoryOperatorsInput | null;
  OR: Array<FilterRemoveManyCategoryInput>;
  AND: Array<FilterRemoveManyCategoryInput>;
}

export interface FilterRemoveManyCategoryOperatorsInput {
  name: FilterRemoveManyCategoryNameOperatorsInput | null;
  image: FilterRemoveManyCategoryImageOperatorsInput | null;
  _id: FilterRemoveManyCategory_idOperatorsInput | null;
  createdAt: FilterRemoveManyCategoryCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyCategoryNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCategoryImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCategory_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCategoryCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyCategoryPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneCouponInput {
  code: string;
  coupon_type: string;
  amount: number;
  min_amount: number;
  user: MongoID | null;
  qty: number;
  used: boolean;
  expired_date: Date;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneCouponPayload {
  recordId: MongoID | null;
  record: Coupon | null;
  error: ErrorInterface | null;
}

export interface CreateManyCouponInput {
  code: string;
  coupon_type: string;
  amount: number;
  min_amount: number;
  user: MongoID | null;
  qty: number;
  used: boolean;
  expired_date: Date;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyCouponPayload {
  recordIds: Array<MongoID>;
  records: Array<Coupon>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdCouponPayload {
  recordId: MongoID | null;
  record: Coupon | null;
  error: ErrorInterface | null;
}

export interface UpdateOneCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneCouponOperatorsInput | null;
  OR: Array<FilterUpdateOneCouponInput>;
  AND: Array<FilterUpdateOneCouponInput>;
}

export interface FilterUpdateOneCouponOperatorsInput {
  code: FilterUpdateOneCouponCodeOperatorsInput | null;
  _id: FilterUpdateOneCoupon_idOperatorsInput | null;
  createdAt: FilterUpdateOneCouponCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneCouponCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCoupon_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCouponCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneCouponInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneCouponPayload {
  recordId: MongoID | null;
  record: Coupon | null;
  error: ErrorInterface | null;
}

export interface UpdateManyCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyCouponOperatorsInput | null;
  OR: Array<FilterUpdateManyCouponInput>;
  AND: Array<FilterUpdateManyCouponInput>;
}

export interface FilterUpdateManyCouponOperatorsInput {
  code: FilterUpdateManyCouponCodeOperatorsInput | null;
  _id: FilterUpdateManyCoupon_idOperatorsInput | null;
  createdAt: FilterUpdateManyCouponCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyCouponCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCoupon_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCouponCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyCouponInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyCouponPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdCouponPayload {
  recordId: MongoID | null;
  record: Coupon | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneCouponOperatorsInput | null;
  OR: Array<FilterRemoveOneCouponInput>;
  AND: Array<FilterRemoveOneCouponInput>;
}

export interface FilterRemoveOneCouponOperatorsInput {
  code: FilterRemoveOneCouponCodeOperatorsInput | null;
  _id: FilterRemoveOneCoupon_idOperatorsInput | null;
  createdAt: FilterRemoveOneCouponCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneCouponCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCoupon_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCouponCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneCouponInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneCouponPayload {
  recordId: MongoID | null;
  record: Coupon | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyCouponInput {
  code: string | null;
  coupon_type: string | null;
  amount: number | null;
  min_amount: number | null;
  user: MongoID | null;
  qty: number | null;
  used: boolean | null;
  expired_date: Date | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyCouponOperatorsInput | null;
  OR: Array<FilterRemoveManyCouponInput>;
  AND: Array<FilterRemoveManyCouponInput>;
}

export interface FilterRemoveManyCouponOperatorsInput {
  code: FilterRemoveManyCouponCodeOperatorsInput | null;
  _id: FilterRemoveManyCoupon_idOperatorsInput | null;
  createdAt: FilterRemoveManyCouponCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyCouponCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCoupon_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCouponCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyCouponPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneCustomerInput {
  customer_group: MongoID;
  company_name: string;
  name: string;
  image: string;
  email: string;
  phone_number: number;
  gender: string;
  user: MongoID | null;
  address: string;
  city: string;
  country: string;
  tax_no: string | null;
  deposit: number;
  expense: number;
  is_active: boolean;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneCustomerPayload {
  recordId: MongoID | null;
  record: Customer | null;
  error: ErrorInterface | null;
}

export interface CreateManyCustomerInput {
  customer_group: MongoID;
  company_name: string;
  name: string;
  image: string;
  email: string;
  phone_number: number;
  gender: string;
  user: MongoID | null;
  address: string;
  city: string;
  country: string;
  tax_no: string | null;
  deposit: number;
  expense: number;
  is_active: boolean;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyCustomerPayload {
  recordIds: Array<MongoID>;
  records: Array<Customer>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdCustomerPayload {
  recordId: MongoID | null;
  record: Customer | null;
  error: ErrorInterface | null;
}

export interface UpdateOneCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneCustomerOperatorsInput | null;
  OR: Array<FilterUpdateOneCustomerInput>;
  AND: Array<FilterUpdateOneCustomerInput>;
}

export interface FilterUpdateOneCustomerOperatorsInput {
  email: FilterUpdateOneCustomerEmailOperatorsInput | null;
  phone_number: FilterUpdateOneCustomerPhone_numberOperatorsInput | null;
  tax_no: FilterUpdateOneCustomerTax_noOperatorsInput | null;
  _id: FilterUpdateOneCustomer_idOperatorsInput | null;
  createdAt: FilterUpdateOneCustomerCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneCustomerEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCustomerPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCustomerTax_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCustomer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCustomerCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneCustomerInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "TAX_NO_ASC"
  | "TAX_NO_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneCustomerPayload {
  recordId: MongoID | null;
  record: Customer | null;
  error: ErrorInterface | null;
}

export interface UpdateManyCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyCustomerOperatorsInput | null;
  OR: Array<FilterUpdateManyCustomerInput>;
  AND: Array<FilterUpdateManyCustomerInput>;
}

export interface FilterUpdateManyCustomerOperatorsInput {
  email: FilterUpdateManyCustomerEmailOperatorsInput | null;
  phone_number: FilterUpdateManyCustomerPhone_numberOperatorsInput | null;
  tax_no: FilterUpdateManyCustomerTax_noOperatorsInput | null;
  _id: FilterUpdateManyCustomer_idOperatorsInput | null;
  createdAt: FilterUpdateManyCustomerCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyCustomerEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCustomerPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCustomerTax_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCustomer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCustomerCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyCustomerInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "TAX_NO_ASC"
  | "TAX_NO_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyCustomerPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdCustomerPayload {
  recordId: MongoID | null;
  record: Customer | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneCustomerOperatorsInput | null;
  OR: Array<FilterRemoveOneCustomerInput>;
  AND: Array<FilterRemoveOneCustomerInput>;
}

export interface FilterRemoveOneCustomerOperatorsInput {
  email: FilterRemoveOneCustomerEmailOperatorsInput | null;
  phone_number: FilterRemoveOneCustomerPhone_numberOperatorsInput | null;
  tax_no: FilterRemoveOneCustomerTax_noOperatorsInput | null;
  _id: FilterRemoveOneCustomer_idOperatorsInput | null;
  createdAt: FilterRemoveOneCustomerCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneCustomerEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCustomerPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCustomerTax_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCustomer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCustomerCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneCustomerInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "TAX_NO_ASC"
  | "TAX_NO_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneCustomerPayload {
  recordId: MongoID | null;
  record: Customer | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyCustomerInput {
  customer_group: MongoID | null;
  company_name: string | null;
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  address: string | null;
  city: string | null;
  country: string | null;
  tax_no: string | null;
  deposit: number | null;
  expense: number | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyCustomerOperatorsInput | null;
  OR: Array<FilterRemoveManyCustomerInput>;
  AND: Array<FilterRemoveManyCustomerInput>;
}

export interface FilterRemoveManyCustomerOperatorsInput {
  email: FilterRemoveManyCustomerEmailOperatorsInput | null;
  phone_number: FilterRemoveManyCustomerPhone_numberOperatorsInput | null;
  tax_no: FilterRemoveManyCustomerTax_noOperatorsInput | null;
  _id: FilterRemoveManyCustomer_idOperatorsInput | null;
  createdAt: FilterRemoveManyCustomerCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyCustomerEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCustomerPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCustomerTax_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCustomer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCustomerCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyCustomerPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneCustomer_GroupInput {
  name: string;
  percentage: number;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneCustomer_GroupPayload {
  recordId: MongoID | null;
  record: Customer_Group | null;
  error: ErrorInterface | null;
}

export interface CreateManyCustomer_GroupInput {
  name: string;
  percentage: number;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyCustomer_GroupPayload {
  recordIds: Array<MongoID>;
  records: Array<Customer_Group>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdCustomer_GroupPayload {
  recordId: MongoID | null;
  record: Customer_Group | null;
  error: ErrorInterface | null;
}

export interface UpdateOneCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneCustomer_GroupOperatorsInput | null;
  OR: Array<FilterUpdateOneCustomer_GroupInput>;
  AND: Array<FilterUpdateOneCustomer_GroupInput>;
}

export interface FilterUpdateOneCustomer_GroupOperatorsInput {
  name: FilterUpdateOneCustomer_GroupNameOperatorsInput | null;
  _id: FilterUpdateOneCustomer_Group_idOperatorsInput | null;
  createdAt: FilterUpdateOneCustomer_GroupCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneCustomer_GroupNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCustomer_Group_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneCustomer_GroupCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneCustomer_GroupInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneCustomer_GroupPayload {
  recordId: MongoID | null;
  record: Customer_Group | null;
  error: ErrorInterface | null;
}

export interface UpdateManyCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyCustomer_GroupOperatorsInput | null;
  OR: Array<FilterUpdateManyCustomer_GroupInput>;
  AND: Array<FilterUpdateManyCustomer_GroupInput>;
}

export interface FilterUpdateManyCustomer_GroupOperatorsInput {
  name: FilterUpdateManyCustomer_GroupNameOperatorsInput | null;
  _id: FilterUpdateManyCustomer_Group_idOperatorsInput | null;
  createdAt: FilterUpdateManyCustomer_GroupCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyCustomer_GroupNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCustomer_Group_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyCustomer_GroupCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyCustomer_GroupInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyCustomer_GroupPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdCustomer_GroupPayload {
  recordId: MongoID | null;
  record: Customer_Group | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneCustomer_GroupOperatorsInput | null;
  OR: Array<FilterRemoveOneCustomer_GroupInput>;
  AND: Array<FilterRemoveOneCustomer_GroupInput>;
}

export interface FilterRemoveOneCustomer_GroupOperatorsInput {
  name: FilterRemoveOneCustomer_GroupNameOperatorsInput | null;
  _id: FilterRemoveOneCustomer_Group_idOperatorsInput | null;
  createdAt: FilterRemoveOneCustomer_GroupCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneCustomer_GroupNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCustomer_Group_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneCustomer_GroupCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneCustomer_GroupInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneCustomer_GroupPayload {
  recordId: MongoID | null;
  record: Customer_Group | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyCustomer_GroupInput {
  name: string | null;
  percentage: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyCustomer_GroupOperatorsInput | null;
  OR: Array<FilterRemoveManyCustomer_GroupInput>;
  AND: Array<FilterRemoveManyCustomer_GroupInput>;
}

export interface FilterRemoveManyCustomer_GroupOperatorsInput {
  name: FilterRemoveManyCustomer_GroupNameOperatorsInput | null;
  _id: FilterRemoveManyCustomer_Group_idOperatorsInput | null;
  createdAt: FilterRemoveManyCustomer_GroupCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyCustomer_GroupNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCustomer_Group_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyCustomer_GroupCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyCustomer_GroupPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneDepartmentInput {
  name: string;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneDepartmentPayload {
  recordId: MongoID | null;
  record: Department | null;
  error: ErrorInterface | null;
}

export interface CreateManyDepartmentInput {
  name: string;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyDepartmentPayload {
  recordIds: Array<MongoID>;
  records: Array<Department>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdDepartmentPayload {
  recordId: MongoID | null;
  record: Department | null;
  error: ErrorInterface | null;
}

export interface UpdateOneDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneDepartmentOperatorsInput | null;
  OR: Array<FilterUpdateOneDepartmentInput>;
  AND: Array<FilterUpdateOneDepartmentInput>;
}

export interface FilterUpdateOneDepartmentOperatorsInput {
  name: FilterUpdateOneDepartmentNameOperatorsInput | null;
  _id: FilterUpdateOneDepartment_idOperatorsInput | null;
  createdAt: FilterUpdateOneDepartmentCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneDepartmentNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneDepartment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneDepartmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneDepartmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneDepartmentPayload {
  recordId: MongoID | null;
  record: Department | null;
  error: ErrorInterface | null;
}

export interface UpdateManyDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyDepartmentOperatorsInput | null;
  OR: Array<FilterUpdateManyDepartmentInput>;
  AND: Array<FilterUpdateManyDepartmentInput>;
}

export interface FilterUpdateManyDepartmentOperatorsInput {
  name: FilterUpdateManyDepartmentNameOperatorsInput | null;
  _id: FilterUpdateManyDepartment_idOperatorsInput | null;
  createdAt: FilterUpdateManyDepartmentCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyDepartmentNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyDepartment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyDepartmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyDepartmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyDepartmentPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdDepartmentPayload {
  recordId: MongoID | null;
  record: Department | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneDepartmentOperatorsInput | null;
  OR: Array<FilterRemoveOneDepartmentInput>;
  AND: Array<FilterRemoveOneDepartmentInput>;
}

export interface FilterRemoveOneDepartmentOperatorsInput {
  name: FilterRemoveOneDepartmentNameOperatorsInput | null;
  _id: FilterRemoveOneDepartment_idOperatorsInput | null;
  createdAt: FilterRemoveOneDepartmentCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneDepartmentNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneDepartment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneDepartmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneDepartmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneDepartmentPayload {
  recordId: MongoID | null;
  record: Department | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyDepartmentInput {
  name: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyDepartmentOperatorsInput | null;
  OR: Array<FilterRemoveManyDepartmentInput>;
  AND: Array<FilterRemoveManyDepartmentInput>;
}

export interface FilterRemoveManyDepartmentOperatorsInput {
  name: FilterRemoveManyDepartmentNameOperatorsInput | null;
  _id: FilterRemoveManyDepartment_idOperatorsInput | null;
  createdAt: FilterRemoveManyDepartmentCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyDepartmentNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyDepartment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyDepartmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyDepartmentPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneEmployeeInput {
  name: string;
  image: string;
  email: string;
  phone_number: number;
  gender: string;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID>;
  address: string;
  city: string;
  country: string;
  is_active: boolean;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneEmployeePayload {
  recordId: MongoID | null;
  record: Employee | null;
  error: ErrorInterface | null;
}

export interface CreateManyEmployeeInput {
  name: string;
  image: string;
  email: string;
  phone_number: number;
  gender: string;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID>;
  address: string;
  city: string;
  country: string;
  is_active: boolean;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyEmployeePayload {
  recordIds: Array<MongoID>;
  records: Array<Employee>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdEmployeePayload {
  recordId: MongoID | null;
  record: Employee | null;
  error: ErrorInterface | null;
}

export interface UpdateOneEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneEmployeeOperatorsInput | null;
  OR: Array<FilterUpdateOneEmployeeInput>;
  AND: Array<FilterUpdateOneEmployeeInput>;
}

export interface FilterUpdateOneEmployeeOperatorsInput {
  email: FilterUpdateOneEmployeeEmailOperatorsInput | null;
  phone_number: FilterUpdateOneEmployeePhone_numberOperatorsInput | null;
  _id: FilterUpdateOneEmployee_idOperatorsInput | null;
  createdAt: FilterUpdateOneEmployeeCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneEmployeeEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneEmployeePhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneEmployee_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneEmployeeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneEmployeeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneEmployeePayload {
  recordId: MongoID | null;
  record: Employee | null;
  error: ErrorInterface | null;
}

export interface UpdateManyEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyEmployeeOperatorsInput | null;
  OR: Array<FilterUpdateManyEmployeeInput>;
  AND: Array<FilterUpdateManyEmployeeInput>;
}

export interface FilterUpdateManyEmployeeOperatorsInput {
  email: FilterUpdateManyEmployeeEmailOperatorsInput | null;
  phone_number: FilterUpdateManyEmployeePhone_numberOperatorsInput | null;
  _id: FilterUpdateManyEmployee_idOperatorsInput | null;
  createdAt: FilterUpdateManyEmployeeCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyEmployeeEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyEmployeePhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyEmployee_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyEmployeeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyEmployeeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyEmployeePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdEmployeePayload {
  recordId: MongoID | null;
  record: Employee | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneEmployeeOperatorsInput | null;
  OR: Array<FilterRemoveOneEmployeeInput>;
  AND: Array<FilterRemoveOneEmployeeInput>;
}

export interface FilterRemoveOneEmployeeOperatorsInput {
  email: FilterRemoveOneEmployeeEmailOperatorsInput | null;
  phone_number: FilterRemoveOneEmployeePhone_numberOperatorsInput | null;
  _id: FilterRemoveOneEmployee_idOperatorsInput | null;
  createdAt: FilterRemoveOneEmployeeCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneEmployeeEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneEmployeePhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneEmployee_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneEmployeeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneEmployeeInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneEmployeePayload {
  recordId: MongoID | null;
  record: Employee | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyEmployeeInput {
  name: string | null;
  image: string | null;
  email: string | null;
  phone_number: number | null;
  gender: string | null;
  user: MongoID | null;
  department: MongoID | null;
  payrolls: Array<MongoID> | null;
  address: string | null;
  city: string | null;
  country: string | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyEmployeeOperatorsInput | null;
  OR: Array<FilterRemoveManyEmployeeInput>;
  AND: Array<FilterRemoveManyEmployeeInput>;
}

export interface FilterRemoveManyEmployeeOperatorsInput {
  email: FilterRemoveManyEmployeeEmailOperatorsInput | null;
  phone_number: FilterRemoveManyEmployeePhone_numberOperatorsInput | null;
  _id: FilterRemoveManyEmployee_idOperatorsInput | null;
  createdAt: FilterRemoveManyEmployeeCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyEmployeeEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyEmployeePhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyEmployee_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyEmployeeCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyEmployeePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProduct_AdjustmentInput {
  adjustment: MongoID;
  product_variant: MongoID;
  qty: number;
  action: string;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProduct_AdjustmentPayload {
  recordId: MongoID | null;
  record: Product_Adjustment | null;
  error: ErrorInterface | null;
}

export interface CreateManyProduct_AdjustmentInput {
  adjustment: MongoID;
  product_variant: MongoID;
  qty: number;
  action: string;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProduct_AdjustmentPayload {
  recordIds: Array<MongoID>;
  records: Array<Product_Adjustment>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProduct_AdjustmentPayload {
  recordId: MongoID | null;
  record: Product_Adjustment | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProduct_AdjustmentOperatorsInput | null;
  OR: Array<FilterUpdateOneProduct_AdjustmentInput>;
  AND: Array<FilterUpdateOneProduct_AdjustmentInput>;
}

export interface FilterUpdateOneProduct_AdjustmentOperatorsInput {
  adjustment: FilterUpdateOneProduct_AdjustmentAdjustmentOperatorsInput | null;
  _id: FilterUpdateOneProduct_Adjustment_idOperatorsInput | null;
  createdAt: FilterUpdateOneProduct_AdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProduct_AdjustmentAdjustmentOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_Adjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_AdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProduct_AdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ADJUSTMENT_ASC"
  | "ADJUSTMENT_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProduct_AdjustmentPayload {
  recordId: MongoID | null;
  record: Product_Adjustment | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProduct_AdjustmentOperatorsInput | null;
  OR: Array<FilterUpdateManyProduct_AdjustmentInput>;
  AND: Array<FilterUpdateManyProduct_AdjustmentInput>;
}

export interface FilterUpdateManyProduct_AdjustmentOperatorsInput {
  adjustment: FilterUpdateManyProduct_AdjustmentAdjustmentOperatorsInput | null;
  _id: FilterUpdateManyProduct_Adjustment_idOperatorsInput | null;
  createdAt: FilterUpdateManyProduct_AdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProduct_AdjustmentAdjustmentOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_Adjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_AdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProduct_AdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ADJUSTMENT_ASC"
  | "ADJUSTMENT_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProduct_AdjustmentPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProduct_AdjustmentPayload {
  recordId: MongoID | null;
  record: Product_Adjustment | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProduct_AdjustmentOperatorsInput | null;
  OR: Array<FilterRemoveOneProduct_AdjustmentInput>;
  AND: Array<FilterRemoveOneProduct_AdjustmentInput>;
}

export interface FilterRemoveOneProduct_AdjustmentOperatorsInput {
  adjustment: FilterRemoveOneProduct_AdjustmentAdjustmentOperatorsInput | null;
  _id: FilterRemoveOneProduct_Adjustment_idOperatorsInput | null;
  createdAt: FilterRemoveOneProduct_AdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProduct_AdjustmentAdjustmentOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_Adjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_AdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProduct_AdjustmentInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ADJUSTMENT_ASC"
  | "ADJUSTMENT_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProduct_AdjustmentPayload {
  recordId: MongoID | null;
  record: Product_Adjustment | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProduct_AdjustmentInput {
  adjustment: MongoID | null;
  product_variant: MongoID | null;
  qty: number | null;
  action: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProduct_AdjustmentOperatorsInput | null;
  OR: Array<FilterRemoveManyProduct_AdjustmentInput>;
  AND: Array<FilterRemoveManyProduct_AdjustmentInput>;
}

export interface FilterRemoveManyProduct_AdjustmentOperatorsInput {
  adjustment: FilterRemoveManyProduct_AdjustmentAdjustmentOperatorsInput | null;
  _id: FilterRemoveManyProduct_Adjustment_idOperatorsInput | null;
  createdAt: FilterRemoveManyProduct_AdjustmentCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProduct_AdjustmentAdjustmentOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_Adjustment_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_AdjustmentCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProduct_AdjustmentPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProduct_PurchaseInput {
  purchase: MongoID;
  product_variant: MongoID;
  unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_cost: number;
  total: number;
  status: EnumProduct_PurchaseStatus;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProduct_PurchasePayload {
  recordId: MongoID | null;
  record: Product_Purchase | null;
  error: ErrorInterface | null;
}

export interface CreateManyProduct_PurchaseInput {
  purchase: MongoID;
  product_variant: MongoID;
  unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_cost: number;
  total: number;
  status: EnumProduct_PurchaseStatus;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProduct_PurchasePayload {
  recordIds: Array<MongoID>;
  records: Array<Product_Purchase>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProduct_PurchasePayload {
  recordId: MongoID | null;
  record: Product_Purchase | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProduct_PurchaseOperatorsInput | null;
  OR: Array<FilterUpdateOneProduct_PurchaseInput>;
  AND: Array<FilterUpdateOneProduct_PurchaseInput>;
}

export interface FilterUpdateOneProduct_PurchaseOperatorsInput {
  _id: FilterUpdateOneProduct_Purchase_idOperatorsInput | null;
  createdAt: FilterUpdateOneProduct_PurchaseCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProduct_Purchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_PurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProduct_PurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProduct_PurchasePayload {
  recordId: MongoID | null;
  record: Product_Purchase | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProduct_PurchaseOperatorsInput | null;
  OR: Array<FilterUpdateManyProduct_PurchaseInput>;
  AND: Array<FilterUpdateManyProduct_PurchaseInput>;
}

export interface FilterUpdateManyProduct_PurchaseOperatorsInput {
  _id: FilterUpdateManyProduct_Purchase_idOperatorsInput | null;
  createdAt: FilterUpdateManyProduct_PurchaseCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProduct_Purchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_PurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProduct_PurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProduct_PurchasePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProduct_PurchasePayload {
  recordId: MongoID | null;
  record: Product_Purchase | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProduct_PurchaseOperatorsInput | null;
  OR: Array<FilterRemoveOneProduct_PurchaseInput>;
  AND: Array<FilterRemoveOneProduct_PurchaseInput>;
}

export interface FilterRemoveOneProduct_PurchaseOperatorsInput {
  _id: FilterRemoveOneProduct_Purchase_idOperatorsInput | null;
  createdAt: FilterRemoveOneProduct_PurchaseCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProduct_Purchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_PurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProduct_PurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProduct_PurchasePayload {
  recordId: MongoID | null;
  record: Product_Purchase | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProduct_PurchaseInput {
  purchase: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_cost: number | null;
  total: number | null;
  status: EnumProduct_PurchaseStatus | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProduct_PurchaseOperatorsInput | null;
  OR: Array<FilterRemoveManyProduct_PurchaseInput>;
  AND: Array<FilterRemoveManyProduct_PurchaseInput>;
}

export interface FilterRemoveManyProduct_PurchaseOperatorsInput {
  _id: FilterRemoveManyProduct_Purchase_idOperatorsInput | null;
  createdAt: FilterRemoveManyProduct_PurchaseCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProduct_Purchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_PurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProduct_PurchasePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProduct_QuotationInput {
  quotation: MongoID;
  product_variant: MongoID;
  unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_price: number;
  total: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProduct_QuotationPayload {
  recordId: MongoID | null;
  record: Product_Quotation | null;
  error: ErrorInterface | null;
}

export interface CreateManyProduct_QuotationInput {
  quotation: MongoID;
  product_variant: MongoID;
  unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_price: number;
  total: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProduct_QuotationPayload {
  recordIds: Array<MongoID>;
  records: Array<Product_Quotation>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProduct_QuotationPayload {
  recordId: MongoID | null;
  record: Product_Quotation | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProduct_QuotationOperatorsInput | null;
  OR: Array<FilterUpdateOneProduct_QuotationInput>;
  AND: Array<FilterUpdateOneProduct_QuotationInput>;
}

export interface FilterUpdateOneProduct_QuotationOperatorsInput {
  _id: FilterUpdateOneProduct_Quotation_idOperatorsInput | null;
  createdAt: FilterUpdateOneProduct_QuotationCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProduct_Quotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_QuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProduct_QuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProduct_QuotationPayload {
  recordId: MongoID | null;
  record: Product_Quotation | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProduct_QuotationOperatorsInput | null;
  OR: Array<FilterUpdateManyProduct_QuotationInput>;
  AND: Array<FilterUpdateManyProduct_QuotationInput>;
}

export interface FilterUpdateManyProduct_QuotationOperatorsInput {
  _id: FilterUpdateManyProduct_Quotation_idOperatorsInput | null;
  createdAt: FilterUpdateManyProduct_QuotationCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProduct_Quotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_QuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProduct_QuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProduct_QuotationPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProduct_QuotationPayload {
  recordId: MongoID | null;
  record: Product_Quotation | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProduct_QuotationOperatorsInput | null;
  OR: Array<FilterRemoveOneProduct_QuotationInput>;
  AND: Array<FilterRemoveOneProduct_QuotationInput>;
}

export interface FilterRemoveOneProduct_QuotationOperatorsInput {
  _id: FilterRemoveOneProduct_Quotation_idOperatorsInput | null;
  createdAt: FilterRemoveOneProduct_QuotationCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProduct_Quotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_QuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProduct_QuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProduct_QuotationPayload {
  recordId: MongoID | null;
  record: Product_Quotation | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProduct_QuotationInput {
  quotation: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProduct_QuotationOperatorsInput | null;
  OR: Array<FilterRemoveManyProduct_QuotationInput>;
  AND: Array<FilterRemoveManyProduct_QuotationInput>;
}

export interface FilterRemoveManyProduct_QuotationOperatorsInput {
  _id: FilterRemoveManyProduct_Quotation_idOperatorsInput | null;
  createdAt: FilterRemoveManyProduct_QuotationCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProduct_Quotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_QuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProduct_QuotationPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProduct_ReturnInput {
  return: MongoID;
  product_variant: MongoID;
  unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_price: number;
  total: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProduct_ReturnPayload {
  recordId: MongoID | null;
  record: Product_Return | null;
  error: ErrorInterface | null;
}

export interface CreateManyProduct_ReturnInput {
  return: MongoID;
  product_variant: MongoID;
  unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_price: number;
  total: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProduct_ReturnPayload {
  recordIds: Array<MongoID>;
  records: Array<Product_Return>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProduct_ReturnPayload {
  recordId: MongoID | null;
  record: Product_Return | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProduct_ReturnOperatorsInput | null;
  OR: Array<FilterUpdateOneProduct_ReturnInput>;
  AND: Array<FilterUpdateOneProduct_ReturnInput>;
}

export interface FilterUpdateOneProduct_ReturnOperatorsInput {
  _id: FilterUpdateOneProduct_Return_idOperatorsInput | null;
  createdAt: FilterUpdateOneProduct_ReturnCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProduct_Return_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_ReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProduct_ReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProduct_ReturnPayload {
  recordId: MongoID | null;
  record: Product_Return | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProduct_ReturnOperatorsInput | null;
  OR: Array<FilterUpdateManyProduct_ReturnInput>;
  AND: Array<FilterUpdateManyProduct_ReturnInput>;
}

export interface FilterUpdateManyProduct_ReturnOperatorsInput {
  _id: FilterUpdateManyProduct_Return_idOperatorsInput | null;
  createdAt: FilterUpdateManyProduct_ReturnCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProduct_Return_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_ReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProduct_ReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProduct_ReturnPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProduct_ReturnPayload {
  recordId: MongoID | null;
  record: Product_Return | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProduct_ReturnOperatorsInput | null;
  OR: Array<FilterRemoveOneProduct_ReturnInput>;
  AND: Array<FilterRemoveOneProduct_ReturnInput>;
}

export interface FilterRemoveOneProduct_ReturnOperatorsInput {
  _id: FilterRemoveOneProduct_Return_idOperatorsInput | null;
  createdAt: FilterRemoveOneProduct_ReturnCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProduct_Return_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_ReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProduct_ReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProduct_ReturnPayload {
  recordId: MongoID | null;
  record: Product_Return | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProduct_ReturnInput {
  return: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProduct_ReturnOperatorsInput | null;
  OR: Array<FilterRemoveManyProduct_ReturnInput>;
  AND: Array<FilterRemoveManyProduct_ReturnInput>;
}

export interface FilterRemoveManyProduct_ReturnOperatorsInput {
  _id: FilterRemoveManyProduct_Return_idOperatorsInput | null;
  createdAt: FilterRemoveManyProduct_ReturnCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProduct_Return_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_ReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProduct_ReturnPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProduct_SaleInput {
  sale: MongoID;
  product_variant: MongoID;
  unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_price: number;
  total: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProduct_SalePayload {
  recordId: MongoID | null;
  record: Product_Sale | null;
  error: ErrorInterface | null;
}

export interface CreateManyProduct_SaleInput {
  sale: MongoID;
  product_variant: MongoID;
  unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  discount: number;
  net_unit_price: number;
  total: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProduct_SalePayload {
  recordIds: Array<MongoID>;
  records: Array<Product_Sale>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProduct_SalePayload {
  recordId: MongoID | null;
  record: Product_Sale | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProduct_SaleOperatorsInput | null;
  OR: Array<FilterUpdateOneProduct_SaleInput>;
  AND: Array<FilterUpdateOneProduct_SaleInput>;
}

export interface FilterUpdateOneProduct_SaleOperatorsInput {
  _id: FilterUpdateOneProduct_Sale_idOperatorsInput | null;
  createdAt: FilterUpdateOneProduct_SaleCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProduct_Sale_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_SaleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProduct_SaleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProduct_SalePayload {
  recordId: MongoID | null;
  record: Product_Sale | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProduct_SaleOperatorsInput | null;
  OR: Array<FilterUpdateManyProduct_SaleInput>;
  AND: Array<FilterUpdateManyProduct_SaleInput>;
}

export interface FilterUpdateManyProduct_SaleOperatorsInput {
  _id: FilterUpdateManyProduct_Sale_idOperatorsInput | null;
  createdAt: FilterUpdateManyProduct_SaleCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProduct_Sale_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_SaleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProduct_SaleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProduct_SalePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProduct_SalePayload {
  recordId: MongoID | null;
  record: Product_Sale | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProduct_SaleOperatorsInput | null;
  OR: Array<FilterRemoveOneProduct_SaleInput>;
  AND: Array<FilterRemoveOneProduct_SaleInput>;
}

export interface FilterRemoveOneProduct_SaleOperatorsInput {
  _id: FilterRemoveOneProduct_Sale_idOperatorsInput | null;
  createdAt: FilterRemoveOneProduct_SaleCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProduct_Sale_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_SaleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProduct_SaleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProduct_SalePayload {
  recordId: MongoID | null;
  record: Product_Sale | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProduct_SaleInput {
  sale: MongoID | null;
  product_variant: MongoID | null;
  unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  discount: number | null;
  net_unit_price: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProduct_SaleOperatorsInput | null;
  OR: Array<FilterRemoveManyProduct_SaleInput>;
  AND: Array<FilterRemoveManyProduct_SaleInput>;
}

export interface FilterRemoveManyProduct_SaleOperatorsInput {
  _id: FilterRemoveManyProduct_Sale_idOperatorsInput | null;
  createdAt: FilterRemoveManyProduct_SaleCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProduct_Sale_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_SaleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProduct_SalePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProduct_SupplierInput {
  productVariant: MongoID;
  supplier: MongoID;
  qty: number;
  price: number;
  itemCode: string;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProduct_SupplierPayload {
  recordId: MongoID | null;
  record: Product_Supplier | null;
  error: ErrorInterface | null;
}

export interface CreateManyProduct_SupplierInput {
  productVariant: MongoID;
  supplier: MongoID;
  qty: number;
  price: number;
  itemCode: string;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProduct_SupplierPayload {
  recordIds: Array<MongoID>;
  records: Array<Product_Supplier>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProduct_SupplierPayload {
  recordId: MongoID | null;
  record: Product_Supplier | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProduct_SupplierOperatorsInput | null;
  OR: Array<FilterUpdateOneProduct_SupplierInput>;
  AND: Array<FilterUpdateOneProduct_SupplierInput>;
}

export interface FilterUpdateOneProduct_SupplierOperatorsInput {
  itemCode: FilterUpdateOneProduct_SupplierItemCodeOperatorsInput | null;
  _id: FilterUpdateOneProduct_Supplier_idOperatorsInput | null;
  createdAt: FilterUpdateOneProduct_SupplierCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProduct_SupplierItemCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_Supplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_SupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProduct_SupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ITEMCODE_ASC"
  | "ITEMCODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProduct_SupplierPayload {
  recordId: MongoID | null;
  record: Product_Supplier | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProduct_SupplierOperatorsInput | null;
  OR: Array<FilterUpdateManyProduct_SupplierInput>;
  AND: Array<FilterUpdateManyProduct_SupplierInput>;
}

export interface FilterUpdateManyProduct_SupplierOperatorsInput {
  itemCode: FilterUpdateManyProduct_SupplierItemCodeOperatorsInput | null;
  _id: FilterUpdateManyProduct_Supplier_idOperatorsInput | null;
  createdAt: FilterUpdateManyProduct_SupplierCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProduct_SupplierItemCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_Supplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_SupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProduct_SupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ITEMCODE_ASC"
  | "ITEMCODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProduct_SupplierPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProduct_SupplierPayload {
  recordId: MongoID | null;
  record: Product_Supplier | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProduct_SupplierOperatorsInput | null;
  OR: Array<FilterRemoveOneProduct_SupplierInput>;
  AND: Array<FilterRemoveOneProduct_SupplierInput>;
}

export interface FilterRemoveOneProduct_SupplierOperatorsInput {
  itemCode: FilterRemoveOneProduct_SupplierItemCodeOperatorsInput | null;
  _id: FilterRemoveOneProduct_Supplier_idOperatorsInput | null;
  createdAt: FilterRemoveOneProduct_SupplierCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProduct_SupplierItemCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_Supplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_SupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProduct_SupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "ITEMCODE_ASC"
  | "ITEMCODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProduct_SupplierPayload {
  recordId: MongoID | null;
  record: Product_Supplier | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProduct_SupplierInput {
  productVariant: MongoID | null;
  supplier: MongoID | null;
  qty: number | null;
  price: number | null;
  itemCode: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProduct_SupplierOperatorsInput | null;
  OR: Array<FilterRemoveManyProduct_SupplierInput>;
  AND: Array<FilterRemoveManyProduct_SupplierInput>;
}

export interface FilterRemoveManyProduct_SupplierOperatorsInput {
  itemCode: FilterRemoveManyProduct_SupplierItemCodeOperatorsInput | null;
  _id: FilterRemoveManyProduct_Supplier_idOperatorsInput | null;
  createdAt: FilterRemoveManyProduct_SupplierCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProduct_SupplierItemCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_Supplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_SupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProduct_SupplierPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProduct_TransferInput {
  transfer: MongoID;
  product_variant: MongoID;
  purchase_unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  net_unit_cost: number;
  total: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProduct_TransferPayload {
  recordId: MongoID | null;
  record: Product_Transfer | null;
  error: ErrorInterface | null;
}

export interface CreateManyProduct_TransferInput {
  transfer: MongoID;
  product_variant: MongoID;
  purchase_unit: MongoID;
  qty: number;
  tax_rate: number;
  tax: number;
  net_unit_cost: number;
  total: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProduct_TransferPayload {
  recordIds: Array<MongoID>;
  records: Array<Product_Transfer>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProduct_TransferPayload {
  recordId: MongoID | null;
  record: Product_Transfer | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProduct_TransferOperatorsInput | null;
  OR: Array<FilterUpdateOneProduct_TransferInput>;
  AND: Array<FilterUpdateOneProduct_TransferInput>;
}

export interface FilterUpdateOneProduct_TransferOperatorsInput {
  _id: FilterUpdateOneProduct_Transfer_idOperatorsInput | null;
  createdAt: FilterUpdateOneProduct_TransferCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProduct_Transfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_TransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProduct_TransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProduct_TransferPayload {
  recordId: MongoID | null;
  record: Product_Transfer | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProduct_TransferOperatorsInput | null;
  OR: Array<FilterUpdateManyProduct_TransferInput>;
  AND: Array<FilterUpdateManyProduct_TransferInput>;
}

export interface FilterUpdateManyProduct_TransferOperatorsInput {
  _id: FilterUpdateManyProduct_Transfer_idOperatorsInput | null;
  createdAt: FilterUpdateManyProduct_TransferCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProduct_Transfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_TransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProduct_TransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProduct_TransferPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProduct_TransferPayload {
  recordId: MongoID | null;
  record: Product_Transfer | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProduct_TransferOperatorsInput | null;
  OR: Array<FilterRemoveOneProduct_TransferInput>;
  AND: Array<FilterRemoveOneProduct_TransferInput>;
}

export interface FilterRemoveOneProduct_TransferOperatorsInput {
  _id: FilterRemoveOneProduct_Transfer_idOperatorsInput | null;
  createdAt: FilterRemoveOneProduct_TransferCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProduct_Transfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_TransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProduct_TransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProduct_TransferPayload {
  recordId: MongoID | null;
  record: Product_Transfer | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProduct_TransferInput {
  transfer: MongoID | null;
  product_variant: MongoID | null;
  purchase_unit: MongoID | null;
  qty: number | null;
  tax_rate: number | null;
  tax: number | null;
  net_unit_cost: number | null;
  total: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProduct_TransferOperatorsInput | null;
  OR: Array<FilterRemoveManyProduct_TransferInput>;
  AND: Array<FilterRemoveManyProduct_TransferInput>;
}

export interface FilterRemoveManyProduct_TransferOperatorsInput {
  _id: FilterRemoveManyProduct_Transfer_idOperatorsInput | null;
  createdAt: FilterRemoveManyProduct_TransferCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProduct_Transfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_TransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProduct_TransferPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProduct_VariantInput {
  variant: MongoID;
  product: MongoID;
  unit: MongoID;
  category: MongoID;
  tax: MongoID | null;
  purchase_unit: MongoID;
  sale_unit: MongoID;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type;
  barcode_symbology: string;
  item_code: string;
  qty: number;
  position: number;
  additional_price: number;
  alert_qty: number | null;
  promotion: boolean;
  promotion_price: number;
  price: number;
  cost: number;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProduct_VariantPayload {
  recordId: MongoID | null;
  record: Product_Variant | null;
  error: ErrorInterface | null;
}

export interface CreateManyProduct_VariantInput {
  variant: MongoID;
  product: MongoID;
  unit: MongoID;
  category: MongoID;
  tax: MongoID | null;
  purchase_unit: MongoID;
  sale_unit: MongoID;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type;
  barcode_symbology: string;
  item_code: string;
  qty: number;
  position: number;
  additional_price: number;
  alert_qty: number | null;
  promotion: boolean;
  promotion_price: number;
  price: number;
  cost: number;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProduct_VariantPayload {
  recordIds: Array<MongoID>;
  records: Array<Product_Variant>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProduct_VariantPayload {
  recordId: MongoID | null;
  record: Product_Variant | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProduct_VariantOperatorsInput | null;
  OR: Array<FilterUpdateOneProduct_VariantInput>;
  AND: Array<FilterUpdateOneProduct_VariantInput>;
}

export interface FilterUpdateOneProduct_VariantOperatorsInput {
  variant: FilterUpdateOneProduct_VariantVariantOperatorsInput | null;
  item_code: FilterUpdateOneProduct_VariantItem_codeOperatorsInput | null;
  _id: FilterUpdateOneProduct_Variant_idOperatorsInput | null;
  createdAt: FilterUpdateOneProduct_VariantCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProduct_VariantVariantOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_VariantItem_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_Variant_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_VariantCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProduct_VariantInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "VARIANT_ASC"
  | "VARIANT_DESC"
  | "ITEM_CODE_ASC"
  | "ITEM_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProduct_VariantPayload {
  recordId: MongoID | null;
  record: Product_Variant | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProduct_VariantOperatorsInput | null;
  OR: Array<FilterUpdateManyProduct_VariantInput>;
  AND: Array<FilterUpdateManyProduct_VariantInput>;
}

export interface FilterUpdateManyProduct_VariantOperatorsInput {
  variant: FilterUpdateManyProduct_VariantVariantOperatorsInput | null;
  item_code: FilterUpdateManyProduct_VariantItem_codeOperatorsInput | null;
  _id: FilterUpdateManyProduct_Variant_idOperatorsInput | null;
  createdAt: FilterUpdateManyProduct_VariantCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProduct_VariantVariantOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_VariantItem_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_Variant_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_VariantCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProduct_VariantInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "VARIANT_ASC"
  | "VARIANT_DESC"
  | "ITEM_CODE_ASC"
  | "ITEM_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProduct_VariantPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProduct_VariantPayload {
  recordId: MongoID | null;
  record: Product_Variant | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProduct_VariantOperatorsInput | null;
  OR: Array<FilterRemoveOneProduct_VariantInput>;
  AND: Array<FilterRemoveOneProduct_VariantInput>;
}

export interface FilterRemoveOneProduct_VariantOperatorsInput {
  variant: FilterRemoveOneProduct_VariantVariantOperatorsInput | null;
  item_code: FilterRemoveOneProduct_VariantItem_codeOperatorsInput | null;
  _id: FilterRemoveOneProduct_Variant_idOperatorsInput | null;
  createdAt: FilterRemoveOneProduct_VariantCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProduct_VariantVariantOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_VariantItem_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_Variant_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_VariantCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProduct_VariantInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "VARIANT_ASC"
  | "VARIANT_DESC"
  | "ITEM_CODE_ASC"
  | "ITEM_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProduct_VariantPayload {
  recordId: MongoID | null;
  record: Product_Variant | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProduct_VariantInput {
  variant: MongoID | null;
  product: MongoID | null;
  unit: MongoID | null;
  category: MongoID | null;
  tax: MongoID | null;
  purchase_unit: MongoID | null;
  sale_unit: MongoID | null;
  productSuppliers: Array<MongoID> | null;
  product_type: EnumProduct_VariantProduct_type | null;
  barcode_symbology: string | null;
  item_code: string | null;
  qty: number | null;
  position: number | null;
  additional_price: number | null;
  alert_qty: number | null;
  promotion: boolean | null;
  promotion_price: number | null;
  price: number | null;
  cost: number | null;
  tax_method: EnumProduct_VariantTax_method | null;
  starting_date: Date | null;
  last_date: Date | null;
  image: string | null;
  featured: boolean | null;
  product_list: string | null;
  qty_list: string | null;
  price_list: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProduct_VariantOperatorsInput | null;
  OR: Array<FilterRemoveManyProduct_VariantInput>;
  AND: Array<FilterRemoveManyProduct_VariantInput>;
}

export interface FilterRemoveManyProduct_VariantOperatorsInput {
  variant: FilterRemoveManyProduct_VariantVariantOperatorsInput | null;
  item_code: FilterRemoveManyProduct_VariantItem_codeOperatorsInput | null;
  _id: FilterRemoveManyProduct_Variant_idOperatorsInput | null;
  createdAt: FilterRemoveManyProduct_VariantCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProduct_VariantVariantOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_VariantItem_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_Variant_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_VariantCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProduct_VariantPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProduct_WarehouseInput {
  product_variant: MongoID;
  warehouse: MongoID;
  qty: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProduct_WarehousePayload {
  recordId: MongoID | null;
  record: Product_Warehouse | null;
  error: ErrorInterface | null;
}

export interface CreateManyProduct_WarehouseInput {
  product_variant: MongoID;
  warehouse: MongoID;
  qty: number;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProduct_WarehousePayload {
  recordIds: Array<MongoID>;
  records: Array<Product_Warehouse>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProduct_WarehousePayload {
  recordId: MongoID | null;
  record: Product_Warehouse | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProduct_WarehouseOperatorsInput | null;
  OR: Array<FilterUpdateOneProduct_WarehouseInput>;
  AND: Array<FilterUpdateOneProduct_WarehouseInput>;
}

export interface FilterUpdateOneProduct_WarehouseOperatorsInput {
  _id: FilterUpdateOneProduct_Warehouse_idOperatorsInput | null;
  createdAt: FilterUpdateOneProduct_WarehouseCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProduct_Warehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_WarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProduct_WarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProduct_WarehousePayload {
  recordId: MongoID | null;
  record: Product_Warehouse | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProduct_WarehouseOperatorsInput | null;
  OR: Array<FilterUpdateManyProduct_WarehouseInput>;
  AND: Array<FilterUpdateManyProduct_WarehouseInput>;
}

export interface FilterUpdateManyProduct_WarehouseOperatorsInput {
  _id: FilterUpdateManyProduct_Warehouse_idOperatorsInput | null;
  createdAt: FilterUpdateManyProduct_WarehouseCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProduct_Warehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_WarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProduct_WarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProduct_WarehousePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProduct_WarehousePayload {
  recordId: MongoID | null;
  record: Product_Warehouse | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProduct_WarehouseOperatorsInput | null;
  OR: Array<FilterRemoveOneProduct_WarehouseInput>;
  AND: Array<FilterRemoveOneProduct_WarehouseInput>;
}

export interface FilterRemoveOneProduct_WarehouseOperatorsInput {
  _id: FilterRemoveOneProduct_Warehouse_idOperatorsInput | null;
  createdAt: FilterRemoveOneProduct_WarehouseCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProduct_Warehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_WarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProduct_WarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProduct_WarehousePayload {
  recordId: MongoID | null;
  record: Product_Warehouse | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProduct_WarehouseInput {
  product_variant: MongoID | null;
  warehouse: MongoID | null;
  qty: number | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProduct_WarehouseOperatorsInput | null;
  OR: Array<FilterRemoveManyProduct_WarehouseInput>;
  AND: Array<FilterRemoveManyProduct_WarehouseInput>;
}

export interface FilterRemoveManyProduct_WarehouseOperatorsInput {
  _id: FilterRemoveManyProduct_Warehouse_idOperatorsInput | null;
  createdAt: FilterRemoveManyProduct_WarehouseCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProduct_Warehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_WarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProduct_WarehousePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneProductInput {
  name: string;
  code: string;
  brand: MongoID;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneProductPayload {
  recordId: MongoID | null;
  record: Product | null;
  error: ErrorInterface | null;
}

export interface CreateManyProductInput {
  name: string;
  code: string;
  brand: MongoID;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyProductPayload {
  recordIds: Array<MongoID>;
  records: Array<Product>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdProductPayload {
  recordId: MongoID | null;
  record: Product | null;
  error: ErrorInterface | null;
}

export interface UpdateOneProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneProductOperatorsInput | null;
  OR: Array<FilterUpdateOneProductInput>;
  AND: Array<FilterUpdateOneProductInput>;
}

export interface FilterUpdateOneProductOperatorsInput {
  name: FilterUpdateOneProductNameOperatorsInput | null;
  code: FilterUpdateOneProductCodeOperatorsInput | null;
  _id: FilterUpdateOneProduct_idOperatorsInput | null;
  createdAt: FilterUpdateOneProductCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneProductNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProductCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProduct_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneProductCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneProductInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneProductPayload {
  recordId: MongoID | null;
  record: Product | null;
  error: ErrorInterface | null;
}

export interface UpdateManyProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyProductOperatorsInput | null;
  OR: Array<FilterUpdateManyProductInput>;
  AND: Array<FilterUpdateManyProductInput>;
}

export interface FilterUpdateManyProductOperatorsInput {
  name: FilterUpdateManyProductNameOperatorsInput | null;
  code: FilterUpdateManyProductCodeOperatorsInput | null;
  _id: FilterUpdateManyProduct_idOperatorsInput | null;
  createdAt: FilterUpdateManyProductCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyProductNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProductCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProduct_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyProductCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyProductInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyProductPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdProductPayload {
  recordId: MongoID | null;
  record: Product | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneProductOperatorsInput | null;
  OR: Array<FilterRemoveOneProductInput>;
  AND: Array<FilterRemoveOneProductInput>;
}

export interface FilterRemoveOneProductOperatorsInput {
  name: FilterRemoveOneProductNameOperatorsInput | null;
  code: FilterRemoveOneProductCodeOperatorsInput | null;
  _id: FilterRemoveOneProduct_idOperatorsInput | null;
  createdAt: FilterRemoveOneProductCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneProductNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProductCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProduct_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneProductCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneProductInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CODE_ASC"
  | "CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneProductPayload {
  recordId: MongoID | null;
  record: Product | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyProductInput {
  name: string | null;
  code: string | null;
  brand: MongoID | null;
  product_variants: Array<MongoID> | null;
  file: string | null;
  product_details: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyProductOperatorsInput | null;
  OR: Array<FilterRemoveManyProductInput>;
  AND: Array<FilterRemoveManyProductInput>;
}

export interface FilterRemoveManyProductOperatorsInput {
  name: FilterRemoveManyProductNameOperatorsInput | null;
  code: FilterRemoveManyProductCodeOperatorsInput | null;
  _id: FilterRemoveManyProduct_idOperatorsInput | null;
  createdAt: FilterRemoveManyProductCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyProductNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProductCodeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProduct_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyProductCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyProductPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOnePurchaseInput {
  reference_no: string;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_cost: number;
  order_tax_rate: number;
  order_tax: number;
  order_discount: number;
  shipping_cost: number;
  grandtotal: number;
  paid_amount: number;
  user: MongoID;
  warehouse: MongoID;
  supplier: MongoID;
  product_purchases: Array<MongoID>;
  product_purchase_returns: Array<MongoID>;
  status: EnumPurchaseStatus;
  payment_status: EnumPurchasePayment_status;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOnePurchasePayload {
  recordId: MongoID | null;
  record: Purchase | null;
  error: ErrorInterface | null;
}

export interface CreateManyPurchaseInput {
  reference_no: string;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_cost: number;
  order_tax_rate: number;
  order_tax: number;
  order_discount: number;
  shipping_cost: number;
  grandtotal: number;
  paid_amount: number;
  user: MongoID;
  warehouse: MongoID;
  supplier: MongoID;
  product_purchases: Array<MongoID>;
  product_purchase_returns: Array<MongoID>;
  status: EnumPurchaseStatus;
  payment_status: EnumPurchasePayment_status;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyPurchasePayload {
  recordIds: Array<MongoID>;
  records: Array<Purchase>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdPurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdPurchasePayload {
  recordId: MongoID | null;
  record: Purchase | null;
  error: ErrorInterface | null;
}

export interface UpdateOnePurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOnePurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOnePurchaseOperatorsInput | null;
  OR: Array<FilterUpdateOnePurchaseInput>;
  AND: Array<FilterUpdateOnePurchaseInput>;
}

export interface FilterUpdateOnePurchaseOperatorsInput {
  reference_no: FilterUpdateOnePurchaseReference_noOperatorsInput | null;
  document: FilterUpdateOnePurchaseDocumentOperatorsInput | null;
  note: FilterUpdateOnePurchaseNoteOperatorsInput | null;
  _id: FilterUpdateOnePurchase_idOperatorsInput | null;
  createdAt: FilterUpdateOnePurchaseCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOnePurchaseReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOnePurchaseDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOnePurchaseNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOnePurchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOnePurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOnePurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOnePurchasePayload {
  recordId: MongoID | null;
  record: Purchase | null;
  error: ErrorInterface | null;
}

export interface UpdateManyPurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyPurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyPurchaseOperatorsInput | null;
  OR: Array<FilterUpdateManyPurchaseInput>;
  AND: Array<FilterUpdateManyPurchaseInput>;
}

export interface FilterUpdateManyPurchaseOperatorsInput {
  reference_no: FilterUpdateManyPurchaseReference_noOperatorsInput | null;
  document: FilterUpdateManyPurchaseDocumentOperatorsInput | null;
  note: FilterUpdateManyPurchaseNoteOperatorsInput | null;
  _id: FilterUpdateManyPurchase_idOperatorsInput | null;
  createdAt: FilterUpdateManyPurchaseCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyPurchaseReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyPurchaseDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyPurchaseNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyPurchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyPurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyPurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyPurchasePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdPurchasePayload {
  recordId: MongoID | null;
  record: Purchase | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOnePurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOnePurchaseOperatorsInput | null;
  OR: Array<FilterRemoveOnePurchaseInput>;
  AND: Array<FilterRemoveOnePurchaseInput>;
}

export interface FilterRemoveOnePurchaseOperatorsInput {
  reference_no: FilterRemoveOnePurchaseReference_noOperatorsInput | null;
  document: FilterRemoveOnePurchaseDocumentOperatorsInput | null;
  note: FilterRemoveOnePurchaseNoteOperatorsInput | null;
  _id: FilterRemoveOnePurchase_idOperatorsInput | null;
  createdAt: FilterRemoveOnePurchaseCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOnePurchaseReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOnePurchaseDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOnePurchaseNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOnePurchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOnePurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOnePurchaseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOnePurchasePayload {
  recordId: MongoID | null;
  record: Purchase | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyPurchaseInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_cost: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  product_purchases: Array<MongoID> | null;
  product_purchase_returns: Array<MongoID> | null;
  status: EnumPurchaseStatus | null;
  payment_status: EnumPurchasePayment_status | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyPurchaseOperatorsInput | null;
  OR: Array<FilterRemoveManyPurchaseInput>;
  AND: Array<FilterRemoveManyPurchaseInput>;
}

export interface FilterRemoveManyPurchaseOperatorsInput {
  reference_no: FilterRemoveManyPurchaseReference_noOperatorsInput | null;
  document: FilterRemoveManyPurchaseDocumentOperatorsInput | null;
  note: FilterRemoveManyPurchaseNoteOperatorsInput | null;
  _id: FilterRemoveManyPurchase_idOperatorsInput | null;
  createdAt: FilterRemoveManyPurchaseCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyPurchaseReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyPurchaseDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyPurchaseNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyPurchase_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyPurchaseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyPurchasePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneReturnInput {
  reference_no: string;
  user: MongoID;
  biller: MongoID;
  warehouse: MongoID;
  account: MongoID;
  customer: MongoID;
  product_returns: MongoID;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_price: number;
  order_tax_rate: number;
  order_tax: number;
  grandtotal: number;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneReturnPayload {
  recordId: MongoID | null;
  record: Return | null;
  error: ErrorInterface | null;
}

export interface CreateManyReturnInput {
  reference_no: string;
  user: MongoID;
  biller: MongoID;
  warehouse: MongoID;
  account: MongoID;
  customer: MongoID;
  product_returns: MongoID;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_price: number;
  order_tax_rate: number;
  order_tax: number;
  grandtotal: number;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyReturnPayload {
  recordIds: Array<MongoID>;
  records: Array<Return>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdReturnPayload {
  recordId: MongoID | null;
  record: Return | null;
  error: ErrorInterface | null;
}

export interface UpdateOneReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneReturnOperatorsInput | null;
  OR: Array<FilterUpdateOneReturnInput>;
  AND: Array<FilterUpdateOneReturnInput>;
}

export interface FilterUpdateOneReturnOperatorsInput {
  reference_no: FilterUpdateOneReturnReference_noOperatorsInput | null;
  document: FilterUpdateOneReturnDocumentOperatorsInput | null;
  return_note: FilterUpdateOneReturnReturn_noteOperatorsInput | null;
  staff_note: FilterUpdateOneReturnStaff_noteOperatorsInput | null;
  _id: FilterUpdateOneReturn_idOperatorsInput | null;
  createdAt: FilterUpdateOneReturnCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneReturnReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneReturnDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneReturnReturn_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneReturnStaff_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneReturn_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "RETURN_NOTE_ASC"
  | "RETURN_NOTE_DESC"
  | "STAFF_NOTE_ASC"
  | "STAFF_NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneReturnPayload {
  recordId: MongoID | null;
  record: Return | null;
  error: ErrorInterface | null;
}

export interface UpdateManyReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyReturnOperatorsInput | null;
  OR: Array<FilterUpdateManyReturnInput>;
  AND: Array<FilterUpdateManyReturnInput>;
}

export interface FilterUpdateManyReturnOperatorsInput {
  reference_no: FilterUpdateManyReturnReference_noOperatorsInput | null;
  document: FilterUpdateManyReturnDocumentOperatorsInput | null;
  return_note: FilterUpdateManyReturnReturn_noteOperatorsInput | null;
  staff_note: FilterUpdateManyReturnStaff_noteOperatorsInput | null;
  _id: FilterUpdateManyReturn_idOperatorsInput | null;
  createdAt: FilterUpdateManyReturnCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyReturnReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyReturnDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyReturnReturn_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyReturnStaff_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyReturn_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "RETURN_NOTE_ASC"
  | "RETURN_NOTE_DESC"
  | "STAFF_NOTE_ASC"
  | "STAFF_NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyReturnPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdReturnPayload {
  recordId: MongoID | null;
  record: Return | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneReturnOperatorsInput | null;
  OR: Array<FilterRemoveOneReturnInput>;
  AND: Array<FilterRemoveOneReturnInput>;
}

export interface FilterRemoveOneReturnOperatorsInput {
  reference_no: FilterRemoveOneReturnReference_noOperatorsInput | null;
  document: FilterRemoveOneReturnDocumentOperatorsInput | null;
  return_note: FilterRemoveOneReturnReturn_noteOperatorsInput | null;
  staff_note: FilterRemoveOneReturnStaff_noteOperatorsInput | null;
  _id: FilterRemoveOneReturn_idOperatorsInput | null;
  createdAt: FilterRemoveOneReturnCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneReturnReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneReturnDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneReturnReturn_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneReturnStaff_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneReturn_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneReturnInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "RETURN_NOTE_ASC"
  | "RETURN_NOTE_DESC"
  | "STAFF_NOTE_ASC"
  | "STAFF_NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneReturnPayload {
  recordId: MongoID | null;
  record: Return | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyReturnInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  account: MongoID | null;
  customer: MongoID | null;
  product_returns: MongoID | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  grandtotal: number | null;
  document: string | null;
  return_note: string | null;
  staff_note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyReturnOperatorsInput | null;
  OR: Array<FilterRemoveManyReturnInput>;
  AND: Array<FilterRemoveManyReturnInput>;
}

export interface FilterRemoveManyReturnOperatorsInput {
  reference_no: FilterRemoveManyReturnReference_noOperatorsInput | null;
  document: FilterRemoveManyReturnDocumentOperatorsInput | null;
  return_note: FilterRemoveManyReturnReturn_noteOperatorsInput | null;
  staff_note: FilterRemoveManyReturnStaff_noteOperatorsInput | null;
  _id: FilterRemoveManyReturn_idOperatorsInput | null;
  createdAt: FilterRemoveManyReturnCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyReturnReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyReturnDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyReturnReturn_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyReturnStaff_noteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyReturn_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyReturnCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyReturnPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneQuotationInput {
  reference_no: string;
  user: MongoID;
  biller: MongoID;
  warehouse: MongoID;
  supplier: MongoID;
  customer: MongoID;
  product_quotations: Array<MongoID>;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_price: number;
  order_tax_rate: number;
  order_tax: number;
  order_discount: number;
  shipping_cost: number;
  grandtotal: number;
  paid_amount: number;
  status: EnumQuotationStatus;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneQuotationPayload {
  recordId: MongoID | null;
  record: Quotation | null;
  error: ErrorInterface | null;
}

export interface CreateManyQuotationInput {
  reference_no: string;
  user: MongoID;
  biller: MongoID;
  warehouse: MongoID;
  supplier: MongoID;
  customer: MongoID;
  product_quotations: Array<MongoID>;
  item: number;
  total_qty: number;
  total_discount: number;
  total_tax: number;
  total_price: number;
  order_tax_rate: number;
  order_tax: number;
  order_discount: number;
  shipping_cost: number;
  grandtotal: number;
  paid_amount: number;
  status: EnumQuotationStatus;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyQuotationPayload {
  recordIds: Array<MongoID>;
  records: Array<Quotation>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdQuotationPayload {
  recordId: MongoID | null;
  record: Quotation | null;
  error: ErrorInterface | null;
}

export interface UpdateOneQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneQuotationOperatorsInput | null;
  OR: Array<FilterUpdateOneQuotationInput>;
  AND: Array<FilterUpdateOneQuotationInput>;
}

export interface FilterUpdateOneQuotationOperatorsInput {
  reference_no: FilterUpdateOneQuotationReference_noOperatorsInput | null;
  document: FilterUpdateOneQuotationDocumentOperatorsInput | null;
  note: FilterUpdateOneQuotationNoteOperatorsInput | null;
  _id: FilterUpdateOneQuotation_idOperatorsInput | null;
  createdAt: FilterUpdateOneQuotationCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneQuotationReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneQuotationDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneQuotationNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneQuotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneQuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneQuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneQuotationPayload {
  recordId: MongoID | null;
  record: Quotation | null;
  error: ErrorInterface | null;
}

export interface UpdateManyQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyQuotationOperatorsInput | null;
  OR: Array<FilterUpdateManyQuotationInput>;
  AND: Array<FilterUpdateManyQuotationInput>;
}

export interface FilterUpdateManyQuotationOperatorsInput {
  reference_no: FilterUpdateManyQuotationReference_noOperatorsInput | null;
  document: FilterUpdateManyQuotationDocumentOperatorsInput | null;
  note: FilterUpdateManyQuotationNoteOperatorsInput | null;
  _id: FilterUpdateManyQuotation_idOperatorsInput | null;
  createdAt: FilterUpdateManyQuotationCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyQuotationReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyQuotationDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyQuotationNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyQuotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyQuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyQuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyQuotationPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdQuotationPayload {
  recordId: MongoID | null;
  record: Quotation | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneQuotationOperatorsInput | null;
  OR: Array<FilterRemoveOneQuotationInput>;
  AND: Array<FilterRemoveOneQuotationInput>;
}

export interface FilterRemoveOneQuotationOperatorsInput {
  reference_no: FilterRemoveOneQuotationReference_noOperatorsInput | null;
  document: FilterRemoveOneQuotationDocumentOperatorsInput | null;
  note: FilterRemoveOneQuotationNoteOperatorsInput | null;
  _id: FilterRemoveOneQuotation_idOperatorsInput | null;
  createdAt: FilterRemoveOneQuotationCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneQuotationReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneQuotationDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneQuotationNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneQuotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneQuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneQuotationInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneQuotationPayload {
  recordId: MongoID | null;
  record: Quotation | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyQuotationInput {
  reference_no: string | null;
  user: MongoID | null;
  biller: MongoID | null;
  warehouse: MongoID | null;
  supplier: MongoID | null;
  customer: MongoID | null;
  product_quotations: Array<MongoID> | null;
  item: number | null;
  total_qty: number | null;
  total_discount: number | null;
  total_tax: number | null;
  total_price: number | null;
  order_tax_rate: number | null;
  order_tax: number | null;
  order_discount: number | null;
  shipping_cost: number | null;
  grandtotal: number | null;
  paid_amount: number | null;
  status: EnumQuotationStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyQuotationOperatorsInput | null;
  OR: Array<FilterRemoveManyQuotationInput>;
  AND: Array<FilterRemoveManyQuotationInput>;
}

export interface FilterRemoveManyQuotationOperatorsInput {
  reference_no: FilterRemoveManyQuotationReference_noOperatorsInput | null;
  document: FilterRemoveManyQuotationDocumentOperatorsInput | null;
  note: FilterRemoveManyQuotationNoteOperatorsInput | null;
  _id: FilterRemoveManyQuotation_idOperatorsInput | null;
  createdAt: FilterRemoveManyQuotationCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyQuotationReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyQuotationDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyQuotationNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyQuotation_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyQuotationCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyQuotationPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneRoleInput {
  name: string;
  description: string;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneRolePayload {
  recordId: MongoID | null;
  record: Role | null;
  error: ErrorInterface | null;
}

export interface CreateManyRoleInput {
  name: string;
  description: string;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyRolePayload {
  recordIds: Array<MongoID>;
  records: Array<Role>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdRolePayload {
  recordId: MongoID | null;
  record: Role | null;
  error: ErrorInterface | null;
}

export interface UpdateOneRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneRoleOperatorsInput | null;
  OR: Array<FilterUpdateOneRoleInput>;
  AND: Array<FilterUpdateOneRoleInput>;
}

export interface FilterUpdateOneRoleOperatorsInput {
  description: FilterUpdateOneRoleDescriptionOperatorsInput | null;
  _id: FilterUpdateOneRole_idOperatorsInput | null;
  createdAt: FilterUpdateOneRoleCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneRoleDescriptionOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneRole_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneRoleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneRoleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "DESCRIPTION_ASC"
  | "DESCRIPTION_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneRolePayload {
  recordId: MongoID | null;
  record: Role | null;
  error: ErrorInterface | null;
}

export interface UpdateManyRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyRoleOperatorsInput | null;
  OR: Array<FilterUpdateManyRoleInput>;
  AND: Array<FilterUpdateManyRoleInput>;
}

export interface FilterUpdateManyRoleOperatorsInput {
  description: FilterUpdateManyRoleDescriptionOperatorsInput | null;
  _id: FilterUpdateManyRole_idOperatorsInput | null;
  createdAt: FilterUpdateManyRoleCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyRoleDescriptionOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyRole_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyRoleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyRoleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "DESCRIPTION_ASC"
  | "DESCRIPTION_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyRolePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdRolePayload {
  recordId: MongoID | null;
  record: Role | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneRoleOperatorsInput | null;
  OR: Array<FilterRemoveOneRoleInput>;
  AND: Array<FilterRemoveOneRoleInput>;
}

export interface FilterRemoveOneRoleOperatorsInput {
  description: FilterRemoveOneRoleDescriptionOperatorsInput | null;
  _id: FilterRemoveOneRole_idOperatorsInput | null;
  createdAt: FilterRemoveOneRoleCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneRoleDescriptionOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneRole_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneRoleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneRoleInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "DESCRIPTION_ASC"
  | "DESCRIPTION_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneRolePayload {
  recordId: MongoID | null;
  record: Role | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyRoleInput {
  name: string | null;
  description: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyRoleOperatorsInput | null;
  OR: Array<FilterRemoveManyRoleInput>;
  AND: Array<FilterRemoveManyRoleInput>;
}

export interface FilterRemoveManyRoleOperatorsInput {
  description: FilterRemoveManyRoleDescriptionOperatorsInput | null;
  _id: FilterRemoveManyRole_idOperatorsInput | null;
  createdAt: FilterRemoveManyRoleCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyRoleDescriptionOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyRole_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyRoleCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyRolePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneSupplierInput {
  name: string;
  image: string | null;
  company_name: string;
  vat_number: number | null;
  email: string;
  phone_number: number;
  address: string;
  city: string;
  state: string;
  postal_code: string;
  country: string;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneSupplierPayload {
  recordId: MongoID | null;
  record: Supplier | null;
  error: ErrorInterface | null;
}

export interface CreateManySupplierInput {
  name: string;
  image: string | null;
  company_name: string;
  vat_number: number | null;
  email: string;
  phone_number: number;
  address: string;
  city: string;
  state: string;
  postal_code: string;
  country: string;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManySupplierPayload {
  recordIds: Array<MongoID>;
  records: Array<Supplier>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdSupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdSupplierPayload {
  recordId: MongoID | null;
  record: Supplier | null;
  error: ErrorInterface | null;
}

export interface UpdateOneSupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneSupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneSupplierOperatorsInput | null;
  OR: Array<FilterUpdateOneSupplierInput>;
  AND: Array<FilterUpdateOneSupplierInput>;
}

export interface FilterUpdateOneSupplierOperatorsInput {
  name: FilterUpdateOneSupplierNameOperatorsInput | null;
  image: FilterUpdateOneSupplierImageOperatorsInput | null;
  company_name: FilterUpdateOneSupplierCompany_nameOperatorsInput | null;
  vat_number: FilterUpdateOneSupplierVat_numberOperatorsInput | null;
  email: FilterUpdateOneSupplierEmailOperatorsInput | null;
  phone_number: FilterUpdateOneSupplierPhone_numberOperatorsInput | null;
  address: FilterUpdateOneSupplierAddressOperatorsInput | null;
  _id: FilterUpdateOneSupplier_idOperatorsInput | null;
  createdAt: FilterUpdateOneSupplierCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneSupplierNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneSupplierImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneSupplierCompany_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneSupplierVat_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneSupplierEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneSupplierPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneSupplierAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneSupplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneSupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneSupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "COMPANY_NAME_ASC"
  | "COMPANY_NAME_DESC"
  | "VAT_NUMBER_ASC"
  | "VAT_NUMBER_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneSupplierPayload {
  recordId: MongoID | null;
  record: Supplier | null;
  error: ErrorInterface | null;
}

export interface UpdateManySupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManySupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManySupplierOperatorsInput | null;
  OR: Array<FilterUpdateManySupplierInput>;
  AND: Array<FilterUpdateManySupplierInput>;
}

export interface FilterUpdateManySupplierOperatorsInput {
  name: FilterUpdateManySupplierNameOperatorsInput | null;
  image: FilterUpdateManySupplierImageOperatorsInput | null;
  company_name: FilterUpdateManySupplierCompany_nameOperatorsInput | null;
  vat_number: FilterUpdateManySupplierVat_numberOperatorsInput | null;
  email: FilterUpdateManySupplierEmailOperatorsInput | null;
  phone_number: FilterUpdateManySupplierPhone_numberOperatorsInput | null;
  address: FilterUpdateManySupplierAddressOperatorsInput | null;
  _id: FilterUpdateManySupplier_idOperatorsInput | null;
  createdAt: FilterUpdateManySupplierCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManySupplierNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManySupplierImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManySupplierCompany_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManySupplierVat_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateManySupplierEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManySupplierPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateManySupplierAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManySupplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManySupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManySupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "COMPANY_NAME_ASC"
  | "COMPANY_NAME_DESC"
  | "VAT_NUMBER_ASC"
  | "VAT_NUMBER_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManySupplierPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdSupplierPayload {
  recordId: MongoID | null;
  record: Supplier | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneSupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneSupplierOperatorsInput | null;
  OR: Array<FilterRemoveOneSupplierInput>;
  AND: Array<FilterRemoveOneSupplierInput>;
}

export interface FilterRemoveOneSupplierOperatorsInput {
  name: FilterRemoveOneSupplierNameOperatorsInput | null;
  image: FilterRemoveOneSupplierImageOperatorsInput | null;
  company_name: FilterRemoveOneSupplierCompany_nameOperatorsInput | null;
  vat_number: FilterRemoveOneSupplierVat_numberOperatorsInput | null;
  email: FilterRemoveOneSupplierEmailOperatorsInput | null;
  phone_number: FilterRemoveOneSupplierPhone_numberOperatorsInput | null;
  address: FilterRemoveOneSupplierAddressOperatorsInput | null;
  _id: FilterRemoveOneSupplier_idOperatorsInput | null;
  createdAt: FilterRemoveOneSupplierCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneSupplierNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneSupplierImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneSupplierCompany_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneSupplierVat_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneSupplierEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneSupplierPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneSupplierAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneSupplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneSupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneSupplierInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "IMAGE_ASC"
  | "IMAGE_DESC"
  | "COMPANY_NAME_ASC"
  | "COMPANY_NAME_DESC"
  | "VAT_NUMBER_ASC"
  | "VAT_NUMBER_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "PHONE_NUMBER_ASC"
  | "PHONE_NUMBER_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneSupplierPayload {
  recordId: MongoID | null;
  record: Supplier | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManySupplierInput {
  name: string | null;
  image: string | null;
  company_name: string | null;
  vat_number: number | null;
  email: string | null;
  phone_number: number | null;
  address: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManySupplierOperatorsInput | null;
  OR: Array<FilterRemoveManySupplierInput>;
  AND: Array<FilterRemoveManySupplierInput>;
}

export interface FilterRemoveManySupplierOperatorsInput {
  name: FilterRemoveManySupplierNameOperatorsInput | null;
  image: FilterRemoveManySupplierImageOperatorsInput | null;
  company_name: FilterRemoveManySupplierCompany_nameOperatorsInput | null;
  vat_number: FilterRemoveManySupplierVat_numberOperatorsInput | null;
  email: FilterRemoveManySupplierEmailOperatorsInput | null;
  phone_number: FilterRemoveManySupplierPhone_numberOperatorsInput | null;
  address: FilterRemoveManySupplierAddressOperatorsInput | null;
  _id: FilterRemoveManySupplier_idOperatorsInput | null;
  createdAt: FilterRemoveManySupplierCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManySupplierNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManySupplierImageOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManySupplierCompany_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManySupplierVat_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveManySupplierEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManySupplierPhone_numberOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveManySupplierAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManySupplier_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManySupplierCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManySupplierPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneTaxInput {
  name: string;
  rate: number;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneTaxPayload {
  recordId: MongoID | null;
  record: Tax | null;
  error: ErrorInterface | null;
}

export interface CreateManyTaxInput {
  name: string;
  rate: number;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyTaxPayload {
  recordIds: Array<MongoID>;
  records: Array<Tax>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdTaxPayload {
  recordId: MongoID | null;
  record: Tax | null;
  error: ErrorInterface | null;
}

export interface UpdateOneTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneTaxOperatorsInput | null;
  OR: Array<FilterUpdateOneTaxInput>;
  AND: Array<FilterUpdateOneTaxInput>;
}

export interface FilterUpdateOneTaxOperatorsInput {
  name: FilterUpdateOneTaxNameOperatorsInput | null;
  _id: FilterUpdateOneTax_idOperatorsInput | null;
  createdAt: FilterUpdateOneTaxCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneTaxNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneTax_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneTaxCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneTaxInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneTaxPayload {
  recordId: MongoID | null;
  record: Tax | null;
  error: ErrorInterface | null;
}

export interface UpdateManyTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyTaxOperatorsInput | null;
  OR: Array<FilterUpdateManyTaxInput>;
  AND: Array<FilterUpdateManyTaxInput>;
}

export interface FilterUpdateManyTaxOperatorsInput {
  name: FilterUpdateManyTaxNameOperatorsInput | null;
  _id: FilterUpdateManyTax_idOperatorsInput | null;
  createdAt: FilterUpdateManyTaxCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyTaxNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyTax_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyTaxCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyTaxInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyTaxPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdTaxPayload {
  recordId: MongoID | null;
  record: Tax | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneTaxOperatorsInput | null;
  OR: Array<FilterRemoveOneTaxInput>;
  AND: Array<FilterRemoveOneTaxInput>;
}

export interface FilterRemoveOneTaxOperatorsInput {
  name: FilterRemoveOneTaxNameOperatorsInput | null;
  _id: FilterRemoveOneTax_idOperatorsInput | null;
  createdAt: FilterRemoveOneTaxCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneTaxNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneTax_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneTaxCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneTaxInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneTaxPayload {
  recordId: MongoID | null;
  record: Tax | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyTaxInput {
  name: string | null;
  rate: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyTaxOperatorsInput | null;
  OR: Array<FilterRemoveManyTaxInput>;
  AND: Array<FilterRemoveManyTaxInput>;
}

export interface FilterRemoveManyTaxOperatorsInput {
  name: FilterRemoveManyTaxNameOperatorsInput | null;
  _id: FilterRemoveManyTax_idOperatorsInput | null;
  createdAt: FilterRemoveManyTaxCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyTaxNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyTax_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyTaxCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyTaxPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneTransferInput {
  reference_no: string;
  item: number;
  total_qty: number;
  total_tax: number;
  total_cost: number;
  shipping_cost: number;
  grand_total: number;
  paid_amount: number;
  user: MongoID;
  from_warehouse: MongoID;
  to_warehouse: MongoID;
  product_transfers: Array<MongoID>;
  status: EnumTransferStatus;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneTransferPayload {
  recordId: MongoID | null;
  record: Transfer | null;
  error: ErrorInterface | null;
}

export interface CreateManyTransferInput {
  reference_no: string;
  item: number;
  total_qty: number;
  total_tax: number;
  total_cost: number;
  shipping_cost: number;
  grand_total: number;
  paid_amount: number;
  user: MongoID;
  from_warehouse: MongoID;
  to_warehouse: MongoID;
  product_transfers: Array<MongoID>;
  status: EnumTransferStatus;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyTransferPayload {
  recordIds: Array<MongoID>;
  records: Array<Transfer>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdTransferPayload {
  recordId: MongoID | null;
  record: Transfer | null;
  error: ErrorInterface | null;
}

export interface UpdateOneTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneTransferOperatorsInput | null;
  OR: Array<FilterUpdateOneTransferInput>;
  AND: Array<FilterUpdateOneTransferInput>;
}

export interface FilterUpdateOneTransferOperatorsInput {
  reference_no: FilterUpdateOneTransferReference_noOperatorsInput | null;
  document: FilterUpdateOneTransferDocumentOperatorsInput | null;
  note: FilterUpdateOneTransferNoteOperatorsInput | null;
  _id: FilterUpdateOneTransfer_idOperatorsInput | null;
  createdAt: FilterUpdateOneTransferCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneTransferReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneTransferDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneTransferNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneTransfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneTransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneTransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneTransferPayload {
  recordId: MongoID | null;
  record: Transfer | null;
  error: ErrorInterface | null;
}

export interface UpdateManyTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyTransferOperatorsInput | null;
  OR: Array<FilterUpdateManyTransferInput>;
  AND: Array<FilterUpdateManyTransferInput>;
}

export interface FilterUpdateManyTransferOperatorsInput {
  reference_no: FilterUpdateManyTransferReference_noOperatorsInput | null;
  document: FilterUpdateManyTransferDocumentOperatorsInput | null;
  note: FilterUpdateManyTransferNoteOperatorsInput | null;
  _id: FilterUpdateManyTransfer_idOperatorsInput | null;
  createdAt: FilterUpdateManyTransferCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyTransferReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyTransferDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyTransferNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyTransfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyTransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyTransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyTransferPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdTransferPayload {
  recordId: MongoID | null;
  record: Transfer | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneTransferOperatorsInput | null;
  OR: Array<FilterRemoveOneTransferInput>;
  AND: Array<FilterRemoveOneTransferInput>;
}

export interface FilterRemoveOneTransferOperatorsInput {
  reference_no: FilterRemoveOneTransferReference_noOperatorsInput | null;
  document: FilterRemoveOneTransferDocumentOperatorsInput | null;
  note: FilterRemoveOneTransferNoteOperatorsInput | null;
  _id: FilterRemoveOneTransfer_idOperatorsInput | null;
  createdAt: FilterRemoveOneTransferCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneTransferReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneTransferDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneTransferNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneTransfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneTransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneTransferInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "REFERENCE_NO_ASC"
  | "REFERENCE_NO_DESC"
  | "DOCUMENT_ASC"
  | "DOCUMENT_DESC"
  | "NOTE_ASC"
  | "NOTE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneTransferPayload {
  recordId: MongoID | null;
  record: Transfer | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyTransferInput {
  reference_no: string | null;
  item: number | null;
  total_qty: number | null;
  total_tax: number | null;
  total_cost: number | null;
  shipping_cost: number | null;
  grand_total: number | null;
  paid_amount: number | null;
  user: MongoID | null;
  from_warehouse: MongoID | null;
  to_warehouse: MongoID | null;
  product_transfers: Array<MongoID> | null;
  status: EnumTransferStatus | null;
  document: string | null;
  note: string | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyTransferOperatorsInput | null;
  OR: Array<FilterRemoveManyTransferInput>;
  AND: Array<FilterRemoveManyTransferInput>;
}

export interface FilterRemoveManyTransferOperatorsInput {
  reference_no: FilterRemoveManyTransferReference_noOperatorsInput | null;
  document: FilterRemoveManyTransferDocumentOperatorsInput | null;
  note: FilterRemoveManyTransferNoteOperatorsInput | null;
  _id: FilterRemoveManyTransfer_idOperatorsInput | null;
  createdAt: FilterRemoveManyTransferCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyTransferReference_noOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyTransferDocumentOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyTransferNoteOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyTransfer_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyTransferCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyTransferPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneUnitInput {
  unit_name: string;
  unit_code: string;
  base_unit: string;
  operator: string;
  operation_value: number;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneUnitPayload {
  recordId: MongoID | null;
  record: Unit | null;
  error: ErrorInterface | null;
}

export interface CreateManyUnitInput {
  unit_name: string;
  unit_code: string;
  base_unit: string;
  operator: string;
  operation_value: number;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyUnitPayload {
  recordIds: Array<MongoID>;
  records: Array<Unit>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdUnitPayload {
  recordId: MongoID | null;
  record: Unit | null;
  error: ErrorInterface | null;
}

export interface UpdateOneUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneUnitOperatorsInput | null;
  OR: Array<FilterUpdateOneUnitInput>;
  AND: Array<FilterUpdateOneUnitInput>;
}

export interface FilterUpdateOneUnitOperatorsInput {
  unit_name: FilterUpdateOneUnitUnit_nameOperatorsInput | null;
  unit_code: FilterUpdateOneUnitUnit_codeOperatorsInput | null;
  _id: FilterUpdateOneUnit_idOperatorsInput | null;
  createdAt: FilterUpdateOneUnitCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneUnitUnit_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneUnitUnit_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneUnit_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneUnitCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneUnitInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "UNIT_NAME_ASC"
  | "UNIT_NAME_DESC"
  | "UNIT_CODE_ASC"
  | "UNIT_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneUnitPayload {
  recordId: MongoID | null;
  record: Unit | null;
  error: ErrorInterface | null;
}

export interface UpdateManyUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyUnitOperatorsInput | null;
  OR: Array<FilterUpdateManyUnitInput>;
  AND: Array<FilterUpdateManyUnitInput>;
}

export interface FilterUpdateManyUnitOperatorsInput {
  unit_name: FilterUpdateManyUnitUnit_nameOperatorsInput | null;
  unit_code: FilterUpdateManyUnitUnit_codeOperatorsInput | null;
  _id: FilterUpdateManyUnit_idOperatorsInput | null;
  createdAt: FilterUpdateManyUnitCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyUnitUnit_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyUnitUnit_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyUnit_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyUnitCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyUnitInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "UNIT_NAME_ASC"
  | "UNIT_NAME_DESC"
  | "UNIT_CODE_ASC"
  | "UNIT_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyUnitPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdUnitPayload {
  recordId: MongoID | null;
  record: Unit | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneUnitOperatorsInput | null;
  OR: Array<FilterRemoveOneUnitInput>;
  AND: Array<FilterRemoveOneUnitInput>;
}

export interface FilterRemoveOneUnitOperatorsInput {
  unit_name: FilterRemoveOneUnitUnit_nameOperatorsInput | null;
  unit_code: FilterRemoveOneUnitUnit_codeOperatorsInput | null;
  _id: FilterRemoveOneUnit_idOperatorsInput | null;
  createdAt: FilterRemoveOneUnitCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneUnitUnit_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneUnitUnit_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneUnit_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneUnitCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneUnitInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "UNIT_NAME_ASC"
  | "UNIT_NAME_DESC"
  | "UNIT_CODE_ASC"
  | "UNIT_CODE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneUnitPayload {
  recordId: MongoID | null;
  record: Unit | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyUnitInput {
  unit_name: string | null;
  unit_code: string | null;
  base_unit: string | null;
  operator: string | null;
  operation_value: number | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyUnitOperatorsInput | null;
  OR: Array<FilterRemoveManyUnitInput>;
  AND: Array<FilterRemoveManyUnitInput>;
}

export interface FilterRemoveManyUnitOperatorsInput {
  unit_name: FilterRemoveManyUnitUnit_nameOperatorsInput | null;
  unit_code: FilterRemoveManyUnitUnit_codeOperatorsInput | null;
  _id: FilterRemoveManyUnit_idOperatorsInput | null;
  createdAt: FilterRemoveManyUnitCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyUnitUnit_nameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyUnitUnit_codeOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyUnit_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyUnitCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyUnitPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneUserInput {
  name: string;
  password: string;
  role: MongoID;
  personnel: MongoID;
  personnelModel: EnumUserPersonnelModel;
  warehouses: Array<MongoID> | null;
  is_active: boolean;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneUserPayload {
  recordId: MongoID | null;
  record: User | null;
  error: ErrorInterface | null;
}

export interface CreateManyUserInput {
  name: string;
  password: string;
  role: MongoID;
  personnel: MongoID;
  personnelModel: EnumUserPersonnelModel;
  warehouses: Array<MongoID> | null;
  is_active: boolean;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyUserPayload {
  recordIds: Array<MongoID>;
  records: Array<User>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdUserPayload {
  recordId: MongoID | null;
  record: User | null;
  error: ErrorInterface | null;
}

export interface UpdateOneUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneUserOperatorsInput | null;
  OR: Array<FilterUpdateOneUserInput>;
  AND: Array<FilterUpdateOneUserInput>;
}

export interface FilterUpdateOneUserOperatorsInput {
  _id: FilterUpdateOneUser_idOperatorsInput | null;
  createdAt: FilterUpdateOneUserCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneUser_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneUserCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneUserInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneUserPayload {
  recordId: MongoID | null;
  record: User | null;
  error: ErrorInterface | null;
}

export interface UpdateManyUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyUserOperatorsInput | null;
  OR: Array<FilterUpdateManyUserInput>;
  AND: Array<FilterUpdateManyUserInput>;
}

export interface FilterUpdateManyUserOperatorsInput {
  _id: FilterUpdateManyUser_idOperatorsInput | null;
  createdAt: FilterUpdateManyUserCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyUser_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyUserCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyUserInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyUserPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdUserPayload {
  recordId: MongoID | null;
  record: User | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneUserOperatorsInput | null;
  OR: Array<FilterRemoveOneUserInput>;
  AND: Array<FilterRemoveOneUserInput>;
}

export interface FilterRemoveOneUserOperatorsInput {
  _id: FilterRemoveOneUser_idOperatorsInput | null;
  createdAt: FilterRemoveOneUserCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneUser_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneUserCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneUserInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneUserPayload {
  recordId: MongoID | null;
  record: User | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyUserInput {
  name: string | null;
  password: string | null;
  role: MongoID | null;
  personnel: MongoID | null;
  personnelModel: EnumUserPersonnelModel | null;
  warehouses: Array<MongoID> | null;
  is_active: boolean | null;
  is_deleted: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyUserOperatorsInput | null;
  OR: Array<FilterRemoveManyUserInput>;
  AND: Array<FilterRemoveManyUserInput>;
}

export interface FilterRemoveManyUserOperatorsInput {
  _id: FilterRemoveManyUser_idOperatorsInput | null;
  createdAt: FilterRemoveManyUserCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyUser_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyUserCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyUserPayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneValueInput {
  name: string;
  attribute: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneValuePayload {
  recordId: MongoID | null;
  record: Value | null;
  error: ErrorInterface | null;
}

export interface CreateManyValueInput {
  name: string;
  attribute: MongoID;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyValuePayload {
  recordIds: Array<MongoID>;
  records: Array<Value>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdValueInput {
  name: string | null;
  attribute: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdValuePayload {
  recordId: MongoID | null;
  record: Value | null;
  error: ErrorInterface | null;
}

export interface UpdateOneValueInput {
  name: string | null;
  attribute: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneValueInput {
  name: string | null;
  attribute: MongoID | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneValueOperatorsInput | null;
  OR: Array<FilterUpdateOneValueInput>;
  AND: Array<FilterUpdateOneValueInput>;
}

export interface FilterUpdateOneValueOperatorsInput {
  name: FilterUpdateOneValueNameOperatorsInput | null;
  _id: FilterUpdateOneValue_idOperatorsInput | null;
  createdAt: FilterUpdateOneValueCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneValueNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneValue_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneValueCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneValueInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneValuePayload {
  recordId: MongoID | null;
  record: Value | null;
  error: ErrorInterface | null;
}

export interface UpdateManyValueInput {
  name: string | null;
  attribute: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyValueInput {
  name: string | null;
  attribute: MongoID | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyValueOperatorsInput | null;
  OR: Array<FilterUpdateManyValueInput>;
  AND: Array<FilterUpdateManyValueInput>;
}

export interface FilterUpdateManyValueOperatorsInput {
  name: FilterUpdateManyValueNameOperatorsInput | null;
  _id: FilterUpdateManyValue_idOperatorsInput | null;
  createdAt: FilterUpdateManyValueCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyValueNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyValue_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyValueCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyValueInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyValuePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdValuePayload {
  recordId: MongoID | null;
  record: Value | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneValueInput {
  name: string | null;
  attribute: MongoID | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneValueOperatorsInput | null;
  OR: Array<FilterRemoveOneValueInput>;
  AND: Array<FilterRemoveOneValueInput>;
}

export interface FilterRemoveOneValueOperatorsInput {
  name: FilterRemoveOneValueNameOperatorsInput | null;
  _id: FilterRemoveOneValue_idOperatorsInput | null;
  createdAt: FilterRemoveOneValueCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneValueNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneValue_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneValueCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneValueInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneValuePayload {
  recordId: MongoID | null;
  record: Value | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyValueInput {
  name: string | null;
  attribute: MongoID | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyValueOperatorsInput | null;
  OR: Array<FilterRemoveManyValueInput>;
  AND: Array<FilterRemoveManyValueInput>;
}

export interface FilterRemoveManyValueOperatorsInput {
  name: FilterRemoveManyValueNameOperatorsInput | null;
  _id: FilterRemoveManyValue_idOperatorsInput | null;
  createdAt: FilterRemoveManyValueCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyValueNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyValue_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyValueCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyValuePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface CreateOneWarehouseInput {
  name: string;
  email: string;
  address: string;
  phone: number;
  product_variants: Array<MongoID> | null;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateOneWarehousePayload {
  recordId: MongoID | null;
  record: Warehouse | null;
  error: ErrorInterface | null;
}

export interface CreateManyWarehouseInput {
  name: string;
  email: string;
  address: string;
  phone: number;
  product_variants: Array<MongoID> | null;
  is_active: boolean;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface CreateManyWarehousePayload {
  recordIds: Array<MongoID>;
  records: Array<Warehouse>;
  createdCount: number;
  error: ErrorInterface | null;
}

export interface UpdateByIdWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface UpdateByIdWarehousePayload {
  recordId: MongoID | null;
  record: Warehouse | null;
  error: ErrorInterface | null;
}

export interface UpdateOneWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateOneWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateOneWarehouseOperatorsInput | null;
  OR: Array<FilterUpdateOneWarehouseInput>;
  AND: Array<FilterUpdateOneWarehouseInput>;
}

export interface FilterUpdateOneWarehouseOperatorsInput {
  name: FilterUpdateOneWarehouseNameOperatorsInput | null;
  email: FilterUpdateOneWarehouseEmailOperatorsInput | null;
  address: FilterUpdateOneWarehouseAddressOperatorsInput | null;
  phone: FilterUpdateOneWarehousePhoneOperatorsInput | null;
  _id: FilterUpdateOneWarehouse_idOperatorsInput | null;
  createdAt: FilterUpdateOneWarehouseCreatedAtOperatorsInput | null;
}

export interface FilterUpdateOneWarehouseNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneWarehouseEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneWarehouseAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateOneWarehousePhoneOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneWarehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateOneWarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateOneWarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "PHONE_ASC"
  | "PHONE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateOneWarehousePayload {
  recordId: MongoID | null;
  record: Warehouse | null;
  error: ErrorInterface | null;
}

export interface UpdateManyWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  updatedAt: Date | null;
  createdAt: Date | null;
}

export interface FilterUpdateManyWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterUpdateManyWarehouseOperatorsInput | null;
  OR: Array<FilterUpdateManyWarehouseInput>;
  AND: Array<FilterUpdateManyWarehouseInput>;
}

export interface FilterUpdateManyWarehouseOperatorsInput {
  name: FilterUpdateManyWarehouseNameOperatorsInput | null;
  email: FilterUpdateManyWarehouseEmailOperatorsInput | null;
  address: FilterUpdateManyWarehouseAddressOperatorsInput | null;
  phone: FilterUpdateManyWarehousePhoneOperatorsInput | null;
  _id: FilterUpdateManyWarehouse_idOperatorsInput | null;
  createdAt: FilterUpdateManyWarehouseCreatedAtOperatorsInput | null;
}

export interface FilterUpdateManyWarehouseNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyWarehouseEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyWarehouseAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterUpdateManyWarehousePhoneOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyWarehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterUpdateManyWarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortUpdateManyWarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "PHONE_ASC"
  | "PHONE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface UpdateManyWarehousePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}

export interface RemoveByIdWarehousePayload {
  recordId: MongoID | null;
  record: Warehouse | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveOneWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveOneWarehouseOperatorsInput | null;
  OR: Array<FilterRemoveOneWarehouseInput>;
  AND: Array<FilterRemoveOneWarehouseInput>;
}

export interface FilterRemoveOneWarehouseOperatorsInput {
  name: FilterRemoveOneWarehouseNameOperatorsInput | null;
  email: FilterRemoveOneWarehouseEmailOperatorsInput | null;
  address: FilterRemoveOneWarehouseAddressOperatorsInput | null;
  phone: FilterRemoveOneWarehousePhoneOperatorsInput | null;
  _id: FilterRemoveOneWarehouse_idOperatorsInput | null;
  createdAt: FilterRemoveOneWarehouseCreatedAtOperatorsInput | null;
}

export interface FilterRemoveOneWarehouseNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneWarehouseEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneWarehouseAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveOneWarehousePhoneOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneWarehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveOneWarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export type SortRemoveOneWarehouseInput =
  | "_ID_ASC"
  | "_ID_DESC"
  | "NAME_ASC"
  | "NAME_DESC"
  | "EMAIL_ASC"
  | "EMAIL_DESC"
  | "ADDRESS_ASC"
  | "ADDRESS_DESC"
  | "PHONE_ASC"
  | "PHONE_DESC"
  | "CREATEDAT_ASC"
  | "CREATEDAT_DESC"
  | "CREATEDAT__UPDATEDAT_ASC"
  | "CREATEDAT__UPDATEDAT_DESC";

export interface RemoveOneWarehousePayload {
  recordId: MongoID | null;
  record: Warehouse | null;
  error: ErrorInterface | null;
}

export interface FilterRemoveManyWarehouseInput {
  name: string | null;
  email: string | null;
  address: string | null;
  phone: number | null;
  product_variants: Array<MongoID> | null;
  is_active: boolean | null;
  _id: MongoID | null;
  updatedAt: Date | null;
  createdAt: Date | null;
  _operators: FilterRemoveManyWarehouseOperatorsInput | null;
  OR: Array<FilterRemoveManyWarehouseInput>;
  AND: Array<FilterRemoveManyWarehouseInput>;
}

export interface FilterRemoveManyWarehouseOperatorsInput {
  name: FilterRemoveManyWarehouseNameOperatorsInput | null;
  email: FilterRemoveManyWarehouseEmailOperatorsInput | null;
  address: FilterRemoveManyWarehouseAddressOperatorsInput | null;
  phone: FilterRemoveManyWarehousePhoneOperatorsInput | null;
  _id: FilterRemoveManyWarehouse_idOperatorsInput | null;
  createdAt: FilterRemoveManyWarehouseCreatedAtOperatorsInput | null;
}

export interface FilterRemoveManyWarehouseNameOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyWarehouseEmailOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyWarehouseAddressOperatorsInput {
  gt: string | null;
  gte: string | null;
  lt: string | null;
  lte: string | null;
  ne: string | null;
  in: Array<string> | null;
  nin: Array<string> | null;
  regex: RegExpAsString | null;
  exists: boolean | null;
}

export interface FilterRemoveManyWarehousePhoneOperatorsInput {
  gt: number | null;
  gte: number | null;
  lt: number | null;
  lte: number | null;
  ne: number | null;
  in: Array<number> | null;
  nin: Array<number> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyWarehouse_idOperatorsInput {
  gt: MongoID | null;
  gte: MongoID | null;
  lt: MongoID | null;
  lte: MongoID | null;
  ne: MongoID | null;
  in: Array<MongoID> | null;
  nin: Array<MongoID> | null;
  exists: boolean | null;
}

export interface FilterRemoveManyWarehouseCreatedAtOperatorsInput {
  gt: Date | null;
  gte: Date | null;
  lt: Date | null;
  lte: Date | null;
  ne: Date | null;
  in: Array<Date> | null;
  nin: Array<Date> | null;
  exists: boolean | null;
}

export interface RemoveManyWarehousePayload {
  numAffected: number | null;
  error: ErrorInterface | null;
}
